1
00:00:05,839 --> 00:00:08,160
привет всем, добро пожаловать во вторую часть

2
00:00:08,160 --> 00:00:11,280
нашей серии статей о nlu и ir.

3
00:00:11,280 --> 00:00:13,280
Этот скринкаст будет ускоренным курсом

4
00:00:13,280 --> 00:00:15,759
по классическому ir, а также

5
00:00:15,759 --> 00:00:19,520
методам оценки в поиске информации.

6
00:00:20,560 --> 00:00:22,560
Давайте сначала определим простейшую форму

7
00:00:22,560 --> 00:00:26,000
нашей задачи, а именно ранжированный поиск,

8
00:00:26,000 --> 00:00:27,680
нам будет предоставлен большой  коллекция

9
00:00:27,680 --> 00:00:29,199
текстовых документов,

10
00:00:29,199 --> 00:00:30,560
это могут быть все

11
00:00:30,560 --> 00:00:32,399
отрывки из википедии,

12
00:00:32,399 --> 00:00:35,120
возможно, обход частей сети или,

13
00:00:35,120 --> 00:00:36,559
может быть, вся документация

14
00:00:36,559 --> 00:00:40,719
обнимающего лица или других программных библиотек,

15
00:00:40,719 --> 00:00:42,719
этот корпус будет предоставлен нам в

16
00:00:42,719 --> 00:00:45,200
автономном режиме, то есть до того, как мы взаимодействуем  с

17
00:00:45,200 --> 00:00:46,399
любыми пользователями,

18
00:00:46,399 --> 00:00:48,320
и мы сможем потратить однократное

19
00:00:48,320 --> 00:00:50,480
усилие на организацию или иное

20
00:00:50,480 --> 00:00:52,079
понимание содержания этих

21
00:00:52,079 --> 00:00:54,239
документов в корпусе, прежде чем мы начнем

22
00:00:54,239 --> 00:00:56,719
поиск в

23
00:00:57,199 --> 00:00:58,640
Интернете, хотя

24
00:00:58,640 --> 00:01:01,280
мы получим запрос от пользователей,

25
00:01:01,280 --> 00:01:03,120
который может быть вопросом на естественном языке,

26
00:01:03,120 --> 00:01:06,240
написанным  Например, на английском

27
00:01:06,240 --> 00:01:08,640
языке цель нашей ранжированной поисковой системы

28
00:01:08,640 --> 00:01:10,400
будет состоять в том, чтобы вывести список лучших k

29
00:01:10,400 --> 00:01:12,799
документов, отсортированных в порядке убывания

30
00:01:12,799 --> 00:01:15,119
релевантности для  потребность в информации,

31
00:01:15,119 --> 00:01:18,880
которую пользователь выразил в запросе,

32
00:01:19,520 --> 00:01:21,200
поэтому это могут быть первые 10 или первые

33
00:01:21,200 --> 00:01:24,000
100 результатов,

34
00:01:24,320 --> 00:01:27,520
так как мы выполняем эту задачу ранжированного

35
00:01:27,520 --> 00:01:29,439
поиска,

36
00:01:29,439 --> 00:01:31,200
поскольку оказывается, что мы уже

37
00:01:31,200 --> 00:01:33,200
рассматривали способ сделать это раньше при

38
00:01:33,200 --> 00:01:35,680
обсуждении

39
00:01:35,680 --> 00:01:38,079
В частности, мы знаем, что можем построить

40
00:01:38,079 --> 00:01:40,640
матрицы вхождений документов терминов,

41
00:01:40,640 --> 00:01:43,600
и в такой матрице, как показанная,

42
00:01:43,600 --> 00:01:45,680
каждая пара документов терминов

43
00:01:45,680 --> 00:01:47,840
имеет соответствующую ячейку, в которой

44
00:01:47,840 --> 00:01:49,920
матрица будет хранить количество раз

45
00:01:49,920 --> 00:01:52,159
, когда термин появляется в документе в

46
00:01:52,159 --> 00:01:55,360
нашем  корпуса,

47
00:01:55,360 --> 00:01:57,280
конечно, мы, вероятно, захотим применить здесь

48
00:01:57,280 --> 00:01:59,119
какое-то повторное взвешивание, потому что

49
00:01:59,119 --> 00:02:00,640
мы не хотим работать с этим количеством строк,

50
00:02:00,640 --> 00:02:03,200
но как только мы это сделали, мы

51
00:02:03,200 --> 00:02:05,119
уже можем довольно хорошо отвечать на запросы, которые содержат

52
00:02:05,119 --> 00:02:08,720
только один термин, и  сделать это,

53
00:02:08,720 --> 00:02:10,399
мы просто вернули бы k

54
00:02:10,399 --> 00:02:12,400
документов с наибольшим весом после

55
00:02:12,400 --> 00:02:14,480
нормализации или других процессов для

56
00:02:14,480 --> 00:02:17,280
этого единственного термина,

57
00:02:17,280 --> 00:02:18,720
и опять же, как оказалось, это

58
00:02:18,720 --> 00:02:21,120
именно то, что делается в классическом ir,

59
00:02:21,120 --> 00:02:23,280
если w  у нас есть только один запрос только

60
00:02:23,280 --> 00:02:26,239
один термин в нашем запросе,

61
00:02:26,239 --> 00:02:28,000
когда у нас есть несколько терминов в одном и том же

62
00:02:28,000 --> 00:02:29,040
запросе,

63
00:02:29,040 --> 00:02:31,120
классический метод имеет тенденцию обрабатывать их

64
00:02:31,120 --> 00:02:32,400
независимо,

65
00:02:32,400 --> 00:02:34,480
поэтому мы в основном добавляем веса

66
00:02:34,480 --> 00:02:37,120
для всех терминов в запросе для

67
00:02:37,120 --> 00:02:39,599
каждого документа, а затем это  оценка

68
00:02:39,599 --> 00:02:41,680
для документа — это именно то

69
00:02:41,680 --> 00:02:43,840
вычисление, которое показано здесь, где мы

70
00:02:43,840 --> 00:02:46,319
вычисляем оценку релевантности

71
00:02:46,319 --> 00:02:48,319
между запросом и документом,

72
00:02:48,319 --> 00:02:50,080
мы проходим по всем терминам в

73
00:02:50,080 --> 00:02:53,440
запросе и просто добавляем соответствующие

74
00:02:53,440 --> 00:02:55,280
веса терминов документа для всех этих

75
00:02:55,280 --> 00:02:56,239
терминов

76
00:02:56,239 --> 00:02:57,840
для этого  документ,

77
00:02:57,840 --> 00:03:00,080
это дает нам балл для документа,

78
00:03:00,080 --> 00:03:02,080
и мы можем затем вернуть k документов

79
00:03:02,080 --> 00:03:04,959
с наибольшим общим баллом, что

80
00:03:04,959 --> 00:03:06,879
интересно, это сводит большую часть

81
00:03:06,879 --> 00:03:09,040
классического ir, хотя, конечно, не все

82
00:03:09,040 --> 00:03:11,519
это к размышлениям о том, как нам лучше всего

83
00:03:11,519 --> 00:03:15,120
взвесить каждую пару терминов документов,

84
00:03:15,120 --> 00:03:17,120
которая имеет  неоспоримое сходство с

85
00:03:17,120 --> 00:03:19,200
нашим первым заданием в этом квартале в домашнем задании,

86
00:03:19,200 --> 00:03:20,640


87
00:03:20,640 --> 00:03:22,800
за исключением, конечно, здесь, в ir, мы смотрим на

88
00:03:22,800 --> 00:03:25,360
термин, чтобы задокументировать релевантность, а не на слово

89
00:03:25,360 --> 00:03:28,720
к слову.  Итак

90
00:03:30,480 --> 00:03:32,080
, думая о взвешивании документа термина,

91
00:03:32,080 --> 00:03:33,120


92
00:03:33,120 --> 00:03:35,599
вот некоторые интуитивные соображения, которые могут быть

93
00:03:35,599 --> 00:03:37,360
полезны, когда мы думаем о том, что делает

94
00:03:37,360 --> 00:03:40,799
сильную модель ожидания термина в ir,

95
00:03:40,799 --> 00:03:43,200
конечно, позже в следующем скринкасте,

96
00:03:43,200 --> 00:03:44,959
в частности, мы рассмотрим нейронные

97
00:03:44,959 --> 00:03:46,159
модели,

98
00:03:46,159 --> 00:03:49,440
которые выходят за рамки этого,

99
00:03:49,440 --> 00:03:51,440
но  на данный момент, возможно, два наиболее

100
00:03:51,440 --> 00:03:52,480
заметных

101
00:03:52,480 --> 00:03:54,879
интуитивных предположения об ожидании документа термина

102
00:03:54,879 --> 00:03:57,040
связаны с нашим первым

103
00:03:57,040 --> 00:03:58,840
обсуждением частоты и

104
00:03:58,840 --> 00:04:01,599
нормализации, в частности,

105
00:04:01,599 --> 00:04:03,760
если термин t часто встречается в

106
00:04:03,760 --> 00:04:05,200
документе d,

107
00:04:05,200 --> 00:04:06,720
документ, скорее всего, будет

108
00:04:06,720 --> 00:04:08,480
релевантным для запросов, которые включают

109
00:04:08,480 --> 00:04:13,040
термин t или  это одна из наших интуиций,

110
00:04:13,040 --> 00:04:15,040
и вы знаете с точки зрения

111
00:04:15,040 --> 00:04:17,120
нормализации, если этот термин t довольно

112
00:04:17,120 --> 00:04:18,079
редок,

113
00:04:18,079 --> 00:04:20,160
поэтому, если он встречается только в нескольких документах в

114
00:04:20,160 --> 00:04:23,360
целом, мы воспринимаем это как более сильный

115
00:04:23,360 --> 00:04:25,680
сигнал о том, что документ d даже

116
00:04:25,680 --> 00:04:27,360
более актуален  для запросов,

117
00:04:27,360 --> 00:04:30,240
включающих,

118
00:04:30,479 --> 00:04:32,960
наконец, t, если документ d довольно короткий, мы

119
00:04:32,960 --> 00:04:35,120
принимаем это как еще один сигнал,

120
00:04:35,120 --> 00:04:37,360
который может повысить нашу уверенность в том,

121
00:04:37,360 --> 00:04:40,320
что термин t был включен в t  Это довольно

122
00:04:40,320 --> 00:04:43,040
короткий документ, по какой-то причине

123
00:04:43,040 --> 00:04:44,720
сделав шаг назад и думая

124
00:04:44,720 --> 00:04:46,639
шире, мы все еще работаем в соответствии

125
00:04:46,639 --> 00:04:49,199
с тем же утверждением, что и в первом разделе,

126
00:04:49,199 --> 00:04:51,520
наша цель в конечном итоге состоит в том, чтобы усилить

127
00:04:51,520 --> 00:04:53,840
важные сигналы, заслуживающие доверия

128
00:04:53,840 --> 00:04:56,479
и необычные, и уменьшить акцент на

129
00:04:56,479 --> 00:04:59,680
обыденных и  причудливо,

130
00:05:01,039 --> 00:05:02,320
что в ir так много разных функций взвешивания терминов,

131
00:05:02,320 --> 00:05:04,400


132
00:05:04,400 --> 00:05:06,639
но большинство из них напрямую

133
00:05:06,639 --> 00:05:09,520
вдохновлены tf-idf и используют очень похожую

134
00:05:09,520 --> 00:05:11,280
вычислительную форму

135
00:05:11,280 --> 00:05:14,240
для tf idf, это немного отличная

136
00:05:14,240 --> 00:05:16,560
версия от той, что используется в первом модуле.

137
00:05:16,560 --> 00:05:18,240
здесь немного отличается,

138
00:05:18,240 --> 00:05:19,759
это более популярная версия в

139
00:05:19,759 --> 00:05:22,400
контексте ir-приложений, но ef idf

140
00:05:22,400 --> 00:05:24,639
часто перегружается, и вы увидите

141
00:05:24,639 --> 00:05:25,759
несколько

142
00:05:25,759 --> 00:05:27,120
реализаций,

143
00:05:27,120 --> 00:05:29,039
если будете их искать,

144
00:05:29,039 --> 00:05:30,880
поэтому мы определим n как размер

145
00:05:30,880 --> 00:05:32,000
коллекции,

146
00:05:32,000 --> 00:05:36,000
а df  или частота документа

147
00:05:36,000 --> 00:05:39,039
термина f

148
00:05:39,039 --> 00:05:40,800
термина будет числом документов,

149
00:05:40,800 --> 00:05:43,759
содержащих этот термин в коллекции,

150
00:05:43,759 --> 00:05:46,639
тогда будет определено tf или частота термина

151
00:05:46,639 --> 00:05:48,080
пары документов термина

152
00:05:48,080 --> 00:05:50,080
поскольку логарифм

153
00:05:50,080 --> 00:05:53,440
частоты этого термина в этом документе

154
00:05:53,440 --> 00:05:54,639
с единицей

155
00:05:54,639 --> 00:05:58,319
только по математическим причинам

156
00:05:58,560 --> 00:06:01,039
idf или обратная частота документа

157
00:06:01,039 --> 00:06:02,720
определяется как

158
00:06:02,720 --> 00:06:04,720
логарифм n, деленный на частоту документа

159
00:06:04,720 --> 00:06:07,840
термина

160
00:06:07,840 --> 00:06:10,319
tf-idf, то это не что иное, как

161
00:06:10,319 --> 00:06:13,039
произведение этих  два значения для каждого условия запроса, суммированные

162
00:06:13,039 --> 00:06:14,160


163
00:06:14,160 --> 00:06:16,000
в конце, чтобы присвоить единую общую

164
00:06:16,000 --> 00:06:18,240
оценку каждому документу путем суммирования

165
00:06:18,240 --> 00:06:19,759
всех условий запроса, как мы уже

166
00:06:19,759 --> 00:06:21,039
обсуждали ранее,

167
00:06:21,039 --> 00:06:23,280
конечно, более высокие оценки лучше,

168
00:06:23,280 --> 00:06:25,120
и документы с высшим баллом — это те,

169
00:06:25,120 --> 00:06:26,960
которые мы бы  вернитесь к поисковику, если

170
00:06:26,960 --> 00:06:30,319
мы будем использовать df-idf,

171
00:06:30,319 --> 00:06:31,440
обратите внимание,

172
00:06:31,440 --> 00:06:34,960
как tf и idf растут сублинейно и, в

173
00:06:34,960 --> 00:06:37,199
частности, логарифмически с

174
00:06:37,199 --> 00:06:38,479
частотой

175
00:06:38,479 --> 00:06:42,639
и один над df соответственно,

176
00:06:45,520 --> 00:06:47,600
гораздо более сильная модель взвешивания терминов на

177
00:06:47,600 --> 00:06:51,360
практике - это bm25 или число наилучшего соответствия 25,

178
00:06:51,360 --> 00:06:53,039
и, как вы могли бы  представьте, что потребовалось много

179
00:06:53,039 --> 00:06:57,199
попыток, пока bm25 не был разработан

180
00:06:58,319 --> 00:07:00,639
для наших целей, в отличие от tf-idf, тепловая

181
00:07:00,639 --> 00:07:03,680
частота в m25

182
00:07:03,680 --> 00:07:06,160
насыщается в сторону постоянного значения для

183
00:07:06,160 --> 00:07:07,360
каждого члена,

184
00:07:07,360 --> 00:07:09,599
а также  он наказывает более длинные документы

185
00:07:09,599 --> 00:07:11,599
при подсчете частот,

186
00:07:11,599 --> 00:07:13,199
поскольку более длинный документ, естественно, будет

187
00:07:13,199 --> 00:07:17,199
содержать больше вхождений его терминов,

188
00:07:17,199 --> 00:07:19,360
это основные отличия, и это

189
00:07:19,360 --> 00:07:22,240
действительно помогает bm-25 на практике быть гораздо

190
00:07:22,240 --> 00:07:25,759
более сильной моделью ожидания термина

191
00:07:26,160 --> 00:07:28,240
теперь, когда мы определили поведение

192
00:07:28,240 --> 00:07:29,440
этих

193
00:07:29,440 --> 00:07:31,840
вы знаете функции ожидания или, по крайней мере,

194
00:07:31,840 --> 00:07:33,680
пару из них, как бы мы на самом деле

195
00:07:33,680 --> 00:07:36,319
реализовали это как реальную систему, которую

196
00:07:36,319 --> 00:07:39,120
мы могли бы использовать для поиска,

197
00:07:39,120 --> 00:07:41,520
так что давайте подумаем об этом, тогда как

198
00:07:41,520 --> 00:07:44,160
коллекция строк фактический текст поддерживает

199
00:07:44,160 --> 00:07:46,800
быстрый доступ из документов к терминам,

200
00:07:46,800 --> 00:07:49,360
так что в основном токенизация  дает нам

201
00:07:49,360 --> 00:07:51,280
термины каждого документа.

202
00:07:51,280 --> 00:07:53,759
Матрица документа терминов, которую мы

203
00:07:53,759 --> 00:07:56,000
изучали до сих пор, обеспечивает быстрый доступ от

204
00:07:56,000 --> 00:07:58,080
термина к документам, так что это немного

205
00:07:58,080 --> 00:07:59,520
обратный процесс,

206
00:07:59,520 --> 00:08:02,639
к сожалению, матрица документа терминов

207
00:08:02,639 --> 00:08:05,520
слишком разрежена и содержит слишком много

208
00:08:05,520 --> 00:08:07,759
нулей для  быть полезным, поскольку средний

209
00:08:07,759 --> 00:08:10,639
термин не встречается в подавляющем

210
00:08:10,639 --> 00:08:13,360
большинстве документов, если подумать,

211
00:08:13,360 --> 00:08:15,120
поэтому инвертированный индекс — вот где он используется.

212
00:08:15,120 --> 00:08:17,120
mes в этом - структура данных, которая

213
00:08:17,120 --> 00:08:19,440
решает эту проблему, это, по сути,

214
00:08:19,440 --> 00:08:21,280
просто разреженное представление нашей

215
00:08:21,280 --> 00:08:22,560
матрицы здесь,

216
00:08:22,560 --> 00:08:24,560
которая отображает каждый уникальный термин в

217
00:08:24,560 --> 00:08:26,560
коллекции, поэтому каждый уникальный термин в нашем

218
00:08:26,560 --> 00:08:27,919
словаре

219
00:08:27,919 --> 00:08:31,199
соответствует тому, что мы называем

220
00:08:31,199 --> 00:08:32,559
списком публикации список публикации

221
00:08:32,559 --> 00:08:34,080
термина  t

222
00:08:34,080 --> 00:08:36,399
просто перечисляет все фактические

223
00:08:36,399 --> 00:08:38,000
появления термина t в

224
00:08:38,000 --> 00:08:39,279
документах,

225
00:08:39,279 --> 00:08:41,679
записывая как идентификатор каждого документа,

226
00:08:41,679 --> 00:08:44,000
в котором появляется термин t, так и его

227
00:08:44,000 --> 00:08:47,839
частоту в каждом из этих документов,

228
00:08:50,880 --> 00:08:53,279
поэтому помимо моделей взвешивания терминов ir,

229
00:08:53,279 --> 00:08:55,760
конечно, содержит множество моделей для  другие

230
00:08:55,760 --> 00:08:57,920
вещи, так что есть модели для расширения

231
00:08:57,920 --> 00:08:59,519
запросов и документов,

232
00:08:59,519 --> 00:09:01,920
это в основном влечет за собой добавление новых терминов

233
00:09:01,920 --> 00:09:04,480
в запросы или в документы или в оба, чтобы

234
00:09:04,480 --> 00:09:06,080
помочь с проблемой несоответствия словарного запаса,

235
00:09:06,080 --> 00:09:07,680
которую мы обсуждали в первом

236
00:09:07,680 --> 00:09:09,600
скринкасте серии, в

237
00:09:09,600 --> 00:09:11,839
основном, когда запросы и документы используют

238
00:09:11,839 --> 00:09:13,279
разные термины  чтобы выразить то же

239
00:09:13,279 --> 00:09:14,640
самое,

240
00:09:14,640 --> 00:09:16,480
есть также много работы над зависимостью от термина

241
00:09:16,480 --> 00:09:18,880
и уведомлением о поиске по фразе, которое

242
00:09:18,880 --> 00:09:20,800
до сих пор мы предполагали t  термины в каждом

243
00:09:20,800 --> 00:09:22,399
запросе и в каждом документе

244
00:09:22,399 --> 00:09:24,320
независимы, и мы работаем в стиле набора

245
00:09:24,320 --> 00:09:25,279
слов,

246
00:09:25,279 --> 00:09:27,040


247
00:09:27,040 --> 00:09:29,200
но работа над зависимостью от терминов и

248
00:09:29,200 --> 00:09:31,360
поиском по фразе ослабляет эти предположения о том,

249
00:09:31,360 --> 00:09:33,120
что каждый запрос представляет собой набор независимых

250
00:09:33,120 --> 00:09:34,240
терминов,

251
00:09:34,240 --> 00:09:36,000
наконец, также много работы по

252
00:09:36,000 --> 00:09:39,040
обучению ранжированию с помощью  различные функции,

253
00:09:39,040 --> 00:09:40,640
такие как оценка релевантности, когда

254
00:09:40,640 --> 00:09:42,320
документы имеют несколько полей, например,

255
00:09:42,320 --> 00:09:45,040
заголовок, основной текст, некоторые заголовки,

256
00:09:45,040 --> 00:09:47,279
нижний колонтитул, а также якорный текст, который является

257
00:09:47,279 --> 00:09:49,120
очень сильным сигналом, когда он у вас есть, как

258
00:09:49,120 --> 00:09:51,120
в веб-поиске, так что это в основном

259
00:09:51,120 --> 00:09:52,080
текст

260
00:09:52,080 --> 00:09:54,640
из ссылок в других  страниц на вашу страницу,

261
00:09:54,640 --> 00:09:56,480
текст в этих ссылках или вокруг этих

262
00:09:56,480 --> 00:09:59,360
ссылок, как правило,

263
00:09:59,519 --> 00:10:01,279
очень полезен

264
00:10:01,279 --> 00:10:04,160
в качестве релевантного сигнала

265
00:10:04,160 --> 00:10:05,920
и, конечно, также такие вещи, как рейтинг страницы

266
00:10:05,920 --> 00:10:08,399
с анализом ссылок и множество других

267
00:10:08,399 --> 00:10:10,800
функций для ir, таких как давность и другие

268
00:10:10,800 --> 00:10:12,000
вещи,

269
00:10:12,000 --> 00:10:14,000
но я думаю, что это стоит  упомянув, что

270
00:10:14,000 --> 00:10:15,920
до недавнего времени, если у вас была

271
00:10:15,920 --> 00:10:18,399
коллекция, которую вы хотите найти, и

272
00:10:18,399 --> 00:10:20,880
вы не хотели много тюнинговать,

273
00:10:20,880 --> 00:10:24,000
bm25 был очень сильным базовым уровнем

274
00:10:24,000 --> 00:10:26,079
на  лучшее, что вы могли бы сделать специально

275
00:10:26,079 --> 00:10:28,640
, без потери настройки и, как

276
00:10:28,640 --> 00:10:30,320
вы знаете, без большого количества обучающих данных и

277
00:10:30,320 --> 00:10:33,279
т. д., и это изменилось только год или два

278
00:10:33,279 --> 00:10:35,440
назад с появлением ранжирования на основе рождения,

279
00:10:35,440 --> 00:10:37,440
которое мы подробно обсудим

280
00:10:37,440 --> 00:10:41,279
в следующем скринкасте  место в

281
00:10:44,839 --> 00:10:47,200
сериале хорошо,

282
00:10:47,200 --> 00:10:50,079
поэтому мы только что построили свою систему,

283
00:10:50,079 --> 00:10:52,480
как мы оцениваем нашу работу, что такое

284
00:10:52,480 --> 00:10:54,079
успех, как

285
00:10:54,079 --> 00:10:56,000
хорошо, поисковая система, как вы можете себе представить,

286
00:10:56,000 --> 00:10:58,959
должна быть эффективной и действенной,

287
00:10:58,959 --> 00:11:00,560
вы знаете, если бы у нас было бесконечное время и

288
00:11:00,560 --> 00:11:02,399
бесконечные ресурсы, мы бы просто  нанять

289
00:11:02,399 --> 00:11:04,160
экспертов для просмотра всех

290
00:11:04,160 --> 00:11:06,399
документов один за другим для проведения

291
00:11:06,399 --> 00:11:09,600
поиска, но очевидно, что у нас нет

292
00:11:09,600 --> 00:11:11,839
такой возможности,

293
00:11:11,839 --> 00:11:14,560
поэтому эффективность в ir имеет первостепенное значение, в конце

294
00:11:14,560 --> 00:11:16,800
концов, мы хотим, чтобы наши модели поиска работали

295
00:11:16,800 --> 00:11:18,560
с задержкой доли секунды для

296
00:11:18,560 --> 00:11:20,240
коллекций, которые могут  иметь сотни

297
00:11:20,240 --> 00:11:22,079
миллионов документов, если не больше,

298
00:11:22,079 --> 00:11:24,000
чем это,

299
00:11:24,000 --> 00:11:26,240
наиболее распространенной мерой эффективности в

300
00:11:26,240 --> 00:11:28,720
ir является задержка, которая представляет собой просто время

301
00:11:28,720 --> 00:11:30,640
, необходимое для выполнения одного запроса через

302
00:11:30,640 --> 00:11:33,519
систему, скажем, в среднем или, возможно,  в

303
00:11:33,519 --> 00:11:35,760
хвосте, например, 95-й процентиль,

304
00:11:35,760 --> 00:11:37,200


305
00:11:37,200 --> 00:11:39,440
но вы также можете измерить пропускную способность

306
00:11:39,440 --> 00:11:41,360
в запросах в секунду,

307
00:11:41,360 --> 00:11:43,360
сколько вы знаете, может быть,

308
00:11:43,360 --> 00:11:45,680
инвертированный индекс занимает на диске по сравнению с тем, что вы

309
00:11:45,680 --> 00:11:48,720
знаете, скажем, матрица документа термина,

310
00:11:48,720 --> 00:11:50,160
насколько хорошо вы масштабируете до разных

311
00:11:50,160 --> 00:11:51,920
размеров коллекции в  с точки зрения

312
00:11:51,920 --> 00:11:53,200
количества документов или размера

313
00:11:53,200 --> 00:11:54,880
документов, гм,

314
00:11:54,880 --> 00:11:56,399
и как вы работаете при разных

315
00:11:56,399 --> 00:11:58,639
запросах, загружаете много запросов, несколько запросов,

316
00:11:58,639 --> 00:12:01,279
короткие запросы, длинные запросы, гм, и, наконец,

317
00:12:01,279 --> 00:12:02,880
конечно, какое оборудование вам

318
00:12:02,880 --> 00:12:05,120
требуется, это всего лишь одно ядро процессора много

319
00:12:05,120 --> 00:12:08,399
ядер  куча графических процессоров, но задержка,

320
00:12:08,399 --> 00:12:09,760
как правило, является своего рода после того, как вы

321
00:12:09,760 --> 00:12:11,200
определили другие,

322
00:12:11,200 --> 00:12:15,680
это основная метрика, в большинстве случаев

323
00:12:16,320 --> 00:12:18,160
более важная для нашего сегодняшнего обсуждения, и

324
00:12:18,160 --> 00:12:20,160
мы сосредоточимся на этом для остальной

325
00:12:20,160 --> 00:12:22,720
части скринкаста.  их эффективность

326
00:12:22,720 --> 00:12:27,440
или качество в основном ir-системы,

327
00:12:27,440 --> 00:12:30,639
и здесь мы спрашиваем, удовлетворяют ли наши лучшие k ранжирования

328
00:12:30,639 --> 00:12:32,480
по справедливости информационную потребность пользователя,

329
00:12:32,480 --> 00:12:35,040


330
00:12:35,040 --> 00:12:36,800
ответ на этот вопрос, как правило,

331
00:12:36,800 --> 00:12:39,279
сложнее, чем оценка для типичной

332
00:12:39,279 --> 00:12:40,800
задачи машинного обучения, такие как

333
00:12:40,800 --> 00:12:43,200
классификация или регрессия,

334
00:12:43,200 --> 00:12:45,279
потому что на самом деле мы не просто берем вам

335
00:12:45,279 --> 00:12:48,079
известный элемент и присваиваем ему класс,

336
00:12:48,079 --> 00:12:50,079
мы пытаемся ранжировать

337
00:12:50,079 --> 00:12:51,600
все элементы в нашем корпусе

338
00:12:51,600 --> 00:12:54,639
относительно справедливости

339
00:12:54,720 --> 00:12:56,880
на практике, если у вас много пользователей, которых

340
00:12:56,880 --> 00:12:59,680
вы  можно проводить онлайн-эксперименты, в

341
00:12:59,680 --> 00:13:01,040
которых вы в основном предоставляете разные

342
00:13:01,040 --> 00:13:02,720
версии вашей системы разным

343
00:13:02,720 --> 00:13:03,680
пользователям

344
00:13:03,680 --> 00:13:05,040
и сравниваете

345
00:13:05,040 --> 00:13:08,000
некоторые показатели удовлетворенности или

346
00:13:08,000 --> 00:13:10,320
конверсии, в основном с точки зрения известных

347
00:13:10,320 --> 00:13:12,560
вам покупок или иным образом, но в

348
00:13:12,560 --> 00:13:14,480
исследовательских целях нас обычно

349
00:13:14,480 --> 00:13:17,360
интересуют многоразовые тестовые коллекции

350
00:13:17,360 --> 00:13:18,720
тестовых соединений, которые позволяют  мы

351
00:13:18,720 --> 00:13:21,120
оцениваем свои модели в автономном режиме, а затем

352
00:13:21,120 --> 00:13:24,720
сравниваем их друг с другом.

353
00:13:25,440 --> 00:13:27,680
Создание тестовой коллекции включает в себя три

354
00:13:27,680 --> 00:13:28,560
вещи: во-

355
00:13:28,560 --> 00:13:30,240
первых, нам нужно выбрать коллекцию документов,

356
00:13:30,240 --> 00:13:32,160
наш корпус,

357
00:13:32,160 --> 00:13:35,040
набор тестовых запросов, и нам нужно

358
00:13:35,040 --> 00:13:37,200
найти, получить или произвести соответствующие

359
00:13:37,200 --> 00:13:39,680
оценки для каждого запроса.

360
00:13:39,680 --> 00:13:41,680
если позволяют ресурсы, коллекция может

361
00:13:41,680 --> 00:13:44,240
также включать разделение запросов на разработку поезда,

362
00:13:44,240 --> 00:13:45,360


363
00:13:45,360 --> 00:13:47,519
но с учетом высокой аннотации  стоимость на

364
00:13:47,519 --> 00:13:50,240
самом деле не редкость в ir найти

365
00:13:50,240 --> 00:13:53,440
или создать только тестовый

366
00:13:53,440 --> 00:13:55,279
набор ключевым компонентом тестового набора

367
00:13:55,279 --> 00:13:57,360
являются соответствующие оценки это в

368
00:13:57,360 --> 00:13:59,360
основном человеческие аннотированные метки для

369
00:13:59,360 --> 00:14:00,800
каждого запроса,

370
00:14:00,800 --> 00:14:03,519
которые перечисляют для нас,

371
00:14:03,519 --> 00:14:05,440
относятся ли конкретные документы

372
00:14:05,440 --> 00:14:06,959
к этому запросу или нет

373
00:14:06,959 --> 00:14:09,120
эти оценки документа запроса могут

374
00:14:09,120 --> 00:14:11,440
быть либо бинарными, либо они могут иметь

375
00:14:11,440 --> 00:14:14,800
более мелкозернистый

376
00:14:14,800 --> 00:14:16,480
градуированный характер, например, оценка

377
00:14:16,480 --> 00:14:19,839
пары документов запроса как минус один ноль один или

378
00:14:19,839 --> 00:14:22,240
два со значениями «эй, это ненужный

379
00:14:22,240 --> 00:14:24,000
документ минус один, который вы должны»  не

380
00:14:24,000 --> 00:14:25,760
извлекать его для какого-либо запроса, или этот

381
00:14:25,760 --> 00:14:28,399
документ не имеет значения, но он

382
00:14:28,399 --> 00:14:30,160
может быть полезен для других запросов, или

383
00:14:30,160 --> 00:14:31,760
этот документ весьма актуален для этого

384
00:14:31,760 --> 00:14:34,240
запроса, но это не идеальное совпадение, или

385
00:14:34,240 --> 00:14:35,920
вы знаете, что это действительно очень хорошее

386
00:14:35,920 --> 00:14:38,079
совпадение для нашего запроса.  это будет

387
00:14:38,079 --> 00:14:41,279
оценка два или три в зависимости от

388
00:14:41,279 --> 00:14:44,240
оценок, которые вы используете

389
00:14:44,240 --> 00:14:47,120
для оценок,

390
00:14:47,120 --> 00:14:49,199
как вы можете себе представить, потому что мы работаем

391
00:14:49,199 --> 00:14:51,120
с вами, вы знаете потенциально  многих

392
00:14:51,120 --> 00:14:53,680
миллионов документов, как правило, невозможно

393
00:14:53,680 --> 00:14:55,920
оценить каждый отдельный документ для каждого

394
00:14:55,920 --> 00:14:57,680
отдельного запроса,

395
00:14:57,680 --> 00:14:59,760
поэтому вместо этого мы часто вынуждены

396
00:14:59,760 --> 00:15:02,079
делать предположение, что неоцененные

397
00:15:02,079 --> 00:15:03,760
документы нерелевантны,

398
00:15:03,760 --> 00:15:06,560
или, по крайней мере, игнорировать их

399
00:15:06,560 --> 00:15:08,560
в некоторых метриках ir, хотя для большинства

400
00:15:08,560 --> 00:15:09,920
целей они  рассматриваются как

401
00:15:09,920 --> 00:15:11,120
нерелевантные,

402
00:15:11,120 --> 00:15:13,360
некоторые тестовые коллекции идут дальше

403
00:15:13,360 --> 00:15:15,680
и помечают только один или два ключевых документа

404
00:15:15,680 --> 00:15:17,680
на запрос как релевантные и предполагают,

405
00:15:17,680 --> 00:15:20,320
что все остальное не имеет значения,

406
00:15:20,320 --> 00:15:22,000
поэтому это может быть полезно, когда вы работаете

407
00:15:22,000 --> 00:15:23,839
с определенными наборами данных, и вы

408
00:15:23,839 --> 00:15:27,839
хотите иметь это в виду.  когда вы проводите оценку

409
00:15:30,000 --> 00:15:31,680
, многие из тестовых

410
00:15:31,680 --> 00:15:34,720
коллекций в ir аннотируются треком или

411
00:15:34,720 --> 00:15:37,120
конференцией по поиску текста, которая включает

412
00:15:37,120 --> 00:15:39,519
ежегодные треки для конкуренции

413
00:15:39,519 --> 00:15:42,240
и сравнения ir-систем,

414
00:15:42,240 --> 00:15:45,120
например, на конференции trek 2021

415
00:15:45,120 --> 00:15:47,040
есть треки для поиска в контексте

416
00:15:47,040 --> 00:15:49,360
разговорной поддержки здоровья

417
00:15:49,360 --> 00:15:51,920
рейтинг дезинформации, а также имеет

418
00:15:51,920 --> 00:15:54,160
очень популярный трек глубокого обучения с глубоким рангом,

419
00:15:54,160 --> 00:15:55,680
который мы обсудим

420
00:15:55,680 --> 00:15:57,519
более подробно.  Подробная информация о

421
00:15:57,519 --> 00:16:00,000
каждой походной кампании подчеркивает тщательную

422
00:16:00,000 --> 00:16:01,839
оценку с очень небольшим набором

423
00:16:01,839 --> 00:16:04,639
запросов, поэтому всего 50 запросов на самом деле очень

424
00:16:04,639 --> 00:16:06,880
типичный размер,

425
00:16:06,880 --> 00:16:09,199
но отслеживание широко оценивает множество

426
00:16:09,199 --> 00:16:10,959
документов, возможно, сотни документов

427
00:16:10,959 --> 00:16:12,160
или даже больше

428
00:16:12,160 --> 00:16:15,199
для каждого запроса здесь,

429
00:16:15,279 --> 00:16:17,120
так что вы можете представить себе альтернативу,

430
00:16:17,120 --> 00:16:19,040
которая  мы смотрим дальше, где у вас есть

431
00:16:19,040 --> 00:16:20,959
много запросов, но вы оцениваете только

432
00:16:20,959 --> 00:16:23,839
очень небольшое количество ключевых

433
00:16:23,839 --> 00:16:26,639
документов для этих запросов с намерением,

434
00:16:26,639 --> 00:16:28,480
что производительность, которую вы получите, будет

435
00:16:28,480 --> 00:16:30,560
усреднена по достаточно большому набору

436
00:16:30,560 --> 00:16:31,600
запросов,

437
00:16:31,600 --> 00:16:33,680
и это точно  что происходит в

438
00:16:33,680 --> 00:16:36,399
задачах ранжирования ms marco,

439
00:16:36,399 --> 00:16:38,639
которые представляют собой набор

440
00:16:38,639 --> 00:16:40,959
действительно популярных

441
00:16:40,959 --> 00:16:42,720
тестов ir

442
00:16:42,720 --> 00:16:45,519
от Microsoft. ms marco содержит

443
00:16:45,519 --> 00:16:47,680
более полумиллиона поисковых запросов bing, и

444
00:16:47,680 --> 00:16:51,440
это самый большой общедоступный тест ir.

445
00:16:51,440 --> 00:16:53,360
Каждый запрос здесь

446
00:16:53,360 --> 00:16:55,199
оценивается с помощью одного или двух соответствующих

447
00:16:55,199 --> 00:16:57,279
документов, и мы  предположим, что все

448
00:16:57,279 --> 00:16:59,600
остальное не имеет значения,

449
00:16:59,600 --> 00:17:00,639
и

450
00:17:00,639 --> 00:17:02,480
вы знаете, что наличие этой разреженной

451
00:17:02,480 --> 00:17:04,079
аннотации часто не является проблемой для

452
00:17:04,079 --> 00:17:05,119
обучения,

453
00:17:05,119 --> 00:17:06,559
потому что w  У нас так много обучающих

454
00:17:06,559 --> 00:17:07,919
экземпляров,

455
00:17:07,919 --> 00:17:09,599
и поэтому ms marco

456
00:17:09,599 --> 00:17:11,839
предоставляет нам огромный ресурс,

457
00:17:11,839 --> 00:17:13,919
когда дело доходит до построения и обучения

458
00:17:13,919 --> 00:17:15,679
наших моделей, особенно в нейронной

459
00:17:15,679 --> 00:17:17,199
области

460
00:17:17,199 --> 00:17:19,039
, также оказывается, что разреженные метки

461
00:17:19,039 --> 00:17:21,199
не так уж плохи для оценки,

462
00:17:21,199 --> 00:17:23,439
особенно из-за

463
00:17:23,439 --> 00:17:24,959
размера  тестовые запросы мы можем использовать многие

464
00:17:24,959 --> 00:17:26,880
тысячи тестовых запросов и усреднять

465
00:17:26,880 --> 00:17:28,640
наши результаты по всем из них, чтобы получить

466
00:17:28,640 --> 00:17:30,559
довольно надежный сигнал о том, как

467
00:17:30,559 --> 00:17:33,039
разные системы сравниваются,

468
00:17:33,039 --> 00:17:34,640
есть несколько тестовых

469
00:17:34,640 --> 00:17:37,440
коллекций поверх ms marco um, так что

470
00:17:37,440 --> 00:17:39,840
есть исходная задача ранжирования прохождения

471
00:17:39,840 --> 00:17:41,840
более новая задача ранжирования документов, в которой

472
00:17:41,840 --> 00:17:44,080
документы намного длиннее,

473
00:17:44,080 --> 00:17:46,240
но их меньше, а

474
00:17:46,240 --> 00:17:47,840
затем также привлекается трек глубокого

475
00:17:47,840 --> 00:17:49,120
обучения, о котором мы упоминали

476
00:17:49,120 --> 00:17:51,120
ранее, который происходит каждый год

477
00:17:51,120 --> 00:17:52,720
с 2019 г.

478
00:17:52,720 --> 00:17:55,360
и который использует данные ms marco,

479
00:17:55,360 --> 00:17:57,600
особенно  для обучения в основном гм,

480
00:17:57,600 --> 00:18:00,720
но имеет гораздо меньше запросов для тестирования

481
00:18:00,720 --> 00:18:03,039
с гораздо большим количеством

482
00:18:03,039 --> 00:18:05,600
меток для оценки гораздо более

483
00:18:05,600 --> 00:18:07,679
обширных оценок  и суждения для

484
00:18:07,679 --> 00:18:09,919
оценки, так что это гораздо более плотные

485
00:18:09,919 --> 00:18:12,320
ярлыки,

486
00:18:12,640 --> 00:18:14,559
есть также множество других, довольно

487
00:18:14,559 --> 00:18:17,200
специфичных для предметной области тестов ir,

488
00:18:17,200 --> 00:18:19,039
многие из которых собраны в этой

489
00:18:19,039 --> 00:18:20,000


490
00:18:20,000 --> 00:18:22,559
таблице nanda by nand и ital

491
00:18:22,559 --> 00:18:26,000
в очень недавнем препринте,

492
00:18:26,080 --> 00:18:27,919
поскольку вы можете видеть, что эти тесты сильно

493
00:18:27,919 --> 00:18:30,400
различаются по срокам.  о размере обучения,

494
00:18:30,400 --> 00:18:32,400
если вообще есть какое-либо обучение,

495
00:18:32,400 --> 00:18:34,559
о размере тестового набора, о средней длине запроса,

496
00:18:34,559 --> 00:18:36,400
о средней длине документа и

497
00:18:36,400 --> 00:18:39,360
многих других факторах.

498
00:18:39,360 --> 00:18:42,640


499
00:18:42,640 --> 00:18:43,520


500
00:18:43,520 --> 00:18:45,760


501
00:18:45,760 --> 00:18:47,600
наборы

502
00:18:47,600 --> 00:18:50,240
для нулевого выстрела или внедоменного

503
00:18:50,240 --> 00:18:53,600
тестирования ИК-моделей, особенно в воздухе, мы

504
00:18:53,600 --> 00:18:55,600
берем уже обученные ИК-модели, которые

505
00:18:55,600 --> 00:18:57,440
не имеют доступа к каким-либо данным проверки или

506
00:18:57,440 --> 00:18:58,720
обучения

507
00:18:58,720 --> 00:19:01,120
для этих нисходящих ИК-задач, и тестируем

508
00:19:01,120 --> 00:19:03,440
их «из коробки», чтобы наблюдать за их

509
00:19:03,440 --> 00:19:06,000
выходом.  качества поиска домена, так

510
00:19:06,000 --> 00:19:07,600
что без

511
00:19:07,600 --> 00:19:08,960
обучения этим

512
00:19:08,960 --> 00:19:11,840
новым доменам

513
00:19:16,160 --> 00:19:17,200
все в порядке,

514
00:19:17,200 --> 00:19:18,960
поэтому теперь у нас есть тестовая коллекция с

515
00:19:18,960 --> 00:19:22,080
документами запросов и оценками,

516
00:19:22,080 --> 00:19:24,160
как мы сравниваем их  систем в этой

517
00:19:24,160 --> 00:19:25,919
коллекции,

518
00:19:25,919 --> 00:19:28,160
сначала мы попросим каждую ir-систему

519
00:19:28,160 --> 00:19:30,799
произвести свой лучший рейтинг k, скажем, 10 лучших

520
00:19:30,799 --> 00:19:34,000
результатов, и мы будем использовать ir-метрику для

521
00:19:34,000 --> 00:19:35,679
сравнения всех этих систем в этом

522
00:19:35,679 --> 00:19:37,440
пределе

523
00:19:37,440 --> 00:19:39,679
k выбор ir-метрики и машина из k

524
00:19:39,679 --> 00:19:42,080
будет полностью зависеть от задачи, поэтому я

525
00:19:42,080 --> 00:19:44,320
буду кратко мотивировать каждую метрику по мере

526
00:19:44,320 --> 00:19:46,320
их прохождения.

527
00:19:46,320 --> 00:19:48,160
Все метрики, которые мы пройдем

528
00:19:48,160 --> 00:19:50,720
, просто усредняются по всем запросам

529
00:19:50,720 --> 00:19:53,039
, поэтому для простоты я

530
00:19:53,039 --> 00:19:54,720
покажу вычисление метрики только для

531
00:19:54,720 --> 00:19:56,559
одного запроса.  в каждом случае, но вы хотите

532
00:19:56,559 --> 00:19:58,640
иметь в виду, что это усредняется

533
00:19:58,640 --> 00:20:01,360
по запросам,

534
00:20:01,440 --> 00:20:03,760
давайте начнем с двух самых простых метрик ir,

535
00:20:03,760 --> 00:20:04,960


536
00:20:04,960 --> 00:20:07,200
которые являются успехом и mrr

537
00:20:07,200 --> 00:20:09,919
для данного запроса, пусть rank

538
00:20:09,919 --> 00:20:11,760
будет позицией первого релевантного

539
00:20:11,760 --> 00:20:13,840
документа, который мы можем увидеть в  список лучших k

540
00:20:13,840 --> 00:20:16,000
результатов,

541
00:20:16,000 --> 00:20:17,360
успешных в k,

542
00:20:17,360 --> 00:20:19,520
будет просто равен 1, если есть релевантный

543
00:20:19,520 --> 00:20:22,960
результат в списке k лучших, и 0 в противном случае.

544
00:20:22,960 --> 00:20:24,720


545
00:20:24,720 --> 00:20:27,200


546
00:20:27,200 --> 00:20:28,960
нужен один

547
00:20:28,960 --> 00:20:31,600
релевантный результат в любом месте k лучших

548
00:20:31,600 --> 00:20:34,159
и, в частности, это может быть полезно, если

549
00:20:34,159 --> 00:20:36,159
наше извлечение передается в нижестоящую

550
00:20:36,159 --> 00:20:38,000
модель, которая просматривает результаты k лучших,

551
00:20:38,000 --> 00:20:39,840
а затем что-то делает с ними, чтобы она

552
00:20:39,840 --> 00:20:41,120
могла прочитать их все, и она будет читать

553
00:20:41,120 --> 00:20:42,480
все  их в любом случае,

554
00:20:42,480 --> 00:20:44,320
поэтому нас просто интересует бинарная

555
00:20:44,320 --> 00:20:46,320
релевантность, здесь

556
00:20:46,320 --> 00:20:49,600
означает взаимный ранг, или mrr

557
00:20:49,600 --> 00:20:51,440
также предполагает, что пользователю нужен только

558
00:20:51,440 --> 00:20:54,480
один релевантный запрос в топе k,

559
00:20:54,480 --> 00:20:57,200
но предполагает, что пользователю действительно

560
00:20:57,200 --> 00:20:58,559
важна позиция этого соответствующего

561
00:20:58,559 --> 00:21:00,640
документа в рейтинге

562
00:21:00,640 --> 00:21:02,480
поэтому релевантному документу на второй

563
00:21:02,480 --> 00:21:04,720
позиции, например, присваивается только

564
00:21:04,720 --> 00:21:06,720
половина веса релевантного документа

565
00:21:06,720 --> 00:21:10,280
на верхней позиции.

566
00:21:16,480 --> 00:21:18,320
Вы, вероятно, уже знакомы с

567
00:21:18,320 --> 00:21:20,320
точностью и полнотой, но давайте определим

568
00:21:20,320 --> 00:21:22,799
их здесь в контексте поиска с наивысшим рейтингом k

569
00:21:22,799 --> 00:21:24,159


570
00:21:24,159 --> 00:21:27,039
для  заданный запрос пусть красный из

571
00:21:27,039 --> 00:21:29,280
k будет первыми найденными документами из этого

572
00:21:29,280 --> 00:21:32,480
набора лучших kr3 документов, а пусть rel

573
00:21:32,480 --> 00:21:34,400
будет набором всех документов, которые мы оценили

574
00:21:34,400 --> 00:21:36,559
как релевантные как часть наших

575
00:21:36,559 --> 00:21:39,120
как часть наших оценок

576
00:21:39,120 --> 00:21:41,120
в  в этом случае точность в k — это всего лишь

577
00:21:41,120 --> 00:21:43,039
доля извлеченных элементов, которые

578
00:21:43,039 --> 00:21:44,640
действительно релевантны,

579
00:21:44,640 --> 00:21:46,880
и помните, что k — это доля всех

580
00:21:46,880 --> 00:21:48,480
релевантных элементов, которые фактически

581
00:21:48,480 --> 00:21:50,960
извлекаются.

582
00:21:53,760 --> 00:21:56,080
Довольно популярная метрика также представляет собой карту или

583
00:21:56,080 --> 00:21:58,320
среднюю среднюю точность или просто среднюю

584
00:21:58,320 --> 00:22:00,240
точность для одного запроса.

585
00:22:00,240 --> 00:22:01,679
который, по сути, объединяет

586
00:22:01,679 --> 00:22:04,320
понятия как точности, так и полноты,

587
00:22:04,320 --> 00:22:06,159
чтобы вычислить среднюю точность для одного

588
00:22:06,159 --> 00:22:09,039
запроса, мы добавим точность в i

589
00:22:09,039 --> 00:22:11,919
для каждой позиции i от 1 до k,

590
00:22:11,919 --> 00:22:14,720
где документ if релевантен,

591
00:22:14,720 --> 00:22:16,799
мы разделим все это количество

592
00:22:16,799 --> 00:22:18,320
на общее количество  документы, которые были

593
00:22:18,320 --> 00:22:22,080
сочтены релевантными для этого запроса,

594
00:22:23,039 --> 00:22:24,559
все метрики, которые мы рассматривали

595
00:22:24,559 --> 00:22:26,720
до сих пор, взаимодействуют только с бинарной

596
00:22:26,720 --> 00:22:29,039
релевантностью, то есть им просто важно

597
00:22:29,039 --> 00:22:30,720
, считается ли каждый полученный документ

598
00:22:30,720 --> 00:22:33,200
релевантным или

599
00:22:33,200 --> 00:22:36,480
нерелевантным DCG или дисконтированный кумулятивный прирост работает

600
00:22:36,480 --> 00:22:38,880
с оцененными  релевантность, например, 0

601
00:22:38,880 --> 00:22:41,440
1 2 и 3.

602
00:22:41,440 --> 00:22:43,280
для каждой позиции в рейтинге от 1

603
00:22:43,280 --> 00:22:45,520
до k мы разделим

604
00:22:45,520 --> 00:22:47,760
оцененную релевантность  Оценка найденного документа

605
00:22:47,760 --> 00:22:49,039
в этой

606
00:22:49,039 --> 00:22:51,280
позиции логарифмом позиции, что

607
00:22:51,280 --> 00:22:53,280
существенно снижает ценность

608
00:22:53,280 --> 00:22:55,360
соответствующего документа, если он появляется поздно

609
00:22:55,360 --> 00:22:57,919
в рейтинге, в

610
00:22:58,400 --> 00:23:00,640
отличие от других показателей, максимальное значение

611
00:23:00,640 --> 00:23:03,440
dcg часто не равно 1.

612
00:23:03,440 --> 00:23:06,480
поэтому мы также можем вычислить нормализованное значение.  dcg или

613
00:23:06,480 --> 00:23:09,679
ndcg путем деления каждого запроса на

614
00:23:09,679 --> 00:23:11,440
идеальный pcg.

615
00:23:11,440 --> 00:23:14,080
Это получается, в основном, если

616
00:23:14,080 --> 00:23:16,080
все релевантные документы находятся на вершине

617
00:23:16,080 --> 00:23:18,000
нашего топ-рейтинга k, и они

618
00:23:18,000 --> 00:23:20,799
отсортированы по убыванию релевантности,

619
00:23:20,799 --> 00:23:22,400
поэтому все двойки перед всеми

620
00:23:22,400 --> 00:23:24,320
единицы перед всеми вы знаете

621
00:23:24,320 --> 00:23:28,000
нули в этом случае, которые не имеют значения,

622
00:23:28,400 --> 00:23:30,559
все в порядке, обсудив классический ir

623
00:23:30,559 --> 00:23:32,480
и оценку в этом скринкасте,

624
00:23:32,480 --> 00:23:34,480
мы сосредоточимся на нейронном ir и, в

625
00:23:34,480 --> 00:23:36,880
частности, на современных ir-моделях,

626
00:23:36,880 --> 00:23:38,640
которые используют то, что мы  я научился в

627
00:23:38,640 --> 00:23:42,760
nlu в следующем скринкасте

