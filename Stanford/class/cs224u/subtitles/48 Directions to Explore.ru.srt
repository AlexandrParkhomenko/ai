1
00:00:04,960 --> 00:00:07,359
хорошо, мы работаем, у нас есть простая

2
00:00:07,359 --> 00:00:09,920
модель с разумной производительностью, куда

3
00:00:09,920 --> 00:00:12,719
нам двигаться

4
00:00:12,880 --> 00:00:14,639
дальше, чтобы добиться дальнейших успехов, нам нужно

5
00:00:14,639 --> 00:00:16,720
перестать относиться к модели как к черному ящику,

6
00:00:16,720 --> 00:00:18,400
нам нужно открыть ее

7
00:00:18,400 --> 00:00:20,720
и получить представление о том, что она

8
00:00:20,720 --> 00:00:23,840
узнала, и многое другое  важно, где он

9
00:00:23,840 --> 00:00:25,439
все еще падает,

10
00:00:25,439 --> 00:00:27,039
и тогда мы можем начать рассматривать некоторые

11
00:00:27,039 --> 00:00:31,519
идеи о том, как его улучшить.

12
00:00:31,519 --> 00:00:33,600
Один из важных способов получить

13
00:00:33,600 --> 00:00:35,280
представление о наших обученных моделях —

14
00:00:35,280 --> 00:00:38,160
это проверить веса моделей,

15
00:00:38,160 --> 00:00:39,920
какие функции являются сильными положительными

16
00:00:39,920 --> 00:00:41,920
индикаторами для каждого отношения

17
00:00:41,920 --> 00:00:43,840
и какие функции  являются сильными отрицательными

18
00:00:43,840 --> 00:00:45,280
индикаторами.

19
00:00:45,280 --> 00:00:47,680
В расслабленном модуле есть функция,

20
00:00:47,680 --> 00:00:50,239
называемая «проверить веса модели», которая

21
00:00:50,239 --> 00:00:52,559
упрощает проверку,

22
00:00:52,559 --> 00:00:55,199
поэтому здесь я показываю результаты только для четырех из

23
00:00:55,199 --> 00:00:58,239
наших 16 отношений, и в целом я думаю,

24
00:00:58,239 --> 00:01:00,239
что функции с большим положительным

25
00:01:00,239 --> 00:01:01,920
весом довольно интуитивно понятны,

26
00:01:01,920 --> 00:01:04,720
поэтому для автора  Относительно того, что наибольший

27
00:01:04,720 --> 00:01:08,560
вес имеют авторские книги, а

28
00:01:08,560 --> 00:01:11,119
для кинопроизводства у нас есть главные роли

29
00:01:11,119 --> 00:01:14,080
вместе и напротив

30
00:01:14,080 --> 00:01:15,520
, кстати, я был немного озадачен.

31
00:01:15,520 --> 00:01:17,920
когда я впервые увидел рядом и напротив,

32
00:01:17,920 --> 00:01:19,280
потому что я подумал,

33
00:01:19,280 --> 00:01:20,000


34
00:01:20,000 --> 00:01:21,280
что это слова, которые естественным образом

35
00:01:21,280 --> 00:01:24,000
появляются между именами двух актеров, а

36
00:01:24,000 --> 00:01:26,640
не между названием фильма и

37
00:01:26,640 --> 00:01:28,240
именем актера.

38
00:01:28,240 --> 00:01:29,200


39
00:01:29,200 --> 00:01:30,799


40
00:01:30,799 --> 00:01:32,320


41
00:01:32,320 --> 00:01:34,720
подтяните фактические примеры, которые

42
00:01:34,720 --> 00:01:36,960
привели к тому, что эти веса оказались

43
00:01:36,960 --> 00:01:37,840
большими,

44
00:01:37,840 --> 00:01:39,840
и я понял, что есть очень

45
00:01:39,840 --> 00:01:43,040
распространенная закономерность, которая выглядит

46
00:01:43,040 --> 00:01:48,240
так: x появляется в y рядом с z,

47
00:01:48,240 --> 00:01:51,920
поэтому x и z - актеры y - это фильм, x

48
00:01:51,920 --> 00:01:53,280
появляется в y

49
00:01:53,280 --> 00:01:55,439
рядом с z

50
00:01:55,439 --> 00:01:58,799
Итак, у вас есть y рядом с z, что указывает на

51
00:01:58,799 --> 00:02:01,920
то, что z - актер, который появился в фильме

52
00:02:01,920 --> 00:02:03,040
y,

53
00:02:03,040 --> 00:02:04,799
и я думаю, что что-то подобное происходит

54
00:02:04,799 --> 00:02:08,720
для противоположного, так что это имеет смысл,

55
00:02:08,720 --> 00:02:11,280
что это - сильные

56
00:02:11,280 --> 00:02:14,080
индикаторы отношения производительности фильма,

57
00:02:14,080 --> 00:02:17,760
для супруга, которого мы  жена вышла замуж,

58
00:02:17,760 --> 00:02:19,760
а муж, я думаю, это имеет

59
00:02:19,760 --> 00:02:21,040
смысл,

60
00:02:21,040 --> 00:02:22,400
тот, который немного удивителен,

61
00:02:22,400 --> 00:02:23,680
примыкает,

62
00:02:23,680 --> 00:02:26,480
так что для суставов у нас есть кордоба талукс и

63
00:02:26,480 --> 00:02:28,000


64
00:02:28,000 --> 00:02:30,560
камердинер, странно видеть здесь конкретные географические названия,

65
00:02:30,560 --> 00:02:31,440


66
00:02:31,440 --> 00:02:33,120
они, конечно, не кажутся  xpress the adjoins

67
00:02:33,120 --> 00:02:35,200


68
00:02:35,200 --> 00:02:35,840
umотношение

69
00:02:35,840 --> 00:02:37,599
Интересно, есть ли у кого-нибудь предположение, что

70
00:02:37,599 --> 00:02:40,800
происходит, я был действительно озадачен этим,

71
00:02:40,800 --> 00:02:41,840
и

72
00:02:41,840 --> 00:02:45,599
поэтому снова я написал немного кода, чтобы

73
00:02:45,599 --> 00:02:48,239
найти конкретные примеры, которые

74
00:02:48,239 --> 00:02:51,200
способствовали этому результату.

75
00:02:51,200 --> 00:02:53,519


76
00:02:53,519 --> 00:02:56,319
отношение a соединения и эти термины

77
00:02:56,319 --> 00:02:58,400
эти конкретные термины появляются в

78
00:02:58,400 --> 00:02:59,599
середине,

79
00:02:59,599 --> 00:03:01,519
и когда я посмотрел на примеры, я

80
00:03:01,519 --> 00:03:04,000
понял, что происходит то,

81
00:03:04,000 --> 00:03:06,080
что очень часто имеют

82
00:03:06,080 --> 00:03:08,720
списки географических местоположений,

83
00:03:08,720 --> 00:03:12,400
поэтому запятая b запятая c запятая d

84
00:03:12,400 --> 00:03:16,000
и в таких списках  не редкость, что

85
00:03:16,000 --> 00:03:19,920
просто случайно a и c или a и d

86
00:03:19,920 --> 00:03:21,920
стоят в отношении соединения a, может быть,

87
00:03:21,920 --> 00:03:25,599
это список провинций в стране,

88
00:03:25,599 --> 00:03:27,680
и, конечно, некоторые из этих

89
00:03:27,680 --> 00:03:30,879
провинций соседствуют друг с другом, поэтому, если a

90
00:03:30,879 --> 00:03:34,640
примыкает к c или примыкает к d

91
00:03:34,640 --> 00:03:37,519
это приведет к тому, что bb станет

92
00:03:37,519 --> 00:03:38,640


93
00:03:38,640 --> 00:03:41,120
положительным индикатором отношения соединения a,

94
00:03:41,120 --> 00:03:43,599
особенно если

95
00:03:43,599 --> 00:03:45,840
корпус просто содержит несколько таких

96
00:03:45,840 --> 00:03:47,680
примеров,

97
00:03:47,680 --> 00:03:49,840
поэтому я думаю, что это способствовало

98
00:03:49,840 --> 00:03:50,799


99
00:03:50,799 --> 00:03:54,000
этому загадочному результату.

100
00:03:54,959 --> 00:03:57,680
функции с большими отрицательными весами

101
00:03:57,680 --> 00:04:00,720
выглядят немного более случайными,

102
00:04:00,720 --> 00:04:02,480
но я думаю, это неудивительно, это

103
00:04:02,480 --> 00:04:04,319
то, что вы ожидаете

104
00:04:04,319 --> 00:04:08,879
от линейной

105
00:04:10,000 --> 00:04:12,400
модели такого типа, кстати,

106
00:04:12,400 --> 00:04:14,799
вы можете возиться с кодом, который печатает

107
00:04:14,799 --> 00:04:17,519
это, и здесь он просто печатает  первые

108
00:04:17,519 --> 00:04:18,478
три,

109
00:04:18,478 --> 00:04:19,918
но вы можете поиграть с кодом, на

110
00:04:19,918 --> 00:04:22,000
самом деле есть параметр, который сообщает вам,

111
00:04:22,000 --> 00:04:23,600
сколько

112
00:04:23,600 --> 00:04:25,840
из верхней части списка нужно напечатать, и поэтому

113
00:04:25,840 --> 00:04:28,720
вы можете печатать гораздо более длинные списки, а

114
00:04:28,720 --> 00:04:30,800
для многих

115
00:04:30,800 --> 00:04:33,840
отношений 20 лучших даже 50 лучших

116
00:04:33,840 --> 00:04:36,320
все функции выглядят очень правдоподобно и

117
00:04:36,320 --> 00:04:38,639
интуитивно понятно, и очень приятно

118
00:04:38,639 --> 00:04:39,840
видеть, что

119
00:04:39,840 --> 00:04:43,639
эти результаты

120
00:04:44,320 --> 00:04:45,840
получаются. Другой способ получить представление о нашей

121
00:04:45,840 --> 00:04:48,000
модели — использовать ее для обнаружения новых

122
00:04:48,000 --> 00:04:50,479
экземпляров отношений, которые в настоящее время не

123
00:04:50,479 --> 00:04:52,400
появляются в

124
00:04:52,400 --> 00:04:54,080
kb, как мы обсуждали в прошлом  раз в

125
00:04:54,080 --> 00:04:56,000
этом весь смысл построения

126
00:04:56,000 --> 00:04:58,720
системы извлечения отношений, чтобы дополнить

127
00:04:58,720 --> 00:04:59,680


128
00:04:59,680 --> 00:05:01,759
kb знаниями, извлеченными из

129
00:05:01,759 --> 00:05:04,160
текста на естественном языке в масштабе,

130
00:05:04,160 --> 00:05:07,199
поэтому решающий вопрос заключается в том, сможет ли наша

131
00:05:07,199 --> 00:05:09,759
модель сделать это эффективно.  На

132
00:05:09,759 --> 00:05:12,080
самом деле мы не можем оценить эту возможность

133
00:05:12,080 --> 00:05:14,479
автоматически, потому что у нас нет другого

134
00:05:14,479 --> 00:05:17,120
источника достоверной информации, кроме самой базы

135
00:05:17,120 --> 00:05:18,160
знаний,

136
00:05:18,160 --> 00:05:21,360
но мы можем оценить ее вручную,

137
00:05:21,360 --> 00:05:23,520
изучив триплеты базы знаний, которых нет в базе

138
00:05:23,520 --> 00:05:24,400
знаний,

139
00:05:24,400 --> 00:05:27,199
но которые, по мнению нашей модели,

140
00:05:27,199 --> 00:05:28,160
должны быть

141
00:05:28,160 --> 00:05:30,320
в ней.  kb, поэтому мы написали функцию для

142
00:05:30,320 --> 00:05:31,840
этого,

143
00:05:31,840 --> 00:05:34,800
она называется найти новые экземпляры отношений,

144
00:05:34,800 --> 00:05:35,680
и

145
00:05:35,680 --> 00:05:38,160
вы можете посмотреть код, вот

146
00:05:38,160 --> 00:05:41,440
как это работает, он начинается с примеров корпуса,

147
00:05:41,440 --> 00:05:42,639


148
00:05:42,639 --> 00:05:44,960
содержащих пары сущностей, которые не

149
00:05:44,960 --> 00:05:47,520
принадлежат ни к какому отношению в kb

150
00:05:47,520 --> 00:05:49,360
так что это то, что мы

151
00:05:49,360 --> 00:05:53,759
описали в прошлый раз как отрицательные примеры,

152
00:05:53,759 --> 00:05:55,919
мы будем рассматривать каждую такую пару

153
00:05:55,919 --> 00:05:59,120
сущностей как кандидата на присоединение к каждому

154
00:05:59,120 --> 00:06:00,400
отношению,

155
00:06:00,400 --> 00:06:02,400
поэтому мы возьмем перекрестное произведение

156
00:06:02,400 --> 00:06:04,319
всех этих пар сущностей

157
00:06:04,319 --> 00:06:06,560
и отношений.

158
00:06:06,560 --> 00:06:09,120
Применим нашу модель

159
00:06:09,120 --> 00:06:12,880
ко всем этим кандидатам kb-тройкам,

160
00:06:12,880 --> 00:06:15,039
и мы просто отсортируем результаты по

161
00:06:15,039 --> 00:06:17,360
вероятности, заданной моделью

162
00:06:17,360 --> 00:06:19,759
, чтобы найти наиболее вероятные новые

163
00:06:19,759 --> 00:06:22,000
экземпляры каждого отношения,

164
00:06:22,000 --> 00:06:24,560
поэтому мы найдем кандидата kb trip.  Файлы

165
00:06:24,560 --> 00:06:26,800
, которые в настоящее время не находятся в базе знаний,

166
00:06:26,800 --> 00:06:28,960
но которые, по мнению модели,

167
00:06:28,960 --> 00:06:31,520
имеют очень высокую вероятность быть

168
00:06:31,520 --> 00:06:33,840
действительными,

169
00:06:33,840 --> 00:06:36,160
давайте посмотрим, что мы получим, когда запустим его.

170
00:06:36,160 --> 00:06:38,720
Вот результаты для отношения примыкания.

171
00:06:38,720 --> 00:06:39,919
Обратите

172
00:06:39,919 --> 00:06:41,919
внимание, что модель

173
00:06:41,919 --> 00:06:45,039
присвоила каждому вероятность 1,0  из этих

174
00:06:45,039 --> 00:06:48,720
пар полностью убежден, что эти

175
00:06:48,720 --> 00:06:51,759
пары принадлежат отношению примыканий

176
00:06:51,759 --> 00:06:55,520
um но результаты

177
00:06:55,520 --> 00:06:56,960
хороши, давайте будем честными, результаты ужасны

178
00:06:56,960 --> 00:06:58,240


179
00:06:58,240 --> 00:07:01,360
uh почти все эти пары принадлежат

180
00:07:01,360 --> 00:07:04,479
отношению contains, которое, кстати, на

181
00:07:04,479 --> 00:07:06,720
самом деле не является одним из наших  16 отношений,

182
00:07:06,720 --> 00:07:08,160
но

183
00:07:08,160 --> 00:07:09,759
интуитивно они должны принадлежать к содержанию, а

184
00:07:09,759 --> 00:07:11,360


185
00:07:11,360 --> 00:07:14,000
не к соединению, вы могли

186
00:07:14,000 --> 00:07:17,280
бы обосновать это, может быть, для Мексики и Атлантического

187
00:07:17,280 --> 00:07:18,400
океана,

188
00:07:18,400 --> 00:07:20,880
принадлежащих к соединению, но,

189
00:07:20,880 --> 00:07:21,759


190
00:07:21,759 --> 00:07:23,919
честно говоря, я имею в виду, что даже это

191
00:07:23,919 --> 00:07:26,160


192
00:07:26,160 --> 00:07:28,479
натяжка, а другое  Стоит отметить, что всякий раз, когда

193
00:07:28,479 --> 00:07:31,680
модель предсказывает, что x примыкает к y, она

194
00:07:31,680 --> 00:07:34,800
также предсказывает, что y примыкает к x,

195
00:07:34,800 --> 00:07:36,479
вы можете на мгновение подумать, что

196
00:07:36,479 --> 00:07:39,360
показывает, что модель поняла,

197
00:07:39,360 --> 00:07:42,479
что примыкает, это sy  метрическое отношение,

198
00:07:42,479 --> 00:07:44,479
к сожалению,

199
00:07:44,479 --> 00:07:46,960
нет, это не то, что происходит, это

200
00:07:46,960 --> 00:07:49,599
просто артефакт того, как мы написали простой

201
00:07:49,599 --> 00:07:51,680
набор слов с признаками, этот простой

202
00:07:51,680 --> 00:07:54,479
набор слов с признаками не делает различий

203
00:07:54,479 --> 00:07:57,520
между прямыми и обратными примерами, поэтому

204
00:07:57,520 --> 00:07:59,919
он понятия не имеет, какой из них идет первым, а

205
00:07:59,919 --> 00:08:01,919
какой  идет вторым,

206
00:08:01,919 --> 00:08:03,759
и это будет верно для асимметричных

207
00:08:03,759 --> 00:08:06,160
отношений, так же как и для симметричных

208
00:08:06,160 --> 00:08:08,400
отношений,

209
00:08:08,400 --> 00:08:10,240
так что это не очень многообещающее начало

210
00:08:10,240 --> 00:08:11,520
,

211
00:08:11,520 --> 00:08:13,919
я имею в виду, что мы

212
00:08:13,919 --> 00:08:15,280
видели очень хорошую,

213
00:08:15,280 --> 00:08:17,599
довольно хорошую количественную оценку для

214
00:08:17,599 --> 00:08:18,800
этой модели,

215
00:08:18,800 --> 00:08:21,440
так что это немного удивительно,

216
00:08:21,440 --> 00:08:23,599
давайте посмотрим  что мы получаем для

217
00:08:23,599 --> 00:08:25,520
некоторых других отношений, так что вот

218
00:08:25,520 --> 00:08:28,319
результаты для отношения автора,

219
00:08:28,319 --> 00:08:30,560
и они выглядят намного лучше,

220
00:08:30,560 --> 00:08:33,039
еще раз все вероятности равны

221
00:08:33,039 --> 00:08:34,320
единице,

222
00:08:34,320 --> 00:08:35,599
но на этот раз

223
00:08:35,599 --> 00:08:38,240
каждое из этих предсказаний

224
00:08:38,240 --> 00:08:40,080
верно,

225
00:08:40,080 --> 00:08:42,479
ну не совсем на самом деле, потому

226
00:08:42,479 --> 00:08:45,200
что книга предполагается  появиться первым,

227
00:08:45,200 --> 00:08:47,920
как Оливер Твист, а второй автор,

228
00:08:47,920 --> 00:08:50,160
Чарльз Диккенс, так что этот первый на

229
00:08:50,160 --> 00:08:51,600
самом деле правильный,

230
00:08:51,600 --> 00:08:53,920
второй - наоборот, это h  так как

231
00:08:53,920 --> 00:08:57,040
автор во-первых, а книга во-вторых,

232
00:08:57,040 --> 00:08:59,120
наша модель совершенно не знает

233
00:08:59,120 --> 00:09:01,839
порядка, поэтому она с такой же вероятностью поставит

234
00:09:01,839 --> 00:09:04,560
вещи в обратном порядке,

235
00:09:04,560 --> 00:09:06,720
но если вы проигнорируете это,

236
00:09:06,720 --> 00:09:09,519
если вы готовы представить, что мы

237
00:09:09,519 --> 00:09:12,560
могли бы легко это исправить, тогда результаты

238
00:09:12,560 --> 00:09:14,000
выглядят великолепно,

239
00:09:14,000 --> 00:09:16,160
мы могли бы  поместите все эти триплеты прямо

240
00:09:16,160 --> 00:09:18,880
в наш kb, и у нас будет больше и

241
00:09:18,880 --> 00:09:21,760
лучше kb, потому что

242
00:09:21,760 --> 00:09:24,080
это извлечение отношений в

243
00:09:24,080 --> 00:09:25,360
лучшем виде,

244
00:09:25,360 --> 00:09:28,320
это то, что мы хотели,

245
00:09:28,880 --> 00:09:30,160
вот результаты для отношения капитала,

246
00:09:30,160 --> 00:09:33,040
и это похожая картина, ну,

247
00:09:33,040 --> 00:09:36,080
все  вероятность равна 1,0,

248
00:09:36,080 --> 00:09:37,920
порядок

249
00:09:37,920 --> 00:09:41,120
часто меняется на противоположный, это очень случайно,

250
00:09:41,120 --> 00:09:42,880
но если вы отложите это в сторону,

251
00:09:42,880 --> 00:09:45,920
результаты выглядят очень хорошо,

252
00:09:45,920 --> 00:09:48,640
вы могли бы поспорить, возможно, с

253
00:09:48,640 --> 00:09:51,279
гастрономом здесь, я имею в виду, что столица Индии

254
00:09:51,279 --> 00:09:52,800
действительно Нью-Дели,

255
00:09:52,800 --> 00:09:56,000
но Нью-Дели является частью Дели, так что

256
00:09:56,000 --> 00:09:58,720
вы знаете  это все еще близко, в

257
00:09:58,720 --> 00:10:00,160
целом,

258
00:10:00,160 --> 00:10:03,120
я думаю, это выглядит действительно хорошо,

259
00:10:03,120 --> 00:10:04,720
позвольте мне показать вам еще один,

260
00:10:04,720 --> 00:10:06,640
это последний, который я покажу, это результаты

261
00:10:06,640 --> 00:10:09,279
для проработанного отношения,

262
00:10:09,279 --> 00:10:12,079
и здесь результаты более смешанные,

263
00:10:12,079 --> 00:10:16,880
так что мы

264
00:10:16,880 --> 00:10:19,600
конечно, если вы можете сказать, что илон маск

265
00:10:19,600 --> 00:10:22,240
работал в tesla motors, то вы можете сказать,

266
00:10:22,240 --> 00:10:25,519
что стэн ли работал в комиксах

267
00:10:25,519 --> 00:10:28,240
marvel, и пока мы здесь, э-э, чингисхан

268
00:10:28,240 --> 00:10:32,160
работал в монгольской империи, конечно, почему бы и нет,

269
00:10:32,160 --> 00:10:33,120


270
00:10:33,120 --> 00:10:36,640
но  остальное - ерунда,

271
00:10:36,640 --> 00:10:38,240
так почему же

272
00:10:38,240 --> 00:10:40,640
то, что здесь произошло, хорошо, когда вы

273
00:10:40,640 --> 00:10:43,040
сталкиваетесь с удивительными и загадочными

274
00:10:43,040 --> 00:10:45,519
результатами в выводе вашей модели, это действительно

275
00:10:45,519 --> 00:10:49,200
хорошая практика - копаться в данных

276
00:10:49,200 --> 00:10:50,959
и исследовать,

277
00:10:50,959 --> 00:10:52,880
и это называется анализом ошибок, и я

278
00:10:52,880 --> 00:10:54,399
хочу показать вам пару примеров

279
00:10:54,399 --> 00:10:56,800
этого сейчас

280
00:10:56,800 --> 00:10:58,399
Итак, сначала давайте посмотрим, сможем ли мы выяснить,

281
00:10:58,399 --> 00:11:01,040
что произошло с louis chevrolet и

282
00:11:01,040 --> 00:11:03,839
william c durant.

283
00:11:03,839 --> 00:11:06,560
Сначала давайте посмотрим на примеры корпусов,

284
00:11:06,560 --> 00:11:10,560
содержащие эти две сущности.

285
00:11:10,560 --> 00:11:12,240
Я собираюсь посмотреть только примеры

286
00:11:12,240 --> 00:11:14,399
, в которых они расположены в этом порядке.

287
00:11:14,399 --> 00:11:16,720
их и в другом

288
00:11:16,720 --> 00:11:18,399
порядке, и на самом деле я

289
00:11:18,399 --> 00:11:20,480
сделал, я просто не собираюсь помещать это

290
00:11:20,480 --> 00:11:22,720
на слайд, я просто собираюсь сосредоточиться на

291
00:11:22,720 --> 00:11:25,200
том, что происходит в этом порядке,

292
00:11:25,200 --> 00:11:27,839
поэтому я собираюсь посмотреть эти

293
00:11:27,839 --> 00:11:29,600
примеры  d распечатайте, как они выглядят, и

294
00:11:29,600 --> 00:11:32,000
вот что мы получим,

295
00:11:32,000 --> 00:11:33,920
есть 12 примеров, и все они выглядят

296
00:11:33,920 --> 00:11:35,519
одинаково, на

297
00:11:35,519 --> 00:11:37,279
самом деле я не распечатал здесь полный контекст,

298
00:11:37,279 --> 00:11:38,720
если вы внимательно посмотрите на код,

299
00:11:38,720 --> 00:11:40,720
вы увидите, что я печатаю

300
00:11:40,720 --> 00:11:43,519
суффикс  слева и префикс справа, поэтому слева и справа

301
00:11:43,519 --> 00:11:45,760
есть больше контекста,

302
00:11:45,760 --> 00:11:47,920
и если бы вы видели

303
00:11:47,920 --> 00:11:50,000
полный контекст, вы бы поняли, что

304
00:11:50,000 --> 00:11:52,639
примеры немного отличаются,

305
00:11:52,639 --> 00:11:54,240
но они очень похожи, они

306
00:11:54,240 --> 00:11:56,320
почти дубликаты, я упомянул об этом  в последний

307
00:11:56,320 --> 00:11:57,920
раз, когда это одна из проблем

308
00:11:57,920 --> 00:11:59,680
этого набора данных, он содержит много

309
00:11:59,680 --> 00:12:02,560
почти повторяющихся примеров, и я думаю, что

310
00:12:02,560 --> 00:12:05,680
это досадное последствие того, как

311
00:12:05,680 --> 00:12:06,639


312
00:12:06,639 --> 00:12:08,639
образец был построен так, как были отобраны веб-

313
00:12:08,639 --> 00:12:10,959
документы, на которых был основан этот корпус.

314
00:12:10,959 --> 00:12:13,279
из Интернета,

315
00:12:13,279 --> 00:12:17,040
и кажется, что это укусило нас здесь,

316
00:12:17,040 --> 00:12:20,000
но все еще оставляет вопрос,

317
00:12:20,000 --> 00:12:22,320
почему это повторение привело к тому, что

318
00:12:22,320 --> 00:12:23,600
модель предсказала,

319
00:12:23,600 --> 00:12:26,240
что эта пара принадлежит к рабочему

320
00:12:26,240 --> 00:12:28,000
отношению, потому

321
00:12:28,000 --> 00:12:30,079
что не выглядит очевидным, что это

322
00:12:30,079 --> 00:12:31,680
r  здесь правильное отношение,

323
00:12:31,680 --> 00:12:34,480
я подозреваю, что это из-за слова «

324
00:12:34,480 --> 00:12:35,839
основатель»,

325
00:12:35,839 --> 00:12:39,040
потому что x, являющийся основателем y,

326
00:12:39,040 --> 00:12:43,279
сильно подразумевает, что x работал в y,

327
00:12:43,279 --> 00:12:45,920
и на самом деле мы можем это проверить, не так

328
00:12:45,920 --> 00:12:49,440
уж сложно написать какой-то код для

329
00:12:49,440 --> 00:12:52,800
проверки веса, который был назначен слову

330
00:12:52,800 --> 00:12:53,839
основатель

331
00:12:53,839 --> 00:12:57,200
в модели для отношения рабочих данных,

332
00:12:57,200 --> 00:12:58,800
так что вот немного кода, который делает

333
00:12:58,800 --> 00:13:00,800
это,

334
00:13:00,800 --> 00:13:02,639
и, конечно же, в модели для

335
00:13:02,639 --> 00:13:05,040
рабочей даты слово основатель получает

336
00:13:05,040 --> 00:13:07,279
вес 2,05,

337
00:13:07,279 --> 00:13:09,519
что довольно много, если вы посмотрите на

338
00:13:09,519 --> 00:13:12,000
распределение весов, это

339
00:13:12,000 --> 00:13:14,320
относительно  большой, я забыл точно,

340
00:13:14,320 --> 00:13:16,240
но я думаю, что он в топ-10.

341
00:13:16,240 --> 00:13:19,120
это относительно э-э-э, значительная, довольно

342
00:13:19,120 --> 00:13:22,800
значительная, э-э, функция для этой модели,

343
00:13:22,800 --> 00:13:24,800
э-э, вот что произошло, у нас есть 12

344
00:13:24,800 --> 00:13:27,440
примеров, каждый из которых имеет

345
00:13:27,440 --> 00:13:29,760
значительный вес, и в результате получается, что

346
00:13:29,760 --> 00:13:32,639
модель полностью убеждена,

347
00:13:32,639 --> 00:13:35,839
что гм, что это правильно, что это

348
00:13:35,839 --> 00:13:36,800
то, над чем

349
00:13:36,800 --> 00:13:40,160
работает отношение, здесь

350
00:13:40,160 --> 00:13:42,399
, кстати, я не проверял, но я

351
00:13:42,399 --> 00:13:43,519
уверен,

352
00:13:43,519 --> 00:13:46,240
что основатель модель для

353
00:13:46,240 --> 00:13:49,040
основателя  Отношение rs мы также предскажем,

354
00:13:49,040 --> 00:13:51,600
что отношение основателя содержит здесь

355
00:13:51,600 --> 00:13:53,040
понимание того,

356
00:13:53,040 --> 00:13:54,880
что здесь пошло не так,

357
00:13:54,880 --> 00:13:57,600
может помочь стимулировать некоторые идеи о

358
00:13:57,600 --> 00:13:58,959
том, как это исправить

359
00:13:58,959 --> 00:14:00,959
эм, я не думаю, что я думаю, что я не буду,

360
00:14:00,959 --> 00:14:02,560
я имею в виду  некоторые идеи, я думаю, я не буду

361
00:14:02,560 --> 00:14:05,120
их раскрывать, но

362
00:14:05,120 --> 00:14:08,000
я надеюсь, что это подчеркивает ценность

363
00:14:08,000 --> 00:14:10,000
анализа ошибок, который вы действительно хотите

364
00:14:10,000 --> 00:14:12,320
понять, когда вы видите странные результаты,

365
00:14:12,320 --> 00:14:13,839
вы действительно хотите понять, что

366
00:14:13,839 --> 00:14:16,720
происходит в ваших данных, что привело к этим

367
00:14:16,720 --> 00:14:19,440
странным результатам,

368
00:14:19,440 --> 00:14:21,040
пусть  я покажу вам еще один пример, который

369
00:14:21,040 --> 00:14:22,639
имеет немного другой вкус, давайте

370
00:14:22,639 --> 00:14:24,720
посмотрим, что происходит с Гомером

371
00:14:24,720 --> 00:14:26,000
и Илиадой,

372
00:14:26,000 --> 00:14:27,199
я написал немного кода, чтобы

373
00:14:27,199 --> 00:14:29,040
исследовать и это,

374
00:14:29,040 --> 00:14:30,480
и я не собираюсь показывать все

375
00:14:30,480 --> 00:14:32,000
расследование,

376
00:14:32,000 --> 00:14:34,000
но я  Я просто выберу самые

377
00:14:34,000 --> 00:14:36,959
информативные результаты,

378
00:14:36,959 --> 00:14:38,480
поэтому я заметил одну вещь

379
00:14:38,480 --> 00:14:41,680
: есть много примеров для Гомера и

380
00:14:41,680 --> 00:14:46,079
Илиады, на самом деле их 118

381
00:14:46,079 --> 00:14:48,320
только в этом направлении,

382
00:14:48,320 --> 00:14:50,720
в обратном направлении больше

383
00:14:50,720 --> 00:14:52,720
, это впечатляет,

384
00:14:52,720 --> 00:14:55,360
но опять же  само это  не объясняет,

385
00:14:55,360 --> 00:14:57,279
почему сработало,

386
00:14:57,279 --> 00:15:00,000
выглядело как хороший прогноз, кстати,

387
00:15:00,000 --> 00:15:02,320
я проверил, было ли это тем же

388
00:15:02,320 --> 00:15:04,320
объяснением, что и в прошлый раз, много почти

389
00:15:04,320 --> 00:15:06,399
дубликатов, это не то,

390
00:15:06,399 --> 00:15:07,920
что здесь происходит,

391
00:15:07,920 --> 00:15:09,680
но

392
00:15:09,680 --> 00:15:12,320
следующее, что я сделал, было  написать некоторый

393
00:15:12,320 --> 00:15:15,920
код для подсчета наиболее распространенных средних,

394
00:15:15,920 --> 00:15:18,800
которые соединяют Гомера и Илиаду в этих

395
00:15:18,800 --> 00:15:20,880
118 примерах,

396
00:15:20,880 --> 00:15:24,560
и чтобы код выглядел так,

397
00:15:24,560 --> 00:15:26,480
и вот результаты, гм, и

398
00:15:26,480 --> 00:15:29,120
была одна середина, которая сильно доминировала,

399
00:15:29,120 --> 00:15:31,519
и это апостроф s

400
00:15:31,519 --> 00:15:33,839
, как в

401
00:15:33,839 --> 00:15:35,199
Илиаде Гомера

402
00:15:35,199 --> 00:15:37,040
гм,

403
00:15:37,040 --> 00:15:39,680
так что это имеет смысл, потому что ясно, что

404
00:15:39,680 --> 00:15:42,240
притяжательный падеж может указывать

405
00:15:42,240 --> 00:15:44,399
на отношение автора, которое вы ожидаете увидеть

406
00:15:44,399 --> 00:15:47,440
в Илиаде Гомера и гордости и предубеждении Джейн Остин

407
00:15:47,440 --> 00:15:50,240
и во многих других подобных,

408
00:15:50,240 --> 00:15:53,519
похожих формулировках,

409
00:15:53,519 --> 00:15:56,160
но апострофы могут с таким же успехом

410
00:15:56,160 --> 00:16:00,079
указывать на отношение произведения, как и в

411
00:16:00,079 --> 00:16:02,880
Илоне Теслы.  Маск или Билл Гейтс из Microsoft,

412
00:16:02,880 --> 00:16:04,000


413
00:16:04,000 --> 00:16:07,279
хм, так что этот апостроф s действительно очень

414
00:16:07,279 --> 00:16:09,839
двусмысленный,

415
00:16:10,639 --> 00:16:13,440
просто чтобы подтвердить, что

416
00:16:13,440 --> 00:16:15,600
это действительно

417
00:16:15,600 --> 00:16:18,079
важно для результата, который мы видели,

418
00:16:18,079 --> 00:16:19,279
давайте проверим,

419
00:16:19,279 --> 00:16:21,839
что  вес был присвоен апострофу s

420
00:16:21,839 --> 00:16:23,600
в модели для работы dat,

421
00:16:23,600 --> 00:16:25,519
поэтому этот код похож на код

422
00:16:25,519 --> 00:16:27,040
на предыдущем слайде, но на этот раз мы

423
00:16:27,040 --> 00:16:30,160
ищем вес для апострофа s,

424
00:16:30,160 --> 00:16:31,440
и оказывается, что вес был

425
00:16:31,440 --> 00:16:33,920
0,58

426
00:16:33,920 --> 00:16:36,880
хорошо, это не  огромный вес, но он тоже не

427
00:16:36,880 --> 00:16:40,160
маленький, и эта функция

428
00:16:40,160 --> 00:16:43,519
встречалась 51 раз в корпусе,

429
00:16:43,519 --> 00:16:46,399
поэтому я думаю, что это то, что произошло, у нас было,

430
00:16:46,399 --> 00:16:47,360


431
00:16:47,360 --> 00:16:48,720
вы знаете,

432
00:16:48,720 --> 00:16:51,199
нетривиальное количество веса,

433
00:16:51,199 --> 00:16:55,279
которое суммировалось 51 раз, и мы

434
00:16:55,279 --> 00:16:57,680
получили действительно большой вклад

435
00:16:57,680 --> 00:16:59,600
и  модель чувствует себя действительно уверенной

436
00:16:59,600 --> 00:17:02,399
в этом отношении,

437
00:17:02,399 --> 00:17:03,920
поэтому, снова подумав об этой проблеме,

438
00:17:03,920 --> 00:17:06,480
можно предложить некоторые стратегии для того, как

439
00:17:06,480 --> 00:17:07,839
уменьшить

440
00:17:07,839 --> 00:17:09,760
эту двусмысленность. Фундаментальная

441
00:17:09,760 --> 00:17:11,839
проблема здесь заключается в том, что апостроф s

442
00:17:11,839 --> 00:17:13,520
очень неоднозначен.

443
00:17:13,520 --> 00:17:14,559


444
00:17:14,559 --> 00:17:17,439


445
00:17:17,439 --> 00:17:20,240
предложение,

446
00:17:20,240 --> 00:17:22,480
которое могло бы помочь отличить

447
00:17:22,480 --> 00:17:24,079
отношение автора

448
00:17:24,079 --> 00:17:26,240
от отношения работающего над,

449
00:17:26,240 --> 00:17:28,160
и я думаю, что есть еще одно, я

450
00:17:28,160 --> 00:17:30,320
не хочу раскрывать слишком много, но я думаю, что

451
00:17:30,320 --> 00:17:33,120
есть и другие варианты.  Идентификация в этих

452
00:17:33,120 --> 00:17:35,679
предложениях, которая может помочь разделить

453
00:17:35,679 --> 00:17:37,679
эти два отношения, и этот вид

454
00:17:37,679 --> 00:17:40,160
анализа ошибок действительно необходим

455
00:17:40,160 --> 00:17:43,280
для процесса разработки модели,

456
00:17:44,840 --> 00:17:47,200
теперь для домашнего задания и

457
00:17:47,200 --> 00:17:49,120
выпечки мы собираемся предоставить вам свободу,

458
00:17:49,120 --> 00:17:52,240
чтобы найти способы улучшить этот базовый уровень

459
00:17:52,240 --> 00:17:53,120
модели,

460
00:17:53,120 --> 00:17:55,840
и есть много возможностей.

461
00:17:55,840 --> 00:17:58,320
Одной из областей для инноваций является

462
00:17:58,320 --> 00:18:00,559
представление признаков, которое мы передаем

463
00:18:00,559 --> 00:18:02,240
алгоритму обучения.

464
00:18:02,240 --> 00:18:04,240


465
00:18:04,240 --> 00:18:06,320


466
00:18:06,320 --> 00:18:08,799


467
00:18:08,799 --> 00:18:10,320


468
00:18:10,320 --> 00:18:11,679
вложения слов, такие как встраивания GloVe,

469
00:18:11,679 --> 00:18:12,799


470
00:18:12,799 --> 00:18:14,000
вы можете использовать набор слов,

471
00:18:14,000 --> 00:18:15,679
который

472
00:18:15,679 --> 00:18:19,200
различает прямой и обратный контекст,

473
00:18:19,200 --> 00:18:23,440
вы можете использовать биграммы или более длинные энграммы,

474
00:18:23,440 --> 00:18:25,039
вы можете использовать теги частей речи,

475
00:18:25,039 --> 00:18:27,120
которые у нас есть в корпусе,

476
00:18:27,120 --> 00:18:31,039
или информацию из wordnet

477
00:18:31,039 --> 00:18:32,559
большую часть  ранняя работа по извлечению отношений в

478
00:18:32,559 --> 00:18:34,960
значительной степени полагалась на синтаксические

479
00:18:34,960 --> 00:18:38,000
функции, поэтому, возможно, попробуйте это,

480
00:18:38,000 --> 00:18:40,080
и до сих пор мы использовали функции, основанные

481
00:18:40,080 --> 00:18:42,640
только на среднем p  произнесите фразу

482
00:18:42,640 --> 00:18:44,640
между двумя упоминаниями объекта, вы

483
00:18:44,640 --> 00:18:46,720
также можете попробовать использовать информацию о

484
00:18:46,720 --> 00:18:48,960
самих объектах,

485
00:18:48,960 --> 00:18:51,520
например, о типах

486
00:18:51,520 --> 00:18:53,200
объектов, или вы можете попробовать получить функции

487
00:18:53,200 --> 00:18:55,919
из левого и правого контекста.

488
00:18:55,919 --> 00:18:58,799


489
00:18:58,799 --> 00:19:02,480


490
00:19:02,720 --> 00:19:04,000
пространство для

491
00:19:04,000 --> 00:19:06,559
инноваций с типом модели

492
00:19:06,559 --> 00:19:08,480
наша базовая модель представляет собой простую линейную

493
00:19:08,480 --> 00:19:10,960
модель, оптимизированную с помощью логистической регрессии

494
00:19:10,960 --> 00:19:12,559
, это хорошее место для начала, но

495
00:19:12,559 --> 00:19:14,559
есть много других возможностей,

496
00:19:14,559 --> 00:19:16,000
если вы хотите придерживаться линейных моделей,

497
00:19:16,000 --> 00:19:17,760
вы можете использовать svm,

498
00:19:17,760 --> 00:19:20,880
и sklearn упрощает это

499
00:19:20,880 --> 00:19:22,840
или вы можете поэкспериментировать с нейронными

500
00:19:22,840 --> 00:19:24,880
сетями, вы можете использовать простую

501
00:19:24,880 --> 00:19:26,880
нейронную сеть с прямой связью в качестве

502
00:19:26,880 --> 00:19:29,520
замены нашей линейной модели

503
00:19:29,520 --> 00:19:32,320
или, поскольку примеры могут быть переменной

504
00:19:32,320 --> 00:19:34,480
длины, вы можете рассмотреть рекуррентную

505
00:19:34,480 --> 00:19:37,360
нейронную сеть, такую как lstm, ес 

506
00:19:37,360 --> 00:19:38,640
и вы пойдете по этому пути  вам придется

507
00:19:38,640 --> 00:19:41,919
тщательно подумать о том, как кодировать ввод,

508
00:19:41,919 --> 00:19:44,880
если ввод представляет собой только среднюю фразу,

509
00:19:44,880 --> 00:19:46,799
что, вероятно, связано  довольно

510
00:19:46,799 --> 00:19:48,640
просто,

511
00:19:48,640 --> 00:19:50,640
но если вы хотите включить

512
00:19:50,640 --> 00:19:53,760
упоминания объекта или левый и правый контекст,

513
00:19:53,760 --> 00:19:55,520
вам, возможно, придется тщательно подумать о

514
00:19:55,520 --> 00:19:59,200
том, как разграничить сегменты,

515
00:19:59,200 --> 00:20:00,880
или вы можете использовать архитектуру на основе преобразователя,

516
00:20:00,880 --> 00:20:03,200
такую как у bert, хотя ко 

517
00:20:03,200 --> 00:20:04,960
ичество обучающих данных, которые у нас есть, до 

518
00:20:04,960 --> 00:20:08,159
тупно здесь  может быть немного маленьким,

519
00:20:08,159 --> 00:20:10,320
я думаю, что все это потенциально

520
00:20:10,320 --> 00:20:13,039
интересные и плодотворные направления для

521
00:20:13,039 --> 00:20:15,919
исследования, и я думаю, что вы можете

522
00:20:15,919 --> 00:20:19,559
повеселиться с этим.

523
00:20:21,840 --> 00:20:23,919


