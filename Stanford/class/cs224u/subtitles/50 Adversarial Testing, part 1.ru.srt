1
00:00:04,720 --> 00:00:06,319
приветствую всех, это вторая часть нашей

2
00:00:06,319 --> 00:00:08,320
серии статей о методах анализа в nlp, мы

3
00:00:08,320 --> 00:00:09,920
собираемся поговорить о состязательном

4
00:00:09,920 --> 00:00:12,080
тестировании, это захватывающий режим, потому что,

5
00:00:12,080 --> 00:00:14,639
как вы увидите, на нескольких десятках тщательно

6
00:00:14,639 --> 00:00:16,400
созданных примеров вы можете узнать

7
00:00:16,400 --> 00:00:18,000
кое-что действительно интересное о

8
00:00:18,000 --> 00:00:20,320
системы, которые вы разрабатываете,

9
00:00:20,320 --> 00:00:22,400
для начала давайте напомним себе, как

10
00:00:22,400 --> 00:00:25,119
стандартно работают оценки в нашей области.

11
00:00:25,119 --> 00:00:27,199
На первом этапе вы создаете набор данных из

12
00:00:27,199 --> 00:00:29,439
какого-то единого однородного процесса, это может

13
00:00:29,439 --> 00:00:31,599
быть сбор данных из Интернета или

14
00:00:31,599 --> 00:00:33,840
краудсорсинг набора данных или примеров маркировки.

15
00:00:33,840 --> 00:00:35,520
себя, но важно то, что

16
00:00:35,520 --> 00:00:38,079
мы обычно делаем это как один единый

17
00:00:38,079 --> 00:00:39,200
процесс,

18
00:00:39,200 --> 00:00:41,360
а затем на втором этапе мы разделяем этот

19
00:00:41,360 --> 00:00:44,160
набор данных на непересекающиеся наборы поездов и тестов,

20
00:00:44,160 --> 00:00:46,399
когда мы откладываем набор тестов,

21
00:00:46,399 --> 00:00:48,160
и вы выполняете всю свою разработку на

22
00:00:48,160 --> 00:00:50,719
наборе поездов и только  после того, как вся

23
00:00:50,719 --> 00:00:52,879
разработка завершена, вы проводите оценку своей

24
00:00:52,879 --> 00:00:55,280
системы, обычно основанную на точности или какой-либо

25
00:00:55,280 --> 00:00:58,800
аналогичной метрике в этом протянутом тестовом наборе,

26
00:00:58,800 --> 00:00:59,920
а затем, наконец, и это

27
00:00:59,920 --> 00:01:02,320
Важная часть, которую вы сообщаете о результатах

28
00:01:02,320 --> 00:01:05,119
этой оценки тестового набора, дает

29
00:01:05,119 --> 00:01:07,200
оценку способности системы

30
00:01:07,200 --> 00:01:09,520
обобщать новый опыт,

31
00:01:09,520 --> 00:01:11,119
я надеюсь, вы слышите, что

32
00:01:11,119 --> 00:01:13,760
мы ужасно щедры к нашим системам на

33
00:01:13,760 --> 00:01:16,080
первом шаге, мы создаем единый набор данных

34
00:01:16,080 --> 00:01:18,560
из одного процесса мы получаем

35
00:01:18,560 --> 00:01:20,799
тестовый набор и используем этот тестовый набор в качестве нашего

36
00:01:20,799 --> 00:01:23,200
устройства для измерения того, насколько хорошо

37
00:01:23,200 --> 00:01:25,119
система будет работать, если ее развернуть в

38
00:01:25,119 --> 00:01:27,280
реальном мире, но, конечно, мы знаем,

39
00:01:27,280 --> 00:01:29,439
что реальный мир не создается из каких-то

40
00:01:29,439 --> 00:01:31,920
единый однородный процесс, в глубине души мы знаем,

41
00:01:31,920 --> 00:01:33,600
что, если мы

42
00:01:33,600 --> 00:01:36,400
развернем систему, она столкнется с примерами

43
00:01:36,400 --> 00:01:38,479
, совершенно не похожими на те, которые она

44
00:01:38,479 --> 00:01:40,640
видела при обучении и оценке в этом

45
00:01:40,640 --> 00:01:42,720
стандартном режиме, и которые могут нас беспокоить,

46
00:01:42,720 --> 00:01:44,720
что мы преувеличиваем возможности

47
00:01:44,720 --> 00:01:46,799
нашего  системы, чтобы фактически иметь дело со

48
00:01:46,799 --> 00:01:48,720
сложностью мира,

49
00:01:48,720 --> 00:01:50,960
и состязательные оценки — это один из способов

50
00:01:50,960 --> 00:01:53,840
, с помощью которого мы можем начать закрывать этот пробел здесь,

51
00:01:53,840 --> 00:01:56,560
поэтому в состязательных оценках мы

52
00:01:56,560 --> 00:01:58,240
создаем набор данных с помощью чего бы то ни было.  вы имеете в виду, что вам

53
00:01:58,240 --> 00:02:00,079
нравится на первом этапе,

54
00:02:00,079 --> 00:02:01,759
и вы разрабатываете и оцениваете систему,

55
00:02:01,759 --> 00:02:03,200
используя этот набор данных в соответствии с

56
00:02:03,200 --> 00:02:04,799
любыми протоколами, которые вы выберете, это может

57
00:02:04,799 --> 00:02:06,640
быть стандартный режим оценки, если вам

58
00:02:06,640 --> 00:02:09,758
нравится, вот новая часть на третьем шаге,

59
00:02:09,758 --> 00:02:12,800
вы разрабатываете новый тестовый набор примеров

60
00:02:12,800 --> 00:02:14,800
которые, как вы подозреваете или знаете, будут

61
00:02:14,800 --> 00:02:17,120
сложными, учитывая вашу систему и

62
00:02:17,120 --> 00:02:20,080
исходный набор данных, на котором она была обучена,

63
00:02:20,080 --> 00:02:22,000
а затем, как обычно, после того, как вся ваша

64
00:02:22,000 --> 00:02:23,520
разработка системы завершена, вы

65
00:02:23,520 --> 00:02:26,000
снова оцениваете систему, обычно основываясь на точности,

66
00:02:26,000 --> 00:02:28,959
на этом новом наборе тестовых данных,

67
00:02:28,959 --> 00:02:31,040
и это  результат, о котором вы сообщаете как

68
00:02:31,040 --> 00:02:33,519
о способности вашей системы обобщать

69
00:02:33,519 --> 00:02:35,440
новый опыт, по крайней мере, такого рода,

70
00:02:35,440 --> 00:02:37,760
который вы выделили в своем состязательном

71
00:02:37,760 --> 00:02:40,319
наборе тестов, и идея здесь заключается в том, чтобы

72
00:02:40,319 --> 00:02:42,800
иметь различие между данными

73
00:02:42,800 --> 00:02:45,519
, на которых мы разрабатываем нашу систему, и

74
00:02:45,519 --> 00:02:47,519
задачами.  которые мы представляем, мы

75
00:02:47,519 --> 00:02:49,680
получим лучшую оценку того, как наши системы

76
00:02:49,680 --> 00:02:53,120
работают на примерах, которые предположительно являются

77
00:02:53,120 --> 00:02:54,879
важными примерами, с которыми он может

78
00:02:54,879 --> 00:02:58,800
столкнуться при развертывании в  реальный

79
00:02:59,280 --> 00:03:00,959
мир краткая историческая справка Я думаю, будет

80
00:03:00,959 --> 00:03:03,040
справедливо сказать, что идея состязательного

81
00:03:03,040 --> 00:03:04,959
тестирования восходит к

82
00:03:04,959 --> 00:03:06,640
тесту Тьюринга, который вводится путем

83
00:03:06,640 --> 00:03:08,800
путешествий по этому классическому бумажному вычислительному

84
00:03:08,800 --> 00:03:11,120
оборудованию и интеллекту.

85
00:03:11,120 --> 00:03:13,200


86
00:03:13,200 --> 00:03:15,200
это потому, что, конечно,

87
00:03:15,200 --> 00:03:17,599
компьютер пытается обмануть человека, заставив его

88
00:03:17,599 --> 00:03:20,640
думать, что компьютер — это человек.

89
00:03:20,640 --> 00:03:22,480
Мы также слышим отголоски состязательного

90
00:03:22,480 --> 00:03:24,879
тестирования в этой классической книге статей

91
00:03:24,879 --> 00:03:26,720
Терри Виниграда под названием «Понимание

92
00:03:26,720 --> 00:03:28,879
естественного языка».

93
00:03:28,879 --> 00:03:31,599
В этой книге обсуждаются идеи построения

94
00:03:31,599 --> 00:03:33,760
примеров.  которые, как мы знаем, проведут стресс-тестирование

95
00:03:33,760 --> 00:03:36,080
наших систем, исследуя,

96
00:03:36,080 --> 00:03:37,599
обладают ли они знаниями о том, на что похож мир,

97
00:03:37,599 --> 00:03:40,560
и об истинной сложности языка,

98
00:03:40,560 --> 00:03:42,080
а затем, я думаю, Гектор Левеск действительно

99
00:03:42,080 --> 00:03:44,640
поднял эти идеи Винограда до

100
00:03:44,640 --> 00:03:46,640
уровня полноценного тестирования в своей статье

101
00:03:46,640 --> 00:03:48,879
о  наше лучшее поведение,

102
00:03:48,879 --> 00:03:50,480
давайте кратко рассмотрим эти зимние путеводители

103
00:03:50,480 --> 00:03:52,000
или выиграем схему для выпускников, потому

104
00:03:52,000 --> 00:03:53,840
что они вроде как  интересная идея состоит в

105
00:03:53,840 --> 00:03:55,519
том, что они будут ключом к тому,

106
00:03:55,519 --> 00:03:57,439
обладает ли система глубокими знаниями о мире и

107
00:03:57,439 --> 00:03:58,799
языке,

108
00:03:58,799 --> 00:04:00,239
поэтому мы начнем с примера, например,

109
00:04:00,239 --> 00:04:01,760
трофей не помещается в коричневый

110
00:04:01,760 --> 00:04:03,760
чемодан, потому что он слишком мал, что

111
00:04:03,760 --> 00:04:04,879
слишком мало,

112
00:04:04,879 --> 00:04:07,360
и человеческий ответ таков:  чемодан

113
00:04:07,360 --> 00:04:09,280
есть минимально контрастный

114
00:04:09,280 --> 00:04:10,879
пример трофей не помещается в коричневый

115
00:04:10,879 --> 00:04:12,879
чемодан потому что он слишком большой что

116
00:04:12,879 --> 00:04:15,599
слишком большой здесь мы отвечаем на трофей и

117
00:04:15,599 --> 00:04:17,440
предположительно мы делаем это потому что мы можем сделать что-

118
00:04:17,440 --> 00:04:19,519
то вроде ментальной симуляции с

119
00:04:19,519 --> 00:04:22,160
чемоданами и трофеями и выяснить

120
00:04:22,160 --> 00:04:24,080
как ответить на эти вопросы на этом

121
00:04:24,080 --> 00:04:25,600
основании

122
00:04:25,600 --> 00:04:27,520
следующая пара примеров похожа,

123
00:04:27,520 --> 00:04:29,600
но она больше связана с нормативными

124
00:04:29,600 --> 00:04:32,000
социальными ролями, совет отказал

125
00:04:32,000 --> 00:04:33,759
демонстрантам в разрешении, потому что они

126
00:04:33,759 --> 00:04:36,160
боялись насилия, кто боялся насилия, и

127
00:04:36,160 --> 00:04:37,919
наш стандартный ответ, опирающийся на стандартные

128
00:04:37,919 --> 00:04:40,160
социальные роли, таков:  совет

129
00:04:40,160 --> 00:04:41,919
опять у нас минимально контрастный

130
00:04:41,919 --> 00:04:43,919
пример совет отказал

131
00:04:43,919 --> 00:04:45,600
демонстрантам в разрешении потому что они

132
00:04:45,600 --> 00:04:48,240
выступали за пилотов  Кто выступал за насилие,

133
00:04:48,240 --> 00:04:50,400
и здесь, опять опираясь на стандартные социальные

134
00:04:50,400 --> 00:04:52,240
роли, был склонен отвечать

135
00:04:52,240 --> 00:04:55,360
демонстрантам, интуиция, как я сказал, заключается в

136
00:04:55,360 --> 00:04:58,000
том, что для решения этих вопросов, учитывая,

137
00:04:58,000 --> 00:04:59,680
насколько минимально отличаются эти примеры

138
00:04:59,680 --> 00:05:00,720
, вам необходимо иметь глубокое

139
00:05:00,720 --> 00:05:02,560
понимание вопросов и

140
00:05:02,560 --> 00:05:05,199
контекста, а также  глубокое понимание того, на

141
00:05:05,199 --> 00:05:07,680
что похож наш мир,

142
00:05:07,680 --> 00:05:09,039
а затем, как я сказал, ветеринар

143
00:05:09,039 --> 00:05:11,199
продолжает это и начинает систематизировать

144
00:05:11,199 --> 00:05:13,600
его, поэтому он говорит, что мы должны задавать

145
00:05:13,600 --> 00:05:15,840
вопросы нашим системам, как может ли крокодил

146
00:05:15,840 --> 00:05:17,360
бегать с

147
00:05:17,360 --> 00:05:19,280
препятствиями интуиция ясна, вопрос может

148
00:05:19,280 --> 00:05:21,199
быть  ответил, думая, что у

149
00:05:21,199 --> 00:05:23,680
крокодила короткие ноги живые изгороди в

150
00:05:23,680 --> 00:05:25,360
беге с препятствиями будут слишком высокими, чтобы

151
00:05:25,360 --> 00:05:28,080
крокодил мог перепрыгнуть, поэтому ни один крокодил

152
00:05:28,080 --> 00:05:30,400
не может снова пробежать бег с препятствиями своего

153
00:05:30,400 --> 00:05:32,400
рода мысленное моделирование, которое приводит нас к

154
00:05:32,400 --> 00:05:35,039
ответу на этот удивительный вопрос

155
00:05:35,039 --> 00:05:37,440
и  идея состоит в том, что вопросы, подобные этому

156
00:05:37,440 --> 00:05:39,759
, не будут подвержены дешевым уловкам,

157
00:05:39,759 --> 00:05:41,759
как говорит Левеск, можем ли мы найти вопросы,

158
00:05:41,759 --> 00:05:43,600
где такие дешевые уловки, как  этого будет

159
00:05:43,600 --> 00:05:45,199
недостаточно для создания желаемого

160
00:05:45,199 --> 00:05:47,600
поведения, к сожалению, у этого нет простого

161
00:05:47,600 --> 00:05:49,919
ответа, лучшее, что мы можем сделать, это, возможно,

162
00:05:49,919 --> 00:05:51,680


163
00:05:51,680 --> 00:05:53,840
тщательно придумать набор вопросов с несколькими вариантами ответов, а затем изучить

164
00:05:53,840 --> 00:05:55,680
виды компьютерных программ, которые

165
00:05:55,680 --> 00:05:57,680
могли бы ответить на них. i  думаю, вы можете

166
00:05:57,680 --> 00:05:59,919
услышать то, что мы сейчас называем

167
00:05:59,919 --> 00:06:02,479
режимом состязательного тестирования,

168
00:06:02,479 --> 00:06:04,160
теперь я призываю вас проводить

169
00:06:04,160 --> 00:06:06,240
состязательные тесты для ваших систем, и, как

170
00:06:06,240 --> 00:06:07,840
я уже сказал, вы можете сделать это, создав

171
00:06:07,840 --> 00:06:10,319
всего несколько новых примеров, но мы

172
00:06:10,319 --> 00:06:12,960
должны знать, что мы  делаем

173
00:06:12,960 --> 00:06:14,960
главный вопрос, что может

174
00:06:14,960 --> 00:06:17,280
сказать нам состязательное тестирование и что оно может рассказать нам

175
00:06:17,280 --> 00:06:19,120
о системах, которые мы разрабатываем,

176
00:06:19,120 --> 00:06:20,800
поэтому вот лишь несколько соображений,

177
00:06:20,800 --> 00:06:23,360
которые должны направлять вашу работу в этой области,

178
00:06:23,360 --> 00:06:24,880
прежде всего, вам не нужно быть слишком

179
00:06:24,880 --> 00:06:27,440
состязательным  может быть, вы просто

180
00:06:27,440 --> 00:06:30,000
ставите перед собой сложную задачу, чтобы оценить

181
00:06:30,000 --> 00:06:31,919
, понимает ли ваша

182
00:06:31,919 --> 00:06:34,479
система определенный набор явлений. Изучила ли моя

183
00:06:34,479 --> 00:06:36,319
система что-нибудь о числовых

184
00:06:36,319 --> 00:06:38,720
терминах?  Я понимаю, как

185
00:06:38,720 --> 00:06:41,039
работает отрицание. Работает ли моя система

186
00:06:41,039 --> 00:06:43,520
с новым стилем или жанром? Это сложные

187
00:06:43,520 --> 00:06:44,560
проблемы, которые вы могли бы ставить

188
00:06:44,560 --> 00:06:46,080
непредвзято, и вы могли бы обнаружить, что

189
00:06:46,080 --> 00:06:49,680
ваша система на удивление хороша в них.

190
00:06:49,680 --> 00:06:51,120


191
00:06:51,120 --> 00:06:53,599


192
00:06:53,599 --> 00:06:55,360
я сигнализировал вам до

193
00:06:55,360 --> 00:06:57,520
того, как ограничения метрик, основанных на точности,

194
00:06:57,520 --> 00:06:59,840
таких как f1 и т. д.,

195
00:06:59,840 --> 00:07:01,599
обычно остаются без внимания

196
00:07:01,599 --> 00:07:03,599
состязательной парадигмы, и это потому, что

197
00:07:03,599 --> 00:07:05,360
мы хотим минимального контраста с нашими

198
00:07:05,360 --> 00:07:07,599
стандартными режимами оценки, но я думаю, что

199
00:07:07,599 --> 00:07:09,520
вы можете услышать в заявлениях о миссии,

200
00:07:09,520 --> 00:07:11,680
особенно от levesque  что

201
00:07:11,680 --> 00:07:13,680
в какой-то момент мы могли бы захотеть освободиться от этого

202
00:07:13,680 --> 00:07:16,080
очень ограничительного режима и представить более

203
00:07:16,080 --> 00:07:18,479
открытые комплексные оценки для наших

204
00:07:18,479 --> 00:07:20,560
систем, которые потребовали бы от

205
00:07:20,560 --> 00:07:22,560
них предоставления своих доказательств и

206
00:07:22,560 --> 00:07:24,560
взаимодействия с нами, чтобы разрешить неопределенность в

207
00:07:24,560 --> 00:07:26,479
отношении того, чем они должны быть.  делать

208
00:07:26,479 --> 00:07:28,560
все это в

209
00:07:28,560 --> 00:07:30,560
стандартном состязательном режиме, и мы

210
00:07:30,560 --> 00:07:33,360
должны знать, что это ограничение

211
00:07:33,360 --> 00:07:34,720
этот следующий вопрос действительно

212
00:07:34,720 --> 00:07:37,280
принципиально важен в состязательном

213
00:07:37,280 --> 00:07:40,479
тестировании, если вы видите сбой модели,

214
00:07:40,479 --> 00:07:42,720
действительно ли это сбой модели или

215
00:07:42,720 --> 00:07:44,720
набора данных, на котором модель была обучена

216
00:07:44,720 --> 00:07:45,440


217
00:07:45,440 --> 00:07:47,199
, все это хорошо изложило бы, что

218
00:07:47,199 --> 00:07:49,199
мы должны сделать, когда система выйдет из строя

219
00:07:49,199 --> 00:07:51,120
на  сложный набор данных,

220
00:07:51,120 --> 00:07:53,120
в некоторых случаях вызов может использовать

221
00:07:53,120 --> 00:07:54,560
слепые пятна в дизайне

222
00:07:54,560 --> 00:07:56,319
исходного набора данных, которые будут слабым местом набора данных,

223
00:07:56,319 --> 00:07:57,599


224
00:07:57,599 --> 00:07:59,680
в других случаях вызов может выявить

225
00:07:59,680 --> 00:08:01,919
внутреннюю неспособность конкретного

226
00:08:01,919 --> 00:08:04,000
семейства моделей обрабатывать определенные

227
00:08:04,000 --> 00:08:05,840
явления естественного языка, которые могут  быть слабостью модели

228
00:08:05,840 --> 00:08:07,199


229
00:08:07,199 --> 00:08:08,879
сейчас, они интересно отличаются

230
00:08:08,879 --> 00:08:10,879
с точки зрения развития в

231
00:08:10,879 --> 00:08:13,680
нашей области, мы склонны надеяться, я думаю, что

232
00:08:13,680 --> 00:08:15,520
мы находим слабости модели, потому что

233
00:08:15,520 --> 00:08:17,840
это действительно фундаментальные открытия, но

234
00:08:17,840 --> 00:08:20,560
мы должны знать, что может быть,

235
00:08:20,560 --> 00:08:22,319
что система  мог бы хорошо пройти наш

236
00:08:22,319 --> 00:08:24,080
состязательный тест, если бы он был только что

237
00:08:24,080 --> 00:08:25,840
обучен на нужных примерах,

238
00:08:25,840 --> 00:08:27,840
и это было бы слабостью набора данных,

239
00:08:27,840 --> 00:08:29,599
да  Предположительно, слабые стороны набора

240
00:08:29,599 --> 00:08:31,680
относительно легко устраняются, мы можем

241
00:08:31,680 --> 00:08:33,599
просто дополнить обучающие данные

242
00:08:33,599 --> 00:08:35,360
примерами соответствующего типа, в то время как

243
00:08:35,360 --> 00:08:38,880
слабые места модели вынуждают

244
00:08:38,880 --> 00:08:40,320
нас столкнуться с чем-то, что может быть

245
00:08:40,320 --> 00:08:42,479
неотъемлемым ограничением набора

246
00:08:42,479 --> 00:08:44,240
подходов, которые мы используем.  принимая во внимание гораздо более

247
00:08:44,240 --> 00:08:47,440
фундаментальное понимание

248
00:08:47,440 --> 00:08:49,120
Аттикуса Гейгера в этой статье,

249
00:08:49,120 --> 00:08:50,959
предлагающее аналогичное понимание

250
00:08:50,959 --> 00:08:52,880
в контексте справедливости по отношению к нашим

251
00:08:52,880 --> 00:08:55,360
моделям для любого метода оценки, мы

252
00:08:55,360 --> 00:08:57,200
должны задаться вопросом, является ли она справедливой, была ли

253
00:08:57,200 --> 00:08:59,200
модель представлена данными, достаточными для

254
00:08:59,200 --> 00:09:01,040
поддержки такого обобщения, которое мы  мы

255
00:09:01,040 --> 00:09:03,440
спрашиваем об этом, если мы не можем сказать «да» с

256
00:09:03,440 --> 00:09:05,519
полной уверенностью, мы не можем быть уверены

257
00:09:05,519 --> 00:09:07,600
, связана ли неудачная оценка с

258
00:09:07,600 --> 00:09:10,240
ограничением модели или ограничением данных,

259
00:09:10,240 --> 00:09:12,720
которое не может преодолеть ни одна модель,

260
00:09:12,720 --> 00:09:14,240
и я подчеркиваю это, потому что

261
00:09:14,240 --> 00:09:17,120
удивительно легко попасть в

262
00:09:17,120 --> 00:09:19,279
ловушка мышления, в которой вы навязали

263
00:09:19,279 --> 00:09:21,440
недвусмысленную цель обучения, хотя на самом деле

264
00:09:21,440 --> 00:09:22,480
вы не

265
00:09:22,480 --> 00:09:24,480
просто подумали о простом примере здесь от

266
00:09:24,480 --> 00:09:26,399
человека к человеку  Предположим, я начинаю

267
00:09:26,399 --> 00:09:28,480
последовательность три три пять четыре, и я

268
00:09:28,480 --> 00:09:31,839
говорю вам, что будет дальше в последовательности.

269
00:09:31,839 --> 00:09:33,519
Теперь я мог бы иметь в виду число

270
00:09:33,519 --> 00:09:34,399
семь,

271
00:09:34,399 --> 00:09:36,240
но доказательство, которое я предложил вам,

272
00:09:36,240 --> 00:09:38,399
совершенно не определяет, как

273
00:09:38,399 --> 00:09:40,480
продолжить последовательность, и поэтому я думаю  справедливо

274
00:09:40,480 --> 00:09:42,399
сказать, что ни один обучающийся агент без

275
00:09:42,399 --> 00:09:44,640
большой двусмысленности не мог бы понять, что является моим

276
00:09:44,640 --> 00:09:46,959
предполагаемым продолжением,

277
00:09:46,959 --> 00:09:49,440
и иногда наши состязательные тесты обладают

278
00:09:49,440 --> 00:09:51,760
таким качеством, что доступные данные и

279
00:09:51,760 --> 00:09:54,080
опыт этих систем просто не

280
00:09:54,080 --> 00:09:56,000
полностью устраняют неоднозначность наших предполагаемых

281
00:09:56,000 --> 00:09:58,080
целей обучения.  поэтому мы должны

282
00:09:58,080 --> 00:09:59,760
знать, что это ошибки набора данных,

283
00:09:59,760 --> 00:10:02,160
а не ошибки модели.

284
00:10:02,160 --> 00:10:04,399
Теперь я могу предложить вам конструктивный

285
00:10:04,399 --> 00:10:06,560
набор методов, чтобы выяснить,

286
00:10:06,560 --> 00:10:08,320
имеете ли вы дело со слабостью набора данных

287
00:10:08,320 --> 00:10:10,079
или слабостью модели, и это подпадает

288
00:10:10,079 --> 00:10:11,760
под заголовок  прививка путем

289
00:10:11,760 --> 00:10:13,760
тонкой настройки из этой замечательной бумаги,

290
00:10:13,760 --> 00:10:16,240
просмотрите все, что я цитировал ранее,

291
00:10:16,240 --> 00:10:18,320
поэтому унидол просто напомнит нам, что в

292
00:10:18,320 --> 00:10:21,040
стандартном режиме оценки задачи w

293
00:10:21,040 --> 00:10:23,040
Обучаем нашу систему на некотором исходном наборе данных,

294
00:10:23,040 --> 00:10:25,600
а затем тестируем ее как на

295
00:10:25,600 --> 00:10:27,839
исходном наборе тестов, так и на нашем сложном наборе тестов,

296
00:10:27,839 --> 00:10:30,240
и мы ожидаем, что

297
00:10:30,240 --> 00:10:31,920
увидим такие результаты, когда система

298
00:10:31,920 --> 00:10:33,839
действительно хорошо справляется с исходными данными.

299
00:10:33,839 --> 00:10:36,240
набор и действительно плохо

300
00:10:36,240 --> 00:10:38,079
на контрольном наборе тестов,

301
00:10:38,079 --> 00:10:39,760
но когда мы видим этот результат, мы должны

302
00:10:39,760 --> 00:10:42,399
спросить, почему это происходит, в частности

303
00:10:42,399 --> 00:10:44,320
, это слабость модели или слабость набора данных,

304
00:10:44,320 --> 00:10:46,880
и их предложенный метод. Этот

305
00:10:46,880 --> 00:10:49,360
метод прививки работает следующим образом,

306
00:10:49,360 --> 00:10:51,600
мы собираемся уточнить:  настройте нашу систему на

307
00:10:51,600 --> 00:10:54,399
нескольких наших примерах испытаний, а затем

308
00:10:54,399 --> 00:10:57,040
повторно протестируйте как на исходном тестовом наборе, так

309
00:10:57,040 --> 00:10:57,839
и

310
00:10:57,839 --> 00:10:59,680
на вытянутых частях проблемной

311
00:10:59,680 --> 00:11:00,720
гарнитуры,

312
00:11:00,720 --> 00:11:02,399
когда мы это сделаем, есть три

313
00:11:02,399 --> 00:11:04,720
класса результатов, которые вы можете увидеть,

314
00:11:04,720 --> 00:11:06,800
первый укажет  к слабости набора данных,

315
00:11:06,800 --> 00:11:09,440
если с помощью этой небольшой тонкой

316
00:11:09,440 --> 00:11:11,600
настройки набора данных испытания мы сможем

317
00:11:11,600 --> 00:11:14,079
получить хорошую производительность на исходном

318
00:11:14,079 --> 00:11:16,560
наборе данных испытания, который показывает нам,

319
00:11:16,560 --> 00:11:18,480
что в этом исходном режиме

320
00:11:18,480 --> 00:11:20,800
оценки система  стебель просто не видел достаточного количества

321
00:11:20,800 --> 00:11:22,880
соответствующих типов из ваших примеров

322
00:11:22,880 --> 00:11:24,959
из ваших состязательных тестов, чтобы иметь какую-либо

323
00:11:24,959 --> 00:11:27,360
надежду на успех, но скромное

324
00:11:27,360 --> 00:11:29,519
количество тренировок на этих примерах приводит

325
00:11:29,519 --> 00:11:30,959
к тому, что он работает нормально

326
00:11:30,959 --> 00:11:33,279
, это слабость набора данных, слабость модели

327
00:11:33,279 --> 00:11:34,560
- это то, что мы  может быть в

328
00:11:34,560 --> 00:11:36,320
глубине души для нашего состязательного

329
00:11:36,320 --> 00:11:37,920
тестирования, и это будет тот случай, когда,

330
00:11:37,920 --> 00:11:39,600
даже если мы точно настроим нашу

331
00:11:39,600 --> 00:11:40,959
систему на некоторых из этих сложных

332
00:11:40,959 --> 00:11:43,200
примеров, ее производительность остается очень

333
00:11:43,200 --> 00:11:45,680
низкой, даже если система может поддерживать

334
00:11:45,680 --> 00:11:47,360
хорошую производительность на исходном  набор данных,

335
00:11:47,360 --> 00:11:48,640
и это похоже на то,

336
00:11:48,640 --> 00:11:50,240
что в этих новых примерах есть что-то особенное,

337
00:11:50,240 --> 00:11:52,720
и модель просто не может получить

338
00:11:52,720 --> 00:11:53,839
поддержку,

339
00:11:53,839 --> 00:11:55,279
есть третий результат, который может быть

340
00:11:55,279 --> 00:11:56,639
действительно тревожным, и они будут отслеживать

341
00:11:56,639 --> 00:11:58,399
это как

342
00:11:58,399 --> 00:12:00,320
артефакты аннотаций или сдвиг метки или что-то в этом роде

343
00:12:00,320 --> 00:12:02,800
, и  именно здесь, выполняя эту

344
00:12:02,800 --> 00:12:04,720
точную настройку на некоторых примерах задач,

345
00:12:04,720 --> 00:12:06,800
мы видим снижение производительности как на

346
00:12:06,800 --> 00:12:09,440
исходном наборе данных, так и на наборе данных задачи,

347
00:12:09,440 --> 00:12:10,800
и  это показало бы, что есть

348
00:12:10,800 --> 00:12:13,760
что-то фундаментально запутанное в

349
00:12:13,760 --> 00:12:15,600
этой рекламе этих состязательных

350
00:12:15,600 --> 00:12:18,000
примеров тестирования, которые вызывают

351
00:12:18,000 --> 00:12:19,600
много проблем для системы, которую мы

352
00:12:19,600 --> 00:12:21,360
разработали, потому что даже скромная

353
00:12:21,360 --> 00:12:24,160
степень точной настройки вызывает такие

354
00:12:24,160 --> 00:12:25,680
последствия, которые распространяются по

355
00:12:25,680 --> 00:12:27,920
системе, которые  влияет даже

356
00:12:27,920 --> 00:12:31,120
на производительность исходного набора данных.

357
00:12:31,120 --> 00:12:32,639
Хорошо, чтобы закрыть этот скринкаст,

358
00:12:32,639 --> 00:12:34,480
позвольте мне предложить вам два примера

359
00:12:34,480 --> 00:12:36,399
интересных состязательных тестов в нашей

360
00:12:36,399 --> 00:12:39,040
области, начиная с

361
00:12:39,040 --> 00:12:40,959
набора данных, отвечающего на вопрос об отряде. Я показал вам эту

362
00:12:40,959 --> 00:12:43,120
таблицу лидеров из отряда 2.0 в

363
00:12:43,120 --> 00:12:44,800
начале квартала.  и,

364
00:12:44,800 --> 00:12:46,079
конечно, забавно то, что вам нужно пройти весь

365
00:12:46,079 --> 00:12:48,560
путь до 13-го места в таблице лидеров, чтобы

366
00:12:48,560 --> 00:12:50,800
найти систему, которая хуже, чем наша

367
00:12:50,800 --> 00:12:53,200
оценка человеческой производительности, поэтому у нас

368
00:12:53,200 --> 00:12:55,680
сверхчеловеческая производительность в отряде, но

369
00:12:55,680 --> 00:12:57,839
что это на самом деле означает, что отряд также был

370
00:12:57,839 --> 00:12:59,360
сайт одной из первых действительно

371
00:12:59,360 --> 00:13:01,519
систематических попыток состязательного тестирования

372
00:13:01,519 --> 00:13:03,600
в нашей области, это от jia and lyon

373
00:13:03,600 --> 00:13:04,959
2017

374
00:13:04,959 --> 00:13:06,399
a  и то, что они сделали, довольно просто, мы

375
00:13:06,399 --> 00:13:08,399
начнем с примеров отряда, где у нас есть

376
00:13:08,399 --> 00:13:11,279
проходы и вопросы в качестве входных данных, а

377
00:13:11,279 --> 00:13:14,320
системная задача состоит в том, чтобы ответить на вопрос,

378
00:13:14,320 --> 00:13:16,079
и мы можем рассчитывать на то, что ответ будет

379
00:13:16,079 --> 00:13:18,240
буквальной подстрокой в проходе,

380
00:13:18,240 --> 00:13:21,120
который система дала противнику.

381
00:13:21,120 --> 00:13:22,959
То, что сделали gia и yang, заключались в том,

382
00:13:22,959 --> 00:13:25,120
чтобы просто добавить вводящие в заблуждение предложения к

383
00:13:25,120 --> 00:13:26,880
концам этих отрывков,

384
00:13:26,880 --> 00:13:28,639
и они обнаружили, что системы

385
00:13:28,639 --> 00:13:30,720
систематически вводились в заблуждение этими последними

386
00:13:30,720 --> 00:13:32,399
предложениями, в то время как люди могли легко

387
00:13:32,399 --> 00:13:35,200
их игнорировать, системы теперь были склонны

388
00:13:35,200 --> 00:13:37,600
отвечать, опираясь на информацию из этих

389
00:13:37,600 --> 00:13:39,920
вводящих в заблуждение  новые предложения,

390
00:13:39,920 --> 00:13:41,120
и это своего рода интересная

391
00:13:41,120 --> 00:13:42,800
динамика, потому что вы можете подумать, что

392
00:13:42,800 --> 00:13:45,040
мы просто сейчас обучим нашу систему на

393
00:13:45,040 --> 00:13:46,720
отрывках, которые имеют эти расширенные

394
00:13:46,720 --> 00:13:48,560
вводящие в заблуждение предложения, и тогда наши

395
00:13:48,560 --> 00:13:50,639
системы, несомненно, станут более надежными,

396
00:13:50,639 --> 00:13:52,240
что может быть правдой в некотором смысле, но,

397
00:13:52,240 --> 00:13:53,600
конечно,  тогда мы могли бы просто добавлять

398
00:13:53,600 --> 00:13:55,760
предложения в начало отрывков,

399
00:13:55,760 --> 00:13:57,600
и Гия и Янг обнаружили, что

400
00:13:57,600 --> 00:13:59,440
системы теперь могут быть перепутаны.

401
00:13:59,440 --> 00:14:01,920
добавленными начальными предложениями, и они также

402
00:14:01,920 --> 00:14:03,360
начали давать неправильные ответы в этом

403
00:14:03,360 --> 00:14:05,279
режиме, и вы могли как бы двигаться

404
00:14:05,279 --> 00:14:07,600
вперед и назад в этом состязательном режиме,

405
00:14:07,600 --> 00:14:10,240
показывая, что системы было тревожно

406
00:14:10,240 --> 00:14:13,440
легко обмануть, основываясь на этом простом

407
00:14:13,440 --> 00:14:16,800
добавлении вводящих в заблуждение предложений,

408
00:14:16,800 --> 00:14:19,279
теперь это  очень интересно

409
00:14:19,279 --> 00:14:21,920
о режиме состязательной оценки, что я

410
00:14:21,920 --> 00:14:23,920
думаю, более интересно в

411
00:14:23,920 --> 00:14:25,680
результатах, так это то, что если они начнут показывать

412
00:14:25,680 --> 00:14:27,440
нам, насколько разными

413
00:14:27,440 --> 00:14:28,720
могут быть состязательные испытания,

414
00:14:28,720 --> 00:14:30,560
так что вот таблица лидеров отряда,

415
00:14:30,560 --> 00:14:33,440
оригинал на момент написания статьи,

416
00:14:33,440 --> 00:14:35,279
а также результаты  этот состязательный

417
00:14:35,279 --> 00:14:36,880
тест, и вы можете видеть, прежде всего, что

418
00:14:36,880 --> 00:14:38,800
производительность системы действительно резко упала,

419
00:14:38,800 --> 00:14:40,160
так что это оказывается очень

420
00:14:40,160 --> 00:14:42,160
состязательным для этих систем по

421
00:14:42,160 --> 00:14:44,160
какой-то причине, я думаю, более

422
00:14:44,160 --> 00:14:45,839
интересно отметить, что

423
00:14:45,839 --> 00:14:48,880
ранжирование системы действительно было перепутано, так что это

424
00:14:48,880 --> 00:14:50,800
не похоже на  производительность системы равномерно снижается,

425
00:14:50,800 --> 00:14:53,120
когда мы переходим от

426
00:14:53,120 --> 00:14:55,279
исходного ранга к состязательному рангу, который у нас

427
00:14:55,279 --> 00:14:57,440
есть, как первый  место система теперь

428
00:14:57,440 --> 00:14:59,600
на месте пять второе место

429
00:14:59,600 --> 00:15:01,279
опустилось до места десять

430
00:15:01,279 --> 00:15:03,279
хм, но система седьмого места теперь

431
00:15:03,279 --> 00:15:06,240
на первом месте это выглядит довольно хаотично

432
00:15:06,240 --> 00:15:08,639
хм вот точечный график, где у нас

433
00:15:08,639 --> 00:15:10,399
есть исходная производительность системы по

434
00:15:10,399 --> 00:15:12,720
оси абсцисс  и производительность противоборствующей системы

435
00:15:12,720 --> 00:15:14,880
по оси Y, и вы можете

436
00:15:14,880 --> 00:15:16,480
видеть, что она довольно хаотична, нет

437
00:15:16,480 --> 00:15:18,320
возможности предсказать другую, поэтому

438
00:15:18,320 --> 00:15:20,800
произошло что-то очень интересное,

439
00:15:20,800 --> 00:15:22,880
и это заслуживает внимания, потому что похоже,

440
00:15:22,880 --> 00:15:24,720
что это существенно отличается от

441
00:15:24,720 --> 00:15:26,639
того, что мы делаем, когда мы делаем  Стандартные

442
00:15:26,639 --> 00:15:28,880
оценки У меня нет прямых

443
00:15:28,880 --> 00:15:31,199
доказательств этого от отряда, но вот случай,

444
00:15:31,199 --> 00:15:33,360
когда люди взяли два классических набора данных изображений

445
00:15:33,360 --> 00:15:36,079
и просто создали новые наборы тестов в

446
00:15:36,079 --> 00:15:38,399
соответствии с теми же протоколами,

447
00:15:38,399 --> 00:15:40,800
которые использовались для исходных наборов тестов

448
00:15:40,800 --> 00:15:43,440
набора данных, и что вы найдете  очень сильная

449
00:15:43,440 --> 00:15:45,680
корреляция, даже несмотря на то, что примеры

450
00:15:45,680 --> 00:15:48,160
новые, потому что это тот же протокол.

451
00:15:48,160 --> 00:15:50,240


452
00:15:50,240 --> 00:15:52,000


453
00:15:52,000 --> 00:15:54,639
Состязательность идеально коррелирует с

454
00:15:54,639 --> 00:15:57,120
точностью на этих новых наборах тестов, очень

455
00:15:57,120 --> 00:15:58,800
отличных от этого состязательного режима,

456
00:15:58,800 --> 00:16:00,560
где произошло что-то гораздо более хаотичное,

457
00:16:00,560 --> 00:16:02,959
поэтому состязательное тестирование

458
00:16:02,959 --> 00:16:04,959
существенно отличается от

459
00:16:04,959 --> 00:16:08,160
стандартных оценок,

460
00:16:08,160 --> 00:16:10,079
давайте перейдем к nli, теперь это даст нам

461
00:16:10,079 --> 00:16:11,440
два разных урока о том, как

462
00:16:11,440 --> 00:16:13,680
состязательное тестирование  может быть информативным,

463
00:16:13,680 --> 00:16:15,040
поэтому в начале курса мы увидели

464
00:16:15,040 --> 00:16:16,880
, что теперь у нас есть сверхчеловеческая производительность

465
00:16:16,880 --> 00:16:19,360
на наборе данных snli, что, безусловно,

466
00:16:19,360 --> 00:16:20,800
заслуживает внимания,

467
00:16:20,800 --> 00:16:22,399
и мы достигаем сверхчеловеческой

468
00:16:22,399 --> 00:16:24,560
производительности на тестовом наборе multi-nli,

469
00:16:24,560 --> 00:16:25,839
мы обязательно будем там, если мы  еще не

470
00:16:25,839 --> 00:16:28,800
во время этого скринкаста,

471
00:16:28,800 --> 00:16:30,720
но мы также видели, что системы, которые

472
00:16:30,720 --> 00:16:33,120
действительно хорошо работают с этими наборами

473
00:16:33,120 --> 00:16:35,600
данных, часто уязвимы для злоумышленников

474
00:16:35,600 --> 00:16:37,279
в первом скринкасте.

475
00:16:37,279 --> 00:16:39,360


476
00:16:39,360 --> 00:16:40,880


477
00:16:40,880 --> 00:16:42,800
простые модификации

478
00:16:42,800 --> 00:16:45,360
этих гипотез и обнаруживают, что системы

479
00:16:45,360 --> 00:16:47,680
не ведут себя систематически по

480
00:16:47,680 --> 00:16:49,759
отношению к человеческим интуитивным представлениям о

481
00:16:49,759 --> 00:16:51,600
модифицированные примеры, и это

482
00:16:51,600 --> 00:16:53,759
тревожная часть, и они, конечно, дают количественную оценку,

483
00:16:53,759 --> 00:16:55,440
и вы можете видеть, что

484
00:16:55,440 --> 00:16:57,279
лучшие системы в то время здесь

485
00:16:57,279 --> 00:17:00,000
довольно хорошо работали на snli, и их

486
00:17:00,000 --> 00:17:02,079
производительность резко упала на этих новых тестовых

487
00:17:02,079 --> 00:17:04,079
наборах, показывая, что это было по какой-то

488
00:17:04,079 --> 00:17:06,240
причине  действительно состязательный, когда дело доходит

489
00:17:06,240 --> 00:17:07,839
до этих систем,

490
00:17:07,839 --> 00:17:10,079
но я также представил это как историю

491
00:17:10,079 --> 00:17:12,079
прогресса, потому что я показал вам, что

492
00:17:12,079 --> 00:17:14,959
, просто загрузив roberta multi-noi,

493
00:17:14,959 --> 00:17:16,720
который точно настроен на

494
00:17:16,720 --> 00:17:19,439
наборе данных multi-nli, у вас теперь есть устройство, на

495
00:17:19,439 --> 00:17:21,679
котором  без работы вы можете по существу

496
00:17:21,679 --> 00:17:23,760
решить этот состязательный тест, я думаю,

497
00:17:23,760 --> 00:17:25,439
что это действительно поразительно, и это указывает на

498
00:17:25,439 --> 00:17:27,679
тот факт, что Роберта, в отличие от этих

499
00:17:27,679 --> 00:17:29,919
более ранних моделей, действительно может иметь

500
00:17:29,919 --> 00:17:32,000
систематическое понимание соответствующих

501
00:17:32,000 --> 00:17:34,080
видов лексических отношений, которые вам

502
00:17:34,080 --> 00:17:37,440
нужны для решения этого состязательного набора тестов,

503
00:17:37,440 --> 00:17:39,760
так что это  захватывающий результат,

504
00:17:39,760 --> 00:17:41,440
вот второй результат, который вы можете

505
00:17:41,440 --> 00:17:43,919
увидеть, и это из бумаги nikon,

506
00:17:43,919 --> 00:17:46,559
которая делает широкую батарею разных

507
00:17:46,559 --> 00:17:49,760
adversa  риальные тесты на данных с несколькими NLI

508
00:17:49,760 --> 00:17:52,160
они сделали кучу вещей, таких как антонимы

509
00:17:52,160 --> 00:17:54,160
я люблю историю о золушке противоречит

510
00:17:54,160 --> 00:17:56,240
я ненавижу историю о золушке просто опираясь

511
00:17:56,240 --> 00:17:58,480
на лексические знания они спросили о

512
00:17:58,480 --> 00:18:00,720
числовом рассуждении в этих двух

513
00:18:00,720 --> 00:18:01,840
предпосылках

514
00:18:01,840 --> 00:18:03,440
перекрытие слов и это немного

515
00:18:03,440 --> 00:18:04,559
отличается в  что вы делаете что-то

516
00:18:04,559 --> 00:18:06,400
вроде того, что просто вставляете материал, который, по

517
00:18:06,400 --> 00:18:08,720
вашему мнению, будет отвлекать

518
00:18:08,720 --> 00:18:11,039
в режиме противника отряда, и

519
00:18:11,039 --> 00:18:12,320
смотрите, какие эффекты это имеет, и то

520
00:18:12,320 --> 00:18:14,480
же самое для отрицания, добавляя в

521
00:18:14,480 --> 00:18:16,080
конце информацию,

522
00:18:16,080 --> 00:18:17,520
которая будет вводить в заблуждение для

523
00:18:17,520 --> 00:18:19,280
система, а также включает в себя множество

524
00:18:19,280 --> 00:18:21,280
элементов отрицания, есть несколько других

525
00:18:21,280 --> 00:18:23,360
режимов, для которых у меня не хватило места,

526
00:18:23,360 --> 00:18:25,280
это очень богатая статья с очень

527
00:18:25,280 --> 00:18:28,240
подробным описанием того, как системы справляются

528
00:18:28,240 --> 00:18:31,120
с этими различными состязательными проблемами,

529
00:18:31,120 --> 00:18:33,120
вот картина  набор данных, и

530
00:18:33,120 --> 00:18:34,799
вот разбивка, и я думаю, что

531
00:18:34,799 --> 00:18:36,640
общий вывод заключается в том, что цифры

532
00:18:36,640 --> 00:18:39,440
по всем направлениям очень низки по этим

533
00:18:39,440 --> 00:18:40,960
противникам,

534
00:18:40,960 --> 00:18:42,400
и поэтому это интересно  ng, и

535
00:18:42,400 --> 00:18:44,320
похоже, что даже самые производительные системы

536
00:18:44,320 --> 00:18:46,880
для мультиномии спотыкаются о эти

537
00:18:46,880 --> 00:18:48,880
проблемы, которые мы, безусловно, хотим, чтобы наши

538
00:18:48,880 --> 00:18:50,559
системы могли решать, если мы собираемся

539
00:18:50,559 --> 00:18:53,760
называть их истинными здравыми мыслителями,

540
00:18:53,760 --> 00:18:55,600
однако на самом деле это было основой

541
00:18:55,600 --> 00:18:57,039
для ряда  экспериментов в этой

542
00:18:57,039 --> 00:18:59,840
прививке с помощью тонкой настройки, которую я

543
00:18:59,840 --> 00:19:01,360
цитировал ранее,

544
00:19:01,360 --> 00:19:03,440
вот своего рода грубая картина

545
00:19:03,440 --> 00:19:05,679
результатов производительности, о которых они сообщают на

546
00:19:05,679 --> 00:19:07,919
разных подмножествах этого состязательного

547
00:19:07,919 --> 00:19:10,480
теста на множестве NLI, и вы можете видеть, что

548
00:19:10,480 --> 00:19:12,720
он показывает все разные  результаты, которые

549
00:19:12,720 --> 00:19:14,160
мы обсуждали под заголовком

550
00:19:14,160 --> 00:19:16,880
прививки путем точной настройки, чтобы упростить

551
00:19:16,880 --> 00:19:19,600
вещи, просто сосредоточьтесь на зеленых линиях,

552
00:19:19,600 --> 00:19:21,440
те, что с точками, — это исходная

553
00:19:21,440 --> 00:19:23,520
производительность системы, а те, что с

554
00:19:23,520 --> 00:19:26,400
крестиками, относятся к набору данных о вызове, поэтому

555
00:19:26,400 --> 00:19:28,240
этот первый столбец здесь идентифицирует

556
00:19:28,240 --> 00:19:30,480
Слабые стороны набора данных: вы видите

557
00:19:30,480 --> 00:19:32,960
, что по мере того, как мы настраиваемся на большем количестве примеров

558
00:19:32,960 --> 00:19:34,960
из набора данных задачи, идущего по

559
00:19:34,960 --> 00:19:38,640
оси x здесь, мы очень быстро получаем

560
00:19:38,640 --> 00:19:40,320
систему, которая является  на самом деле хорошо справляется с этой

561
00:19:40,320 --> 00:19:42,320
сложной задачей сразу после примерно

562
00:19:42,320 --> 00:19:44,880
50 примеров система в основном

563
00:19:44,880 --> 00:19:47,360
учится решать проблемы с перекрытием слов и

564
00:19:47,360 --> 00:19:49,120
отрицанием, хотя отрицание

565
00:19:49,120 --> 00:19:51,200
занимает немного больше времени на 400

566
00:19:51,200 --> 00:19:53,520
примерах, так что это тот случай, когда

567
00:19:53,520 --> 00:19:55,360
исходные системы терпели неудачу не

568
00:19:55,360 --> 00:19:57,280
из-за каких-либо внутренних  свойство

569
00:19:57,280 --> 00:19:59,360
используемых моделей, а скорее потому, что в

570
00:19:59,360 --> 00:20:01,039
данных явно просто не было достаточно

571
00:20:01,039 --> 00:20:03,200
информации для решения этих целей обучения,

572
00:20:03,200 --> 00:20:04,400


573
00:20:04,400 --> 00:20:06,480
мы также видим результат 2, который является слабостью модели,

574
00:20:06,480 --> 00:20:08,320
снова следуйте зеленым линиям,

575
00:20:08,320 --> 00:20:10,240
и вы можете видеть здесь, что для орфографических

576
00:20:10,240 --> 00:20:12,799
ошибок и длины  несоответствие отсутствие

577
00:20:12,799 --> 00:20:15,919
тонкой настройки на примерах задач помогает

578
00:20:15,919 --> 00:20:17,440
этим системам справиться с этими

579
00:20:17,440 --> 00:20:19,520
проблемами вот эти плоские линии

580
00:20:19,520 --> 00:20:20,480
и это показывает, что есть что-

581
00:20:20,480 --> 00:20:22,400
то в корне неправильное, возможно,

582
00:20:22,400 --> 00:20:24,480
с этими моделями они просто не

583
00:20:24,480 --> 00:20:26,880
могут решить эти две сложные проблемы,

584
00:20:26,880 --> 00:20:29,039
и тогда мы также видим  третий артефакт

585
00:20:29,039 --> 00:20:30,720
для числовых рассуждений, вы заметите,

586
00:20:30,720 --> 00:20:32,240
что производительность системы вроде

587
00:20:32,240 --> 00:20:34,000
r  здесь действительно хаотично, и это

588
00:20:34,000 --> 00:20:35,360
предполагает, что есть что-то

589
00:20:35,360 --> 00:20:37,120
важное и проблематичное

590
00:20:37,120 --> 00:20:38,080


591
00:20:38,080 --> 00:20:40,159
в этих примерах задач, потому что

592
00:20:40,159 --> 00:20:42,799
точная настройка на них приводит к тому, что система

593
00:20:42,799 --> 00:20:45,120
становится действительно хаотичной в своих прогнозах,

594
00:20:45,120 --> 00:20:46,960
когда мы получаем снижение производительности не

595
00:20:46,960 --> 00:20:49,360
только на наборе задач, но и

596
00:20:49,360 --> 00:20:51,120
на исходных.  набор данных, показывающий, что мы

597
00:20:51,120 --> 00:20:53,520
сделали что-то довольно разрушительное,

598
00:20:53,520 --> 00:20:54,960
так что это действительно интересно, что в

599
00:20:54,960 --> 00:20:56,880
этом случае из этой батареи

600
00:20:56,880 --> 00:20:58,640
состязательных тестов мы видим все эти

601
00:20:58,640 --> 00:21:00,559
разные результаты, указывающие нам на

602
00:21:00,559 --> 00:21:02,559
всевозможные разные уроки о том, какие

603
00:21:02,559 --> 00:21:04,559
действия мы должны предпринять, чтобы сделать эти

604
00:21:04,559 --> 00:21:08,200
системы  более надежный

