1
00:00:04,720 --> 00:00:06,879
так что это конец введения,

2
00:00:06,879 --> 00:00:07,839
а

3
00:00:07,839 --> 00:00:09,840
теперь давайте начнем детализировать ресурсы данных,

4
00:00:09,840 --> 00:00:12,240
которые нам понадобятся для начала нашего

5
00:00:12,240 --> 00:00:13,599
расследования,

6
00:00:13,599 --> 00:00:14,639
и есть два разных типа

7
00:00:14,639 --> 00:00:16,640
данных, которые нам нужны, чтобы говорить о корпусе

8
00:00:16,640 --> 00:00:19,279
и kb,

9
00:00:19,520 --> 00:00:21,520
как и любой другой nlp  проблемы, нам нужно

10
00:00:21,520 --> 00:00:24,560
начать с корпуса большой

11
00:00:24,560 --> 00:00:26,880
коллекции текстов на естественном языке, а

12
00:00:26,880 --> 00:00:28,400
для извлечения отношений нам нужны

13
00:00:28,400 --> 00:00:30,880
предложения, содержащие две или более

14
00:00:30,880 --> 00:00:32,558
сущности,

15
00:00:32,558 --> 00:00:35,120
и поскольку наша цель состоит в том, чтобы сделать

16
00:00:35,120 --> 00:00:37,920
извлечение отношений с дистанционным наблюдением,

17
00:00:37,920 --> 00:00:39,680
нам нужно иметь возможность связать

18
00:00:39,680 --> 00:00:42,000
сущности с  kb,

19
00:00:42,000 --> 00:00:44,719
поэтому нам нужен корпус, в котором

20
00:00:44,719 --> 00:00:47,520
упоминания сущности аннотированы разрешениями сущности,

21
00:00:47,520 --> 00:00:48,960


22
00:00:48,960 --> 00:00:52,320
которые сопоставляют их с уникальными однозначными

23
00:00:52,320 --> 00:00:55,440
идентификаторами, теми же идентификаторами,

24
00:00:55,440 --> 00:00:59,280
которые используются в kb,

25
00:00:59,280 --> 00:01:01,760
поэтому в этом представлении у меня есть

26
00:01:01,760 --> 00:01:04,720
строка elon musk, которая является

27
00:01:04,720 --> 00:01:07,119
просто английским языком  строка,

28
00:01:07,119 --> 00:01:09,360
которую мы называем упоминанием объекта,

29
00:01:09,360 --> 00:01:12,240
а затем у меня есть elon underscore musk,

30
00:01:12,240 --> 00:01:14,640
который является идентификатором объекта

31
00:01:14,640 --> 00:01:18,240
, это уникальный однозначный идентификатор для

32
00:01:18,240 --> 00:01:19,600
этого объекта

33
00:01:19,600 --> 00:01:24,240
в s  Есть предопределенный

34
00:01:24,960 --> 00:01:27,840
словарь идентификаторов сущностей,

35
00:01:27,840 --> 00:01:29,920
и для этой цели очень часто

36
00:01:29,920 --> 00:01:33,840
используется что-то вроде википедии, в которой есть

37
00:01:33,840 --> 00:01:36,320
одна страница википедии

38
00:01:36,320 --> 00:01:40,880
практически для любой сущности, которую вы можете придумать

39
00:01:40,880 --> 00:01:42,399
для нашего исследования. Мы собираемся

40
00:01:42,399 --> 00:01:44,720
использовать адаптацию корпуса wikileaks,

41
00:01:44,720 --> 00:01:47,360
который был  созданный google и umass

42
00:01:47,360 --> 00:01:50,880
в 2013 году, полный корпус содержит 40

43
00:01:50,880 --> 00:01:53,600
миллионов упоминаний объектов с 10 миллионов

44
00:01:53,600 --> 00:01:55,040
веб-страниц,

45
00:01:55,040 --> 00:01:57,840
и каждое упоминание объекта

46
00:01:57,840 --> 00:02:00,479
снабжено аннотацией URL-адреса википедии,

47
00:02:00,479 --> 00:02:02,719
но мы собираемся использовать только

48
00:02:02,719 --> 00:02:04,640
подмножество полного корпуса, чтобы упростить

49
00:02:04,640 --> 00:02:07,640
управление.

50
00:02:08,160 --> 00:02:09,440
так что давайте начнем рассматривать часть

51
00:02:09,440 --> 00:02:12,160
кода, который мы будем использовать в блокнотах Python

52
00:02:12,160 --> 00:02:14,080
для этой темы.

53
00:02:14,080 --> 00:02:17,200
Хм, ресурсы данных, которые мы будем использовать, живут

54
00:02:17,200 --> 00:02:19,599
в подкаталоге нашего каталога данных,

55
00:02:19,599 --> 00:02:22,879
называемом relexed data,

56
00:02:22,879 --> 00:02:26,080
и мы определили класс, называемый corpus

57
00:02:26,080 --> 00:02:28,720
который содержит примеры и который позволяет

58
00:02:28,720 --> 00:02:31,200
вам быстро искать примеры, содержащие

59
00:02:31,200 --> 00:02:33,360
определенные объекты,

60
00:02:33,360 --> 00:02:35,840
поэтому, если мы загрузим наш корпус, мы обнаружим, что он

61
00:02:35,840 --> 00:02:38,800
содержит более 330 000 примеров.

62
00:02:38,800 --> 00:02:40,239


63
00:02:40,239 --> 00:02:42,720
достаточно, чтобы мы могли легко работать с

64
00:02:42,720 --> 00:02:45,840
ним на обычном ноутбуке,

65
00:02:45,840 --> 00:02:47,920
но он достаточно большой, чтобы поддерживать эффективное

66
00:02:47,920 --> 00:02:50,400
машинное обучение,

67
00:02:50,400 --> 00:02:52,560
и мы можем распечатать репрезентативный

68
00:02:52,560 --> 00:02:55,120
пример из корпуса, на

69
00:02:55,120 --> 00:02:57,760
самом деле это немного сложно читать, поэтому

70
00:02:57,760 --> 00:03:00,000
позвольте мне дать вам другой взгляд на  в том

71
00:03:00,000 --> 00:03:02,720
же примере

72
00:03:02,720 --> 00:03:05,440
мы представляем примеры, используя класс примера,

73
00:03:05,440 --> 00:03:08,159
который представляет собой именованный кортеж с 12

74
00:03:08,159 --> 00:03:10,720
полями, перечисленными здесь,

75
00:03:10,720 --> 00:03:13,200
первые два поля, сущность один и

76
00:03:13,200 --> 00:03:16,640
сущность два, содержат уникальные идентификаторы

77
00:03:16,640 --> 00:03:19,120
для двух упомянутых сущностей,

78
00:03:19,120 --> 00:03:21,840
мы именуем идентичности, используя вики-идентификаторы, которые

79
00:03:21,840 --> 00:03:24,799
вы можете представить как  последняя

80
00:03:24,799 --> 00:03:28,159
часть URL-адреса википедии

81
00:03:28,640 --> 00:03:30,720
следующие пять полей представляют собой текст,

82
00:03:30,720 --> 00:03:32,799
окружающий два упоминания,

83
00:03:32,799 --> 00:03:35,200
разделенный на пять частей, поэтому левое

84
00:03:35,200 --> 00:03:37,040
содержит текст перед первым

85
00:03:37,040 --> 00:03:38,000


86
00:03:38,000 --> 00:03:41,040
упоминанием, одно — это само первое упоминание,

87
00:03:41,040 --> 00:03:43,200
среднее — содержит текст между двумя

88
00:03:43,200 --> 00:03:44,480
упомянутыми

89
00:03:44,480 --> 00:03:46,879
упоминаниями, два — это первое упоминание.  второе упоминание и

90
00:03:46,879 --> 00:03:49,599
право содержат текст после второго

91
00:03:49,599 --> 00:03:51,920
упоминания,

92
00:03:52,080 --> 00:03:54,239
а последние пять полей содержат те

93
00:03:54,239 --> 00:03:56,799
же пять фрагментов текста, но это  время,

94
00:03:56,799 --> 00:03:59,920
аннотированное тегами части речи, которые

95
00:03:59,920 --> 00:04:01,760
могут оказаться полезными, когда мы начинаем

96
00:04:01,760 --> 00:04:05,840
строить модели для извлечения отношений,

97
00:04:08,159 --> 00:04:09,920
теперь, когда вы начинаете работать с

98
00:04:09,920 --> 00:04:12,080
новым набором данных, рекомендуется провести

99
00:04:12,080 --> 00:04:14,879
некоторое исследование данных, чтобы ознакомиться

100
00:04:14,879 --> 00:04:16,720
с большой частью данных  это

101
00:04:16,720 --> 00:04:18,238
получение представления о высокоуровневых

102
00:04:18,238 --> 00:04:20,478
характеристиках распределений сводной

103
00:04:20,478 --> 00:04:23,759
статистики данных и т. д.,

104
00:04:23,759 --> 00:04:26,160
например, сколько существует сущностей

105
00:04:26,160 --> 00:04:28,400
и какие из них наиболее распространены,

106
00:04:28,400 --> 00:04:31,040
вот некоторый код, который вычисляет это,

107
00:04:31,040 --> 00:04:33,360
и вот результаты,

108
00:04:33,360 --> 00:04:35,680
так что их больше, чем  95 000 уникальных

109
00:04:35,680 --> 00:04:36,720
сущностей,

110
00:04:36,720 --> 00:04:38,479
и похоже, что в наиболее распространенных

111
00:04:38,479 --> 00:04:41,040
сущностях преобладает географическое

112
00:04:41,040 --> 00:04:43,840
расположение.

113
00:04:45,199 --> 00:04:46,960
Теперь основное преимущество, которое мы получаем от

114
00:04:46,960 --> 00:04:49,040
класса корпуса, — это возможность извлекать

115
00:04:49,040 --> 00:04:52,800
примеры, содержащие определенные сущности,

116
00:04:52,800 --> 00:04:55,040
поэтому давайте найдем примеры, содержащие двигатели Илона Маска и Тесла,

117
00:04:55,040 --> 00:04:58,560


118
00:04:59,759 --> 00:05:02,479
таких пять.  примеры и

119
00:05:02,479 --> 00:05:05,120
вот первый на

120
00:05:05,120 --> 00:05:07,440
самом деле это могут быть не все

121
00:05:07,440 --> 00:05:10,240
примеры содержащие elon musk и tesla

122
00:05:10,240 --> 00:05:13,280
motors это только th  Примеры, в которых Илон

123
00:05:13,280 --> 00:05:15,840
Маск был упомянут первым, а

124
00:05:15,840 --> 00:05:18,080
двигатели Тесла были упомянуты вторыми,

125
00:05:18,080 --> 00:05:20,320
могут быть дополнительные примеры, в

126
00:05:20,320 --> 00:05:23,039
которых они указаны в обратном порядке, поэтому давайте

127
00:05:23,039 --> 00:05:27,919
проверим, ищите двигатели Тесла Илон Маск,

128
00:05:27,919 --> 00:05:30,400
конечно же, еще два примера в обратном

129
00:05:30,400 --> 00:05:31,360
порядке,

130
00:05:31,360 --> 00:05:33,039
так что в дальнейшем у нас будет  не забудьте

131
00:05:33,039 --> 00:05:36,080
проверить оба направления, когда мы

132
00:05:36,080 --> 00:05:37,600
ищем примеры, содержащие

133
00:05:37,600 --> 00:05:39,840
определенную пару сущностей,

134
00:05:39,840 --> 00:05:41,440
ладно, несколько последних замечаний по

135
00:05:41,440 --> 00:05:42,639
корпусу,

136
00:05:42,639 --> 00:05:45,600
сначала этот корпус не лишен недостатков,

137
00:05:45,600 --> 00:05:47,360
когда вы познакомитесь с ним, вы,

138
00:05:47,360 --> 00:05:49,919
вероятно, обнаружите, что он содержит много

139
00:05:49,919 --> 00:05:52,479
примеры, которые почти,

140
00:05:52,479 --> 00:05:55,840
но не точно, дублируют

141
00:05:55,840 --> 00:05:58,720
это, кажется, артефакт

142
00:05:58,720 --> 00:06:01,680
методологии выборки веб-документов,

143
00:06:01,680 --> 00:06:03,360
которая использовалась при построении

144
00:06:03,360 --> 00:06:05,840
набора данных вики-ссылок,

145
00:06:05,840 --> 00:06:07,199
и это приводит к некоторым

146
00:06:07,199 --> 00:06:09,199
искажениям, и мы можем увидеть некоторые

147
00:06:09,199 --> 00:06:10,560
примеры этого позже,

148
00:06:10,560 --> 00:06:12,400
но даже если  в корпусе есть несколько

149
00:06:12,400 --> 00:06:13,360
недостатков,

150
00:06:13,360 --> 00:06:15,360
он прекрасно подойдет для наших целей.

151
00:06:15,360 --> 00:06:17,759


152
00:06:17,759 --> 00:06:19,440
Одна вещь, которую этот корпус не

153
00:06:19,440 --> 00:06:21,440
включает, — это какие-либо аннотации об отношениях.

154
00:06:21,440 --> 00:06:23,280
ns,

155
00:06:23,280 --> 00:06:25,600
поэтому его нельзя использовать для полностью

156
00:06:25,600 --> 00:06:27,120
контролируемого подхода к извлечению отношений,

157
00:06:27,120 --> 00:06:29,520
потому что для этого требуется

158
00:06:29,520 --> 00:06:31,120
метка

159
00:06:31,120 --> 00:06:33,520
отношения для каждой пары измерений объекта, и у

160
00:06:33,520 --> 00:06:35,440
нас здесь нет такой аннотации.

161
00:06:35,440 --> 00:06:37,759
Единственные аннотации, которые у нас есть в этом

162
00:06:37,759 --> 00:06:41,039
корпусе, - это сопоставление разрешений объектов

163
00:06:41,039 --> 00:06:44,479
упоминание объекта для идентификатора объекта,

164
00:06:44,479 --> 00:06:46,639
что означает, что для продвижения вперед

165
00:06:46,639 --> 00:06:49,120
нам нужно связать корпус с

166
00:06:49,120 --> 00:06:51,440
внешним источником знаний об

167
00:06:51,440 --> 00:06:52,960
отношениях,

168
00:06:52,960 --> 00:06:56,000
нам нужен kb, к

169
00:06:57,520 --> 00:06:59,280
счастью, наше распределение данных

170
00:06:59,280 --> 00:07:02,240
включает kb, полученный из

171
00:07:02,240 --> 00:07:04,880
freebase uh freebase  имеет интересную

172
00:07:04,880 --> 00:07:08,240
историю, он был создан в конце 2000-х годов

173
00:07:08,240 --> 00:07:10,639
компанией под названием

174
00:07:10,639 --> 00:07:13,520
metaweb во главе с Джоном Джанандреа, который

175
00:07:13,520 --> 00:07:16,080
позже стал моим боссом.

176
00:07:16,080 --> 00:07:19,680
Google приобрел мета-веб в 2010 году,

177
00:07:19,680 --> 00:07:22,479
и freebase стала основой

178
00:07:22,479 --> 00:07:24,639
графа знаний

179
00:07:24,639 --> 00:07:27,360
Google, к сожалению, Google закрыл Freebase

180
00:07:27,360 --> 00:07:30,560
в 2016 году, что было трагедией.

181
00:07:30,560 --> 00:07:32,639
но данные freebase по-прежнему доступны

182
00:07:32,639 --> 00:07:35,039
из различных источников,

183
00:07:35,039 --> 00:07:37,840
поэтому rkb представляет собой набор реляционных

184
00:07:37,840 --> 00:07:41,199
троек, каждая из которых состоит из  отношение

185
00:07:41,199 --> 00:07:43,280
субъекта и объекта

186
00:07:43,280 --> 00:07:45,199
, например, место рождения барака

187
00:07:45,199 --> 00:07:48,479
обамы, гонолулу, супруга, барак обама,

188
00:07:48,479 --> 00:07:51,039
мишель обама, автор, дерзость

189
00:07:51,039 --> 00:07:53,360
надежды, барак обама,

190
00:07:53,360 --> 00:07:55,680
так что, как вы можете догадаться, отношение является

191
00:07:55,680 --> 00:07:58,879
одной из нескольких предопределенных констант,

192
00:07:58,879 --> 00:08:02,160
таких как место рождения или наличие супруга.

193
00:08:02,160 --> 00:08:04,960
субъект и объект являются сущностями,

194
00:08:04,960 --> 00:08:08,400
представленными вики-идентификаторами, это то же пространство идентификаторов, которое

195
00:08:08,400 --> 00:08:11,120
используется в корпусе. Вики-идентификаторы в

196
00:08:11,120 --> 00:08:13,840
основном являются последней частью URL-адреса википедии,

197
00:08:13,840 --> 00:08:16,319


198
00:08:17,840 --> 00:08:19,520
как и для корпуса,

199
00:08:19,520 --> 00:08:23,039
мы создали класс kb для хранения kb.

200
00:08:23,039 --> 00:08:26,879
тройки и некоторые связанные индексы.

201
00:08:26,879 --> 00:08:29,440
Этот класс позволяет легко и эффективно

202
00:08:29,440 --> 00:08:33,039
искать тройки kb как по отношению, так

203
00:08:33,039 --> 00:08:34,559
и по

204
00:08:34,559 --> 00:08:36,240
сущностям,

205
00:08:36,240 --> 00:08:38,880
поэтому здесь мы просто загружаем данные

206
00:08:38,880 --> 00:08:42,000
и печатаем количество

207
00:08:42,000 --> 00:08:44,640
троек kb.

208
00:08:44,640 --> 00:08:46,800
немного меньше, чем корпус,

209
00:08:46,800 --> 00:08:48,959
если вы помните, что в корпусе

210
00:08:48,959 --> 00:08:53,839
было 330 и 330 примеров,

211
00:08:53,839 --> 00:08:57,279
и мы можем распечатать первую тройку kb,

212
00:08:57,279 --> 00:08:59,760
так что это тройка kb, которая говорит, что

213
00:08:59,760 --> 00:09:02,560
отношение содержит

214
00:09:02,560 --> 00:09:05,600
соблюдается между bri  CKfields и центральный железнодорожный вокзал Куала-Лумпура, о

215
00:09:05,600 --> 00:09:09,360
котором я не

216
00:09:09,360 --> 00:09:11,519
знал,

217
00:09:13,200 --> 00:09:14,959
точно так же, как мы знали о корпусе, давайте проведем

218
00:09:14,959 --> 00:09:17,360
некоторое исследование данных, чтобы получить представление

219
00:09:17,360 --> 00:09:19,200
о высокоуровневых характеристиках

220
00:09:19,200 --> 00:09:22,800
kb, поэтому сначала, сколько отношений есть

221
00:09:22,800 --> 00:09:25,760
атрибут все отношения  kb

222
00:09:25,760 --> 00:09:29,519
содержит список своих отношений, и

223
00:09:29,519 --> 00:09:33,120
кажется, что их 16,

224
00:09:33,680 --> 00:09:35,680
ну, что это за отношения и насколько

225
00:09:35,680 --> 00:09:36,480
они велики,

226
00:09:36,480 --> 00:09:38,720
этот код печатает, распечатывает список с

227
00:09:38,720 --> 00:09:41,440
размерами, обратите внимание на

228
00:09:41,440 --> 00:09:44,399
метод получения троек для отношения, который

229
00:09:44,399 --> 00:09:47,920
возвращает список kb  тройки для

230
00:09:47,920 --> 00:09:48,839
данного

231
00:09:48,839 --> 00:09:51,680
отношения, вы начинаете понимать,

232
00:09:51,680 --> 00:09:55,120
что за материал находится в этой

233
00:09:55,120 --> 00:09:57,600
базе знаний. Похоже, что отношение contains

234
00:09:57,600 --> 00:10:01,440
действительно большое, с более чем 18 000 троек,

235
00:10:01,440 --> 00:10:04,000
и есть несколько отношений, которые

236
00:10:04,000 --> 00:10:06,079
довольно малы, с

237
00:10:06,079 --> 00:10:10,240
менее чем тысячей.  тройки

238
00:10:11,519 --> 00:10:13,440
вот некоторый код, который печатает

239
00:10:13,440 --> 00:10:16,399
один пример из каждого отношения отношения

240
00:10:16,399 --> 00:10:18,800
, чтобы мы могли лучше понять,

241
00:10:18,800 --> 00:10:20,880
что они означают,

242
00:10:20,880 --> 00:10:23,200
некоторые из этих фактов знакомы, например,

243
00:10:23,200 --> 00:10:26,399
соединение франция испания,

244
00:10:26,399 --> 00:10:28,800
другие могут  ссылаться на незнакомые

245
00:10:28,800 --> 00:10:31,360
объекты, например, я никогда не слышал

246
00:10:31,360 --> 00:10:34,800
о sheridan lethanu,

247
00:10:34,800 --> 00:10:36,720
но я думаю, что вы можете быстро сформировать

248
00:10:36,720 --> 00:10:39,600
интуитивное представление о том, что представляет собой каждое отношение.

249
00:10:39,600 --> 00:10:41,920


250
00:10:43,920 --> 00:10:45,600
теперь один из самых важных методов в

251
00:10:45,600 --> 00:10:49,200
классе kb — получение троек для объектов,

252
00:10:49,200 --> 00:10:51,680
что позволяет нам  искать тройки по

253
00:10:51,680 --> 00:10:53,600
содержащимся в них сущностям,

254
00:10:53,600 --> 00:10:55,440
поэтому давайте воспользуемся этим, чтобы увидеть, какие тройки

255
00:10:55,440 --> 00:10:59,360
содержат францию и германию,

256
00:10:59,440 --> 00:11:01,440
хорошо, конечно, они принадлежат к отношению соединений a,

257
00:11:01,440 --> 00:11:03,360
что имеет смысл,

258
00:11:03,360 --> 00:11:05,680
теперь такие отношения, как примыкания,

259
00:11:05,680 --> 00:11:08,560
интуитивно симметричны, поэтому мы ожидаем

260
00:11:08,560 --> 00:11:11,600
найти обратную тройку в  kb также

261
00:11:11,600 --> 00:11:12,640


262
00:11:12,640 --> 00:11:15,279
и да, это там,

263
00:11:15,279 --> 00:11:18,079
но обратите внимание, что нет никакой гарантии, что

264
00:11:18,079 --> 00:11:20,880
такие обратные тройки действительно появляются

265
00:11:20,880 --> 00:11:23,760
в kb, нет гарантии, что

266
00:11:23,760 --> 00:11:25,440
kb завершен,

267
00:11:25,440 --> 00:11:27,519
и вы можете легко написать некоторый код для

268
00:11:27,519 --> 00:11:31,279
поиска недостающих инверсий

269
00:11:32,959 --> 00:11:35,760
теперь, когда отношение примыкает симметрично,

270
00:11:35,760 --> 00:11:38,000
но большинство  отношения интуитивно

271
00:11:38,000 --> 00:11:39,519
асимметричны,

272
00:11:39,519 --> 00:11:41,040
поэтому давайте посмотрим, какие тройки у нас есть для

273
00:11:41,040 --> 00:11:44,640
двигателей tesla и elon musk,

274
00:11:44,640 --> 00:11:45,839
хорошо, они принадлежат отношениям основателей,

275
00:11:45,839 --> 00:11:48,640
хорошо, что это ожидаемо  d

276
00:11:48,640 --> 00:11:51,200
это асимметричное отношение, а

277
00:11:51,200 --> 00:11:53,120
как насчет

278
00:11:53,120 --> 00:11:57,480
инверсных двигателей Илона Маска и Тесла?

279
00:11:57,680 --> 00:12:00,160
Хорошо, они относятся к рабочему

280
00:12:00,160 --> 00:12:01,920
отношению, это

281
00:12:01,920 --> 00:12:03,519
кажется забавным способом описать

282
00:12:03,519 --> 00:12:07,360
роль Элона в Тесла, но хорошо,

283
00:12:07,360 --> 00:12:09,839
так что это показывает, что вы можете иметь одно

284
00:12:09,839 --> 00:12:12,000
отношение между x и y

285
00:12:12,000 --> 00:12:14,079
и a  другое отношение, которое имеет место

286
00:12:14,079 --> 00:12:17,680
между y и x,

287
00:12:19,120 --> 00:12:20,880
еще одно наблюдение,

288
00:12:20,880 --> 00:12:23,200
может быть более одного отношения, которое

289
00:12:23,200 --> 00:12:25,120
имеет место между данной парой сущностей

290
00:12:25,120 --> 00:12:27,279
даже в одном направлении,

291
00:12:27,279 --> 00:12:29,519
так что, например, давайте посмотрим, какие тройки

292
00:12:29,519 --> 00:12:32,720
имеют место, какие тройки содержат

293
00:12:32,720 --> 00:12:36,399
клеопатру и томали 13-й теос филарап  fillo

294
00:12:36,399 --> 00:12:39,720
phillo patter

295
00:12:40,560 --> 00:12:43,680
о боже мой, эта пара относится как

296
00:12:43,680 --> 00:12:45,760
к родственным отношениям, так

297
00:12:45,760 --> 00:12:49,040
и к супругам,

298
00:12:49,040 --> 00:12:53,320
о которых я могу только сказать,

299
00:12:54,959 --> 00:12:57,200
двигаясь вперед,

300
00:12:57,200 --> 00:12:59,760
давайте посмотрим на распределение

301
00:12:59,760 --> 00:13:02,399
сущностей в kb, сколько сущностей

302
00:13:02,399 --> 00:13:05,600
существует и какие из них наиболее распространены.

303
00:13:05,600 --> 00:13:09,680
хорошо, вот некоторый код, который вычисляет, что

304
00:13:09,920 --> 00:13:13,040
в kb содержится 40 000 сущностей, так

305
00:13:13,040 --> 00:13:15,680
что это меньше половины сущностей,

306
00:13:15,680 --> 00:13:17,440
чем в корпусе, если вы помните

307
00:13:17,440 --> 00:13:18,720
co  rpus имеет

308
00:13:18,720 --> 00:13:22,160
95 000 уникальных сущностей, поэтому в корпусе есть

309
00:13:22,160 --> 00:13:23,600
много сущностей,

310
00:13:23,600 --> 00:13:25,600
которые вообще не отображаются в

311
00:13:25,600 --> 00:13:27,760
kb,

312
00:13:27,760 --> 00:13:29,600
но, как и в корпусе, в наиболее распространенных

313
00:13:29,600 --> 00:13:31,680
сущностях преобладают географические

314
00:13:31,680 --> 00:13:37,279
местоположения англия, индия, италия и т. д.

315
00:13:38,639 --> 00:13:40,720
обратите внимание, что нет никаких обещаний  или

316
00:13:40,720 --> 00:13:44,399
ожидание того, что эта база знаний полна

317
00:13:44,399 --> 00:13:46,399
для одной вещи, база знаний даже не

318
00:13:46,399 --> 00:13:48,320
содержит многих сущностей из

319
00:13:48,320 --> 00:13:50,880
корпуса, и даже для тех сущностей, которые она

320
00:13:50,880 --> 00:13:51,920
включает,

321
00:13:51,920 --> 00:13:54,079
могут быть возможные триплеты, которые

322
00:13:54,079 --> 00:13:56,000
верны в мире,

323
00:13:56,000 --> 00:13:59,120
но отсутствуют в базе знаний,

324
00:13:59,120 --> 00:14:01,120
поэтому  например, эти тройки есть в

325
00:14:01,120 --> 00:14:04,000
базе знаний основателей tesla motors илон маск

326
00:14:04,000 --> 00:14:06,560
работал в компании elon musk основатели tesla motors

327
00:14:06,560 --> 00:14:09,279
spacex илон маск, вы могли бы

328
00:14:09,279 --> 00:14:12,079
ожидать, что они работают в компании elon musk

329
00:14:12,079 --> 00:14:15,199
spacex, но нет, этой тройки нет

330
00:14:15,199 --> 00:14:16,399
в базе данных

331
00:14:16,399 --> 00:14:18,240
, это странно,

332
00:14:18,240 --> 00:14:20,800
ну на самом деле все  точка извлечения отношения

333
00:14:20,800 --> 00:14:23,279
состоит в том, чтобы идентифицировать

334
00:14:23,279 --> 00:14:25,279
новые реляционные триплеты из

335
00:14:25,279 --> 00:14:27,600
текста на естественном языке, чтобы мы могли добавить их

336
00:14:27,600 --> 00:14:28,720
в kb,

337
00:14:28,720 --> 00:14:30,480
если бы наши kbs были полными,

338
00:14:30,480 --> 00:14:33,519
нам нечего было бы делать

339
00:14:33,519 --> 00:14:36,079
сейчас на самом деле в th  В этом случае вы можете

340
00:14:36,079 --> 00:14:38,320
возразить, что нам не нужно делать извлечение отношений,

341
00:14:38,320 --> 00:14:39,519


342
00:14:39,519 --> 00:14:42,880
чтобы сделать это завершение, мы могли бы написать

343
00:14:42,880 --> 00:14:46,560
некоторую логику, которая признает, что гм-

344
00:14:46,560 --> 00:14:51,040
основатели xy влекут за собой работу в yx,

345
00:14:51,040 --> 00:14:53,680
и применять это правило систематически

346
00:14:53,680 --> 00:14:56,480
по всей базе знаний и использовать его для

347
00:14:56,480 --> 00:14:59,040
заполнения недостающих  тройка в этом случае, но

348
00:14:59,040 --> 00:15:01,279
общий смысл остается в

349
00:15:01,279 --> 00:15:03,920
силе, что может быть много троек, которые верны

350
00:15:03,920 --> 00:15:06,720
в мире, но отсутствуют в базе знаний,

351
00:15:06,720 --> 00:15:08,880
где эта стратегия не

352
00:15:08,880 --> 00:15:11,360
позволит нам добавить недостающую

353
00:15:11,360 --> 00:15:13,839
информацию.

