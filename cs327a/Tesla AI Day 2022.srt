1
00:00:05,130 --> 00:00:07,560
[Music]

2
00:00:07,560 --> 00:00:10,560
foreign

3
00:00:37,380 --> 00:00:39,500
thank you

4
00:01:09,830 --> 00:01:12,980
[Applause]

5
00:01:16,770 --> 00:01:20,920
[Applause]

6
00:01:35,520 --> 00:01:38,520
foreign

7
00:01:52,630 --> 00:01:55,819
[Music]

8
00:02:05,759 --> 00:02:08,759
foreign

9
00:02:29,100 --> 00:02:44,520
[Music]

10
00:02:44,819 --> 00:02:45,080
foreign

11
00:02:45,080 --> 00:02:51,520
[Music]

12
00:03:11,340 --> 00:03:13,260
[Music]

13
00:03:13,260 --> 00:03:16,260
foreign

14
00:03:24,300 --> 00:03:28,369
[Music]

15
00:04:00,319 --> 00:04:03,980
thank you

16
00:04:25,860 --> 00:04:28,040
foreign

17
00:04:54,180 --> 00:04:56,900
foreign

18
00:05:02,760 --> 00:05:05,860
[Music]

19
00:05:10,650 --> 00:05:15,699
[Music]

20
00:05:27,240 --> 00:05:30,240
foreign

21
00:05:42,090 --> 00:06:14,720
[Music]

22
00:06:14,720 --> 00:06:17,780
thank you

23
00:06:33,720 --> 00:06:36,720
again

24
00:06:52,920 --> 00:07:01,930
[Music]

25
00:07:08,670 --> 00:07:19,010
[Music]

26
00:07:19,020 --> 00:07:21,830
foreign

27
00:07:21,830 --> 00:07:25,040
[Music]

28
00:07:28,370 --> 00:07:31,430
[Music]

29
00:07:44,510 --> 00:07:47,610
[Music]

30
00:07:58,740 --> 00:08:00,919
foreign

31
00:08:40,400 --> 00:08:43,460
[Music]

32
00:08:48,270 --> 00:08:49,860
[Music]

33
00:08:49,860 --> 00:08:52,200
foreign

34
00:08:52,200 --> 00:08:59,200
[Music]

35
00:09:04,010 --> 00:09:10,999
[Music]

36
00:09:26,880 --> 00:09:29,880
foreign

37
00:09:43,170 --> 00:09:48,059
[Music]

38
00:09:49,920 --> 00:09:52,860
foreign

39
00:09:52,860 --> 00:09:56,059
[Music]

40
00:09:58,310 --> 00:10:11,340
[Music]

41
00:10:11,340 --> 00:10:14,440
[Applause]

42
00:10:14,830 --> 00:10:21,540
[Music]

43
00:10:21,540 --> 00:10:23,720
foreign

44
00:10:23,720 --> 00:10:43,529
[Music]

45
00:10:46,220 --> 00:10:57,259
[Music]

46
00:11:01,070 --> 00:11:04,199
[Music]

47
00:11:18,930 --> 00:11:25,080
[Music]

48
00:11:26,279 --> 00:11:29,279
foreign

49
00:11:48,660 --> 00:11:51,799
[Music]

50
00:11:56,190 --> 00:12:10,049
[Music]

51
00:12:20,750 --> 00:12:27,230
[Music]

52
00:12:42,400 --> 00:12:47,579
[Music]

53
00:12:47,579 --> 00:12:50,579
foreign

54
00:12:51,260 --> 00:13:05,830
[Music]

55
00:13:05,830 --> 00:13:08,899
[Applause]

56
00:13:17,820 --> 00:13:20,879
[Music]

57
00:13:23,000 --> 00:13:26,230
[Music]

58
00:13:31,580 --> 00:13:35,619
[Music]

59
00:13:38,970 --> 00:13:42,289
[Music]

60
00:13:44,540 --> 00:13:52,340
[Music]

61
00:13:56,040 --> 00:13:59,040
foreign

62
00:14:20,459 --> 00:14:23,459
foreign

63
00:14:32,880 --> 00:14:35,820
welcome everybody

64
00:14:35,820 --> 00:14:39,380
let's give everyone a moment to

65
00:14:40,079 --> 00:14:43,820
get back in the audience and

66
00:14:44,040 --> 00:14:45,420
all right

67
00:14:45,420 --> 00:14:46,920
great

68
00:14:46,920 --> 00:14:51,600
uh welcome to Tesla AI day 2022.

69
00:14:51,600 --> 00:14:54,079
all right

70
00:14:54,770 --> 00:14:57,180
[Applause]

71
00:14:57,180 --> 00:14:59,519
we've got some really exciting things to

72
00:14:59,519 --> 00:15:00,839
show you

73
00:15:00,839 --> 00:15:03,779
um I think you'll be pretty impressed uh

74
00:15:03,779 --> 00:15:06,000
I do want to set some expectations with

75
00:15:06,000 --> 00:15:10,440
respect to uh our Optimus robot

76
00:15:10,440 --> 00:15:13,079
um as as you know last year it was just

77
00:15:13,079 --> 00:15:16,620
a person in a robot suit uh

78
00:15:16,620 --> 00:15:18,779
but uh We've not we've come a long way

79
00:15:18,779 --> 00:15:21,540
and it's I think you know compared to

80
00:15:21,540 --> 00:15:23,639
that it's going to be very impressive

81
00:15:23,639 --> 00:15:26,519
uh and um

82
00:15:26,519 --> 00:15:28,800
we're going to talk about uh the

83
00:15:28,800 --> 00:15:31,260
advancements in AI for full self-driving

84
00:15:31,260 --> 00:15:33,899
as well as how they apply to more

85
00:15:33,899 --> 00:15:36,060
generally to real world AI problems like

86
00:15:36,060 --> 00:15:38,160
a humanoid robot and and even going

87
00:15:38,160 --> 00:15:39,899
beyond that

88
00:15:39,899 --> 00:15:41,579
um I think there's some potential that

89
00:15:41,579 --> 00:15:44,399
what we're doing here at Tesla could

90
00:15:44,399 --> 00:15:48,240
make a meaningful contribution to AGI

91
00:15:48,240 --> 00:15:48,959
um

92
00:15:48,959 --> 00:15:52,019
and um and I think actually tells us a

93
00:15:52,019 --> 00:15:54,839
good entity to do it from a governance

94
00:15:54,839 --> 00:15:56,339
standpoint because we're a publicly

95
00:15:56,339 --> 00:15:58,920
traded company we have one class of of

96
00:15:58,920 --> 00:16:01,860
stock and that means that the public

97
00:16:01,860 --> 00:16:04,019
controls Tesla and I think that's

98
00:16:04,019 --> 00:16:06,240
actually a good thing

99
00:16:06,240 --> 00:16:08,399
um so if I go crazy you can fire me this

100
00:16:08,399 --> 00:16:10,440
is important

101
00:16:10,440 --> 00:16:12,420
maybe I'm not crazy I don't know

102
00:16:12,420 --> 00:16:15,899
um so uh

103
00:16:15,899 --> 00:16:17,519
yeah so we're going to talk a lot about

104
00:16:17,519 --> 00:16:20,399
our progress in AI autopilot as well as

105
00:16:20,399 --> 00:16:23,399
the progress uh in uh with with dojo

106
00:16:23,399 --> 00:16:25,320
and then we're going to bring the team

107
00:16:25,320 --> 00:16:28,199
out and do a long q a so you can ask

108
00:16:28,199 --> 00:16:30,180
tough questions

109
00:16:30,180 --> 00:16:32,579
um whatever you'd like existential

110
00:16:32,579 --> 00:16:34,680
questions technical questions if it

111
00:16:34,680 --> 00:16:38,399
would want to have as much time for Q a

112
00:16:38,399 --> 00:16:43,139
as possible so let's see with that

113
00:16:43,139 --> 00:16:45,360
you guess what daily

114
00:16:45,360 --> 00:16:47,699
hey guys I'm Milan I work on autopilot

115
00:16:47,699 --> 00:16:49,139
and it is rubber

116
00:16:49,139 --> 00:16:50,279
I'm Lizzy

117
00:16:50,279 --> 00:16:52,740
a mechanical engineer on the project as

118
00:16:52,740 --> 00:16:53,459
well

119
00:16:53,459 --> 00:16:55,139
okay

120
00:16:55,139 --> 00:16:57,480
um so should we should we bring up the

121
00:16:57,480 --> 00:17:00,259
vot before we

122
00:17:03,720 --> 00:17:05,760
forward first time we try this robot

123
00:17:05,760 --> 00:17:08,939
without any backup support cranes

124
00:17:08,939 --> 00:17:11,640
mechanical mechanisms no cables nothing

125
00:17:11,640 --> 00:17:13,980
yeah I want to join with you guys

126
00:17:13,980 --> 00:17:15,900
tonight but it was the first time let's

127
00:17:15,900 --> 00:17:18,630
see you ready let's go

128
00:17:18,630 --> 00:17:20,520
[Applause]

129
00:17:20,520 --> 00:17:20,720
foreign

130
00:17:20,720 --> 00:17:54,960
[Music]

131
00:17:54,960 --> 00:17:56,600
foreign

132
00:17:56,600 --> 00:18:12,900
[Music]

133
00:18:16,340 --> 00:18:24,140
[Music]

134
00:18:24,140 --> 00:18:27,240
so this is essentially the sample cell

135
00:18:27,240 --> 00:18:29,100
driving computer that runs in your Tesla

136
00:18:29,100 --> 00:18:30,920
cars by the way

137
00:18:30,920 --> 00:18:34,220
[Music]

138
00:18:34,220 --> 00:18:37,260
this is the it's literally the first

139
00:18:37,260 --> 00:18:39,299
time the robot has operated without a

140
00:18:39,299 --> 00:18:42,620
tether was on stage tonight

141
00:18:50,420 --> 00:18:57,780
[Music]

142
00:18:59,930 --> 00:19:03,160
[Music]

143
00:19:11,940 --> 00:19:14,640
that's it so

144
00:19:14,640 --> 00:19:16,440
um so the robot can actually do a lot

145
00:19:16,440 --> 00:19:17,880
more than we just showed you we just

146
00:19:17,880 --> 00:19:20,880
didn't want it to fall on its face uh so

147
00:19:20,880 --> 00:19:24,299
we'll we'll show you some videos now of

148
00:19:24,299 --> 00:19:26,880
the robot doing a bunch of other things

149
00:19:26,880 --> 00:19:27,480
um

150
00:19:27,480 --> 00:19:30,059
yeah which are less risky

151
00:19:30,059 --> 00:19:31,020
um yeah

152
00:19:31,020 --> 00:19:34,520
we should close the screen guys

153
00:19:38,220 --> 00:19:40,860
[Music]

154
00:19:40,860 --> 00:19:42,539
yeah we wanted to show a little bit more

155
00:19:42,539 --> 00:19:44,100
what we've done over the past few months

156
00:19:44,100 --> 00:19:46,080
with apart and just walking around and

157
00:19:46,080 --> 00:19:49,160
dancing on stage ah

158
00:19:49,160 --> 00:19:52,440
just humble beginnings but you can see

159
00:19:52,440 --> 00:19:55,020
the autopilot neural networks running as

160
00:19:55,020 --> 00:19:57,179
is just retrained for the bud uh

161
00:19:57,179 --> 00:19:59,640
directly on that on that new platform

162
00:19:59,640 --> 00:20:01,679
that's my watering can yeah when you see

163
00:20:01,679 --> 00:20:03,660
a rendered view that's that's the robot

164
00:20:03,660 --> 00:20:05,280
what's the that's the world the robot

165
00:20:05,280 --> 00:20:07,559
sees so it's it's very clearly

166
00:20:07,559 --> 00:20:10,080
identifying objects like this is the

167
00:20:10,080 --> 00:20:13,020
object it should pick up picking it up

168
00:20:13,020 --> 00:20:13,620
um

169
00:20:13,620 --> 00:20:16,220
yeah

170
00:20:18,240 --> 00:20:20,580
we use the same process as we did for

171
00:20:20,580 --> 00:20:22,919
autopilot to collect data in train your

172
00:20:22,919 --> 00:20:24,419
networks that we then Deploy on the

173
00:20:24,419 --> 00:20:26,880
robot that's an example that illustrates

174
00:20:26,880 --> 00:20:30,740
the upper body a little bit more

175
00:20:31,559 --> 00:20:33,419
something that we'll like try to nail

176
00:20:33,419 --> 00:20:35,280
down in a few months over the next few

177
00:20:35,280 --> 00:20:38,520
months I would say to perfection

178
00:20:38,520 --> 00:20:40,559
this is really an actual station in the

179
00:20:40,559 --> 00:20:42,000
Fremont Factory as well that it's

180
00:20:42,000 --> 00:20:43,020
working at

181
00:20:43,020 --> 00:20:46,160
yep so

182
00:20:47,080 --> 00:20:50,260
[Applause]

183
00:20:54,059 --> 00:20:56,220
and that's not the only thing we have to

184
00:20:56,220 --> 00:20:58,740
show today right yeah absolutely so

185
00:20:58,740 --> 00:21:01,500
um that what you saw was what we call

186
00:21:01,500 --> 00:21:04,679
Bumble C that's our uh uh sort of rough

187
00:21:04,679 --> 00:21:07,039
development robot uh using

188
00:21:07,039 --> 00:21:09,840
semi-off-the-shelf actuators

189
00:21:09,840 --> 00:21:12,299
um but we actually uh have it's gone a

190
00:21:12,299 --> 00:21:14,039
step further than that already the

191
00:21:14,039 --> 00:21:16,080
team's done an incredible job and we

192
00:21:16,080 --> 00:21:18,720
actually have an optimist bot with a

193
00:21:18,720 --> 00:21:22,080
fully Tesla designed at both actuators

194
00:21:22,080 --> 00:21:24,120
um battery pack uh control system

195
00:21:24,120 --> 00:21:25,679
everything

196
00:21:25,679 --> 00:21:28,919
um it it wasn't quite ready to walk uh

197
00:21:28,919 --> 00:21:30,720
but I think it will walk in a few weeks

198
00:21:30,720 --> 00:21:33,900
but we wanted to show you the robot uh

199
00:21:33,900 --> 00:21:35,700
the the something that's actually fairly

200
00:21:35,700 --> 00:21:37,740
close to what will go into production

201
00:21:37,740 --> 00:21:39,360
and

202
00:21:39,360 --> 00:21:41,039
um and show you all the things it can do

203
00:21:41,039 --> 00:21:44,240
so let's bring it out

204
00:21:44,240 --> 00:21:47,040
do it

205
00:21:47,040 --> 00:21:51,510
[Music]

206
00:21:56,880 --> 00:21:59,939
[Music]

207
00:22:05,370 --> 00:22:07,460
[Music]

208
00:22:07,460 --> 00:22:10,620
all right

209
00:22:10,620 --> 00:22:12,350
laughs

210
00:22:12,350 --> 00:22:20,610
[Music]

211
00:22:23,700 --> 00:22:26,700
foreign

212
00:22:39,559 --> 00:22:42,840
that we expect to have in Optimus

213
00:22:42,840 --> 00:22:45,179
production unit one which is the ability

214
00:22:45,179 --> 00:22:47,039
to move all the fingers independently

215
00:22:47,039 --> 00:22:50,520
move the uh to have the thumb have two

216
00:22:50,520 --> 00:22:52,740
degrees of freedom so it has opposable

217
00:22:52,740 --> 00:22:55,620
thumbs and both left and right hand so

218
00:22:55,620 --> 00:22:58,559
it's able to operate tools and do useful

219
00:22:58,559 --> 00:23:01,500
things our goal is to make a a useful

220
00:23:01,500 --> 00:23:03,919
humanoid robot as quickly as possible

221
00:23:03,919 --> 00:23:07,799
and we've also designed it using the

222
00:23:07,799 --> 00:23:09,840
same discipline that we use in designing

223
00:23:09,840 --> 00:23:12,780
the car which is to say to design it for

224
00:23:12,780 --> 00:23:15,419
manufacturing such that it's possible to

225
00:23:15,419 --> 00:23:18,960
make the robot at in high volume at low

226
00:23:18,960 --> 00:23:21,240
cost with high reliability

227
00:23:21,240 --> 00:23:23,700
so that's incredibly important I mean

228
00:23:23,700 --> 00:23:25,860
you've all seen very impressive humanoid

229
00:23:25,860 --> 00:23:28,200
robot demonstrations

230
00:23:28,200 --> 00:23:29,820
um and that that's great but what are

231
00:23:29,820 --> 00:23:32,760
they missing they're missing a brain

232
00:23:32,760 --> 00:23:35,039
they don't have the the intelligence to

233
00:23:35,039 --> 00:23:38,159
navigate the world uh by themselves and

234
00:23:38,159 --> 00:23:40,500
they're they're also very expensive

235
00:23:40,500 --> 00:23:43,559
um and made in low volume whereas uh

236
00:23:43,559 --> 00:23:45,900
this this is the optimistic society and

237
00:23:45,900 --> 00:23:48,960
extremely capable robot but made in very

238
00:23:48,960 --> 00:23:51,360
high volume probably ultimately millions

239
00:23:51,360 --> 00:23:52,679
of units

240
00:23:52,679 --> 00:23:55,559
um and it is expected to cost much less

241
00:23:55,559 --> 00:23:58,100
than a car

242
00:23:58,100 --> 00:24:00,600
I would say probably less than twenty

243
00:24:00,600 --> 00:24:03,420
thousand dollars would be my guess

244
00:24:03,420 --> 00:24:08,700
[Applause]

245
00:24:08,700 --> 00:24:12,900
the the potential for optimistic is I

246
00:24:12,900 --> 00:24:14,220
think appreciated by very effective

247
00:24:14,220 --> 00:24:17,640
people hey

248
00:24:19,020 --> 00:24:22,740
as usual Tesla demos are coming in hot

249
00:24:22,740 --> 00:24:25,679
so okay that's good that's good

250
00:24:25,679 --> 00:24:28,640
um yeah

251
00:24:28,679 --> 00:24:30,720
um the teams put on put in and the team

252
00:24:30,720 --> 00:24:32,280
has put in an incredible amount of work

253
00:24:32,280 --> 00:24:35,100
uh it's uh working days you know seven

254
00:24:35,100 --> 00:24:38,940
days a week running the 3am oil to to

255
00:24:38,940 --> 00:24:41,640
get to the demonstration today I'm super

256
00:24:41,640 --> 00:24:43,080
proud of what they've done is they've

257
00:24:43,080 --> 00:24:44,340
really done done a great job I just like

258
00:24:44,340 --> 00:24:45,600
to give a hand to the whole option of

259
00:24:45,600 --> 00:24:45,850
this team

260
00:24:45,850 --> 00:24:56,820
[Applause]

261
00:24:56,820 --> 00:24:58,919
so you know that now there's still a lot

262
00:24:58,919 --> 00:25:03,360
of work to be done to refine Optimus and

263
00:25:03,360 --> 00:25:05,460
improve it obviously this is just

264
00:25:05,460 --> 00:25:07,380
Optimus version one

265
00:25:07,380 --> 00:25:10,080
and that's really why we're holding this

266
00:25:10,080 --> 00:25:13,020
event which is to convince some of the

267
00:25:13,020 --> 00:25:14,400
most talented people in the world like

268
00:25:14,400 --> 00:25:15,659
you guys

269
00:25:15,659 --> 00:25:19,740
um to join Tesla and help make it a

270
00:25:19,740 --> 00:25:22,620
reality and bring it to fruition at

271
00:25:22,620 --> 00:25:25,980
scale such that it can help millions of

272
00:25:25,980 --> 00:25:27,539
people

273
00:25:27,539 --> 00:25:29,460
um and the the and the potential it

274
00:25:29,460 --> 00:25:31,919
likes it is is really boggles the mind

275
00:25:31,919 --> 00:25:33,900
because you have to say like what what

276
00:25:33,900 --> 00:25:38,340
is an economy an economy is uh sort of

277
00:25:38,340 --> 00:25:41,039
productive entities times the

278
00:25:41,039 --> 00:25:44,100
productivity uh Capital times output

279
00:25:44,100 --> 00:25:46,320
productivity per capita at the point in

280
00:25:46,320 --> 00:25:48,120
which there is not a limitation on

281
00:25:48,120 --> 00:25:49,140
capita

282
00:25:49,140 --> 00:25:51,240
the it's not clear what an economy even

283
00:25:51,240 --> 00:25:53,279
means at that point an economy becomes

284
00:25:53,279 --> 00:25:55,620
quasially infinite

285
00:25:55,620 --> 00:25:58,020
um so

286
00:25:58,020 --> 00:26:01,260
what what you know taken to fruition in

287
00:26:01,260 --> 00:26:03,779
the hopefully benign scenario

288
00:26:03,779 --> 00:26:08,159
um the this means uh a future of

289
00:26:08,159 --> 00:26:11,700
abundance a future where

290
00:26:11,700 --> 00:26:15,600
um there is no poverty where people you

291
00:26:15,600 --> 00:26:18,000
can have whatever you want in terms of

292
00:26:18,000 --> 00:26:20,159
products and services

293
00:26:20,159 --> 00:26:21,900
um

294
00:26:21,900 --> 00:26:24,600
it really is a a fundamental

295
00:26:24,600 --> 00:26:27,179
transformation of civilization as we

296
00:26:27,179 --> 00:26:29,279
know it

297
00:26:29,279 --> 00:26:30,000
um

298
00:26:30,000 --> 00:26:31,320
obviously we want to make sure that

299
00:26:31,320 --> 00:26:34,980
transformation is a positive one and um

300
00:26:34,980 --> 00:26:36,539
safe

301
00:26:36,539 --> 00:26:39,240
and but that's also why I think

302
00:26:39,240 --> 00:26:42,600
Tesla as an entity doing this being a

303
00:26:42,600 --> 00:26:44,400
single class of stock publicly traded

304
00:26:44,400 --> 00:26:46,140
owned by the public

305
00:26:46,140 --> 00:26:48,480
is very important

306
00:26:48,480 --> 00:26:50,820
and should not be overlooked I think

307
00:26:50,820 --> 00:26:53,700
this is essential because then if the

308
00:26:53,700 --> 00:26:55,320
public doesn't like what Tesla's doing

309
00:26:55,320 --> 00:26:57,840
the public can buy shares in Tesla and

310
00:26:57,840 --> 00:27:00,240
vote differently

311
00:27:00,240 --> 00:27:02,400
this is a big deal

312
00:27:02,400 --> 00:27:03,059
um

313
00:27:03,059 --> 00:27:04,980
like it's very important that that I

314
00:27:04,980 --> 00:27:06,840
can't just do what I want you know

315
00:27:06,840 --> 00:27:08,760
sometimes people think that not but it's

316
00:27:08,760 --> 00:27:10,020
not true

317
00:27:10,020 --> 00:27:10,620
um

318
00:27:10,620 --> 00:27:11,880
so

319
00:27:11,880 --> 00:27:13,679
um

320
00:27:13,679 --> 00:27:15,240
you know that's it's very important that

321
00:27:15,240 --> 00:27:16,500
the the

322
00:27:16,500 --> 00:27:18,539
corporate entity that has that that

323
00:27:18,539 --> 00:27:20,940
makes this happen is something that the

324
00:27:20,940 --> 00:27:24,600
public can properly influence

325
00:27:24,600 --> 00:27:27,120
um and so I think the Tesla structure is

326
00:27:27,120 --> 00:27:29,820
is ideal for that

327
00:27:29,820 --> 00:27:31,940
um

328
00:27:32,760 --> 00:27:34,559
and like I said that you know

329
00:27:34,559 --> 00:27:37,440
self-driving cars will certainly have a

330
00:27:37,440 --> 00:27:40,320
tremendous impact on the world

331
00:27:40,320 --> 00:27:43,140
um I think they will improve the

332
00:27:43,140 --> 00:27:46,080
productivity of Transport by at least

333
00:27:46,080 --> 00:27:48,419
a half order of magnitude perhaps an

334
00:27:48,419 --> 00:27:51,240
order of magnitude perhaps more

335
00:27:51,240 --> 00:27:52,559
um

336
00:27:52,559 --> 00:27:54,840
optimists I think

337
00:27:54,840 --> 00:27:56,779
has

338
00:27:56,779 --> 00:27:59,940
maybe a two order of magnitude uh

339
00:27:59,940 --> 00:28:01,799
potential Improvement

340
00:28:01,799 --> 00:28:05,100
in uh economic output

341
00:28:05,100 --> 00:28:07,679
like like it's not clear it's not clear

342
00:28:07,679 --> 00:28:10,860
what the limit actually even is

343
00:28:10,860 --> 00:28:11,700
um

344
00:28:11,700 --> 00:28:14,039
so

345
00:28:14,039 --> 00:28:15,779
but we need to do this in the right way

346
00:28:15,779 --> 00:28:17,340
we need to do it carefully and safely

347
00:28:17,340 --> 00:28:20,940
and ensure that the outcome is one that

348
00:28:20,940 --> 00:28:22,520
is beneficial to

349
00:28:22,520 --> 00:28:25,740
civilization and and one that Humanity

350
00:28:25,740 --> 00:28:27,179
once

351
00:28:27,179 --> 00:28:29,159
I can't this is also it's extremely

352
00:28:29,159 --> 00:28:30,779
important obviously

353
00:28:30,779 --> 00:28:32,520
so

354
00:28:32,520 --> 00:28:34,380
um

355
00:28:34,380 --> 00:28:38,059
and I hope you will consider uh joining

356
00:28:38,059 --> 00:28:43,679
Tesla to achieve those goals

357
00:28:43,679 --> 00:28:46,380
um it Tesla we really care about doing

358
00:28:46,380 --> 00:28:48,059
the right thing here always aspire to do

359
00:28:48,059 --> 00:28:51,000
the right thing and and really not

360
00:28:51,000 --> 00:28:52,440
pay the road to hell with good

361
00:28:52,440 --> 00:28:54,720
intentions and I think the road to hell

362
00:28:54,720 --> 00:28:56,039
is mostly paved with bad intentions but

363
00:28:56,039 --> 00:28:57,299
every now and again there's a good

364
00:28:57,299 --> 00:28:59,700
intention in there so we want to do it

365
00:28:59,700 --> 00:29:01,679
do the right thing um so you know

366
00:29:01,679 --> 00:29:03,299
consider joining us and helping make it

367
00:29:03,299 --> 00:29:04,380
happen

368
00:29:04,380 --> 00:29:07,140
um with that let's let's uh move on to

369
00:29:07,140 --> 00:29:11,360
the next phase right on thank you Elon

370
00:29:15,960 --> 00:29:17,880
all right so you've seen a couple robots

371
00:29:17,880 --> 00:29:20,640
today let's do a quick timeline recap so

372
00:29:20,640 --> 00:29:22,380
last year we unveiled the Tesla bot

373
00:29:22,380 --> 00:29:24,360
concept but a concept doesn't get us

374
00:29:24,360 --> 00:29:26,460
very far we knew we needed a real

375
00:29:26,460 --> 00:29:28,559
development and integration platform to

376
00:29:28,559 --> 00:29:30,419
get real-life learnings as quickly as

377
00:29:30,419 --> 00:29:32,880
possible so that robot that came out and

378
00:29:32,880 --> 00:29:34,440
did the little routine for you guys we

379
00:29:34,440 --> 00:29:37,320
had that within six months built working

380
00:29:37,320 --> 00:29:39,240
on software integration Hardware

381
00:29:39,240 --> 00:29:42,240
upgrades over the months since then but

382
00:29:42,240 --> 00:29:43,980
in parallel we've also been designing

383
00:29:43,980 --> 00:29:47,279
the Next Generation this one over here

384
00:29:47,279 --> 00:29:50,100
so this guy is rooted in the the

385
00:29:50,100 --> 00:29:52,080
foundation of sort of the vehicle design

386
00:29:52,080 --> 00:29:54,120
process you know we're leveraging all of

387
00:29:54,120 --> 00:29:56,760
those learnings that we already have

388
00:29:56,760 --> 00:29:58,500
obviously there's a lot that's changed

389
00:29:58,500 --> 00:29:59,880
since last year but there's a few things

390
00:29:59,880 --> 00:30:01,860
that are still the same you'll notice we

391
00:30:01,860 --> 00:30:03,779
still have this really detailed focus on

392
00:30:03,779 --> 00:30:05,820
the true human form we think that

393
00:30:05,820 --> 00:30:07,919
matters for a few reasons but it's fun

394
00:30:07,919 --> 00:30:09,299
we spend a lot of time thinking about

395
00:30:09,299 --> 00:30:12,240
how amazing the human body is we have

396
00:30:12,240 --> 00:30:13,860
this incredible range of motion

397
00:30:13,860 --> 00:30:17,580
typically really amazing strength a fun

398
00:30:17,580 --> 00:30:19,740
exercise is if you put your fingertip on

399
00:30:19,740 --> 00:30:21,659
the chair in front of you you'll notice

400
00:30:21,659 --> 00:30:24,539
that there's a huge range of motion that

401
00:30:24,539 --> 00:30:26,100
you have in your shoulder and your elbow

402
00:30:26,100 --> 00:30:27,899
for example without moving your

403
00:30:27,899 --> 00:30:29,580
fingertip you can move those joints all

404
00:30:29,580 --> 00:30:31,620
over the place

405
00:30:31,620 --> 00:30:33,419
um but the robot you know its main

406
00:30:33,419 --> 00:30:36,179
function is to do real useful work and

407
00:30:36,179 --> 00:30:37,919
it maybe doesn't necessarily need all of

408
00:30:37,919 --> 00:30:40,140
those degrees of freedom right away so

409
00:30:40,140 --> 00:30:42,000
we've stripped it down to a minimum sort

410
00:30:42,000 --> 00:30:44,580
of 28 fundamental degrees of freedom and

411
00:30:44,580 --> 00:30:46,140
then of course our hands in addition to

412
00:30:46,140 --> 00:30:47,279
that

413
00:30:47,279 --> 00:30:49,740
humans are also pretty efficient at some

414
00:30:49,740 --> 00:30:51,539
things and not so efficient in other

415
00:30:51,539 --> 00:30:53,940
times so for example we can eat a small

416
00:30:53,940 --> 00:30:55,980
amount of food to sustain ourselves for

417
00:30:55,980 --> 00:30:58,559
several hours that's great uh but when

418
00:30:58,559 --> 00:31:00,179
we're just kind of sitting around no

419
00:31:00,179 --> 00:31:02,100
offense but we're kind of inefficient

420
00:31:02,100 --> 00:31:04,740
we're just sort of burning energy

421
00:31:04,740 --> 00:31:06,419
so on the robot platform what we're

422
00:31:06,419 --> 00:31:07,679
going to do is we're going to minimize

423
00:31:07,679 --> 00:31:09,779
that idle power consumption drop it as

424
00:31:09,779 --> 00:31:11,940
low as possible and that way we can just

425
00:31:11,940 --> 00:31:14,220
flip a switch and immediately the robot

426
00:31:14,220 --> 00:31:15,720
turns into something that does useful

427
00:31:15,720 --> 00:31:17,940
work

428
00:31:17,940 --> 00:31:19,260
so let's talk about this latest

429
00:31:19,260 --> 00:31:21,539
generation in some detail shall we

430
00:31:21,539 --> 00:31:23,340
so on the screen here you'll see in

431
00:31:23,340 --> 00:31:25,320
Orange are actuators which we'll get to

432
00:31:25,320 --> 00:31:27,240
in a little bit and in blue our

433
00:31:27,240 --> 00:31:29,159
electrical system

434
00:31:29,159 --> 00:31:31,380
so now that we have our sort of

435
00:31:31,380 --> 00:31:33,840
human-based research and we have our

436
00:31:33,840 --> 00:31:35,640
first development platform we have both

437
00:31:35,640 --> 00:31:37,799
research and execution to draw from for

438
00:31:37,799 --> 00:31:38,940
this design

439
00:31:38,940 --> 00:31:40,860
again we're using that vehicle design

440
00:31:40,860 --> 00:31:42,840
foundation so we're taking it from

441
00:31:42,840 --> 00:31:46,260
concept through design and Analysis and

442
00:31:46,260 --> 00:31:48,600
then build and validation

443
00:31:48,600 --> 00:31:50,220
along the way we're going to optimize

444
00:31:50,220 --> 00:31:52,020
for things like cost and efficiency

445
00:31:52,020 --> 00:31:53,940
because those are critical metrics to

446
00:31:53,940 --> 00:31:56,580
take this product to scale eventually

447
00:31:56,580 --> 00:31:58,679
how are we going to do that well we're

448
00:31:58,679 --> 00:32:00,600
going to reduce our part count and our

449
00:32:00,600 --> 00:32:02,100
power consumption of every element

450
00:32:02,100 --> 00:32:04,380
possible we're going to do things like

451
00:32:04,380 --> 00:32:06,480
reduce the sensing and the wiring at our

452
00:32:06,480 --> 00:32:08,399
extremities you can imagine a lot of

453
00:32:08,399 --> 00:32:10,380
mass in your hands and feet is going to

454
00:32:10,380 --> 00:32:12,480
be quite difficult and power consumptive

455
00:32:12,480 --> 00:32:13,799
to move around

456
00:32:13,799 --> 00:32:15,899
and we're going to centralize both our

457
00:32:15,899 --> 00:32:18,179
power distribution and our compute to

458
00:32:18,179 --> 00:32:20,940
the physical center of the platform

459
00:32:20,940 --> 00:32:23,279
so in the middle of our torso actually

460
00:32:23,279 --> 00:32:25,440
it is the Torso we have our battery pack

461
00:32:25,440 --> 00:32:28,080
this is sized at 2.3 kilowatt hours

462
00:32:28,080 --> 00:32:29,880
which is perfect for about a full day's

463
00:32:29,880 --> 00:32:31,500
worth of work

464
00:32:31,500 --> 00:32:33,120
what's really unique about this battery

465
00:32:33,120 --> 00:32:34,919
pack is it has all of the battery

466
00:32:34,919 --> 00:32:37,500
Electronics integrated into a single PCB

467
00:32:37,500 --> 00:32:39,840
within the pack so that means everything

468
00:32:39,840 --> 00:32:43,440
from sensing to fusing charge management

469
00:32:43,440 --> 00:32:46,620
and power distribution is all on one all

470
00:32:46,620 --> 00:32:48,480
in one place

471
00:32:48,480 --> 00:32:51,600
we're also leveraging both our Vehicle

472
00:32:51,600 --> 00:32:54,899
Products and our Energy Products to roll

473
00:32:54,899 --> 00:32:56,640
all of those key features into this

474
00:32:56,640 --> 00:32:58,559
battery so that's streamlined

475
00:32:58,559 --> 00:33:00,840
manufacturing really efficient and

476
00:33:00,840 --> 00:33:02,760
simple cooling methods battery

477
00:33:02,760 --> 00:33:05,220
management and also safety

478
00:33:05,220 --> 00:33:07,200
and of course we can leverage Tesla's

479
00:33:07,200 --> 00:33:08,940
existing infrastructure and supply chain

480
00:33:08,940 --> 00:33:11,760
to make it

481
00:33:11,760 --> 00:33:14,100
so going on to sort of our brain it's

482
00:33:14,100 --> 00:33:15,919
not in the head but it's pretty close

483
00:33:15,919 --> 00:33:18,539
also in our torso we have our Central

484
00:33:18,539 --> 00:33:21,419
Computer so as you know Tesla already

485
00:33:21,419 --> 00:33:23,580
ships full self-driving computers in

486
00:33:23,580 --> 00:33:25,980
every vehicle we produce we want to

487
00:33:25,980 --> 00:33:28,440
leverage both the autopilot hardware and

488
00:33:28,440 --> 00:33:30,360
the software for the humanoid platform

489
00:33:30,360 --> 00:33:31,980
but because it's different in

490
00:33:31,980 --> 00:33:34,200
requirements and in form factor we're

491
00:33:34,200 --> 00:33:36,179
going to change a few things first

492
00:33:36,179 --> 00:33:38,460
so we still are gonna it's gonna do

493
00:33:38,460 --> 00:33:40,019
everything that a human brain does

494
00:33:40,019 --> 00:33:42,779
processing Vision data making Split

495
00:33:42,779 --> 00:33:44,820
Second decisions based on multiple

496
00:33:44,820 --> 00:33:47,940
sensory inputs and also Communications

497
00:33:47,940 --> 00:33:49,860
so to support Communications it's

498
00:33:49,860 --> 00:33:52,019
equipped with wireless connectivity as

499
00:33:52,019 --> 00:33:53,700
well as audio support

500
00:33:53,700 --> 00:33:55,440
and then it also has Hardware level

501
00:33:55,440 --> 00:33:57,539
security features which are important to

502
00:33:57,539 --> 00:33:59,340
protect both the robot and the people

503
00:33:59,340 --> 00:34:02,039
around the robot

504
00:34:02,039 --> 00:34:04,740
so now that we have our sort of core

505
00:34:04,740 --> 00:34:06,419
we're going to need some limbs on this

506
00:34:06,419 --> 00:34:09,000
guy and we'd love to show you a little

507
00:34:09,000 --> 00:34:10,739
bit about our actuators and our fully

508
00:34:10,739 --> 00:34:13,739
functional hands as well but before we

509
00:34:13,739 --> 00:34:15,300
do that I'd like to introduce Malcolm

510
00:34:15,300 --> 00:34:16,440
who's going to speak a little bit about

511
00:34:16,440 --> 00:34:19,719
our structural foundation for the robot

512
00:34:19,719 --> 00:34:24,540
[Applause]

513
00:34:24,540 --> 00:34:27,080
thank you

514
00:34:29,580 --> 00:34:31,619
Tesla have the capability to finalize

515
00:34:31,619 --> 00:34:34,139
highly complex systems it does get much

516
00:34:34,139 --> 00:34:36,480
more complex than a crash you can see

517
00:34:36,480 --> 00:34:38,780
here a simulated crash on model 3

518
00:34:38,780 --> 00:34:40,500
superimposed on top of the actual

519
00:34:40,500 --> 00:34:41,760
physical crash

520
00:34:41,760 --> 00:34:43,800
it's actually incredible how um how

521
00:34:43,800 --> 00:34:45,839
accurate it is just to give you an idea

522
00:34:45,839 --> 00:34:47,699
of the complexity of this model

523
00:34:47,699 --> 00:34:49,918
it includes every knot Bolton washer

524
00:34:49,918 --> 00:34:52,679
every spot Weld and it has 35 million

525
00:34:52,679 --> 00:34:55,379
degrees of freedom it's quite amazing

526
00:34:55,379 --> 00:34:57,060
and it's true to say that if we didn't

527
00:34:57,060 --> 00:34:58,680
have models like this we wouldn't be

528
00:34:58,680 --> 00:34:59,940
able to make the safest cars in the

529
00:34:59,940 --> 00:35:01,140
world

530
00:35:01,140 --> 00:35:03,480
so can we utilize our capabilities and

531
00:35:03,480 --> 00:35:06,000
our methods from the automotive side to

532
00:35:06,000 --> 00:35:09,440
influence a robot

533
00:35:09,720 --> 00:35:12,240
well we can make a model and since we

534
00:35:12,240 --> 00:35:13,740
had crash software we used the same

535
00:35:13,740 --> 00:35:15,720
software here we can make it fall down

536
00:35:15,720 --> 00:35:17,880
the purpose of this is to make sure that

537
00:35:17,880 --> 00:35:20,579
if it falls down ideally it doesn't but

538
00:35:20,579 --> 00:35:22,859
it's superficial damage

539
00:35:22,859 --> 00:35:25,079
we don't want to for example break its

540
00:35:25,079 --> 00:35:27,240
gearbox at its arms that's equivalent of

541
00:35:27,240 --> 00:35:29,119
a dislocated shoulder of a robot

542
00:35:29,119 --> 00:35:31,800
difficult and expensive to fix

543
00:35:31,800 --> 00:35:33,960
so we wanted to dust itself off get on

544
00:35:33,960 --> 00:35:37,160
with a job that's been given

545
00:35:37,920 --> 00:35:39,960
if we could also take the same model and

546
00:35:39,960 --> 00:35:42,540
we can drive the actuators using the

547
00:35:42,540 --> 00:35:45,420
input from a previously solved model

548
00:35:45,420 --> 00:35:47,280
bringing it to life

549
00:35:47,280 --> 00:35:49,980
so this is producing the Motions for the

550
00:35:49,980 --> 00:35:51,900
tasks we want the robot to do these

551
00:35:51,900 --> 00:35:53,940
tasks are picking up boxes turning

552
00:35:53,940 --> 00:35:56,220
squatting walking upstairs whatever the

553
00:35:56,220 --> 00:35:58,380
set of tasks are we can play to the

554
00:35:58,380 --> 00:36:00,060
model this is showing just simple

555
00:36:00,060 --> 00:36:02,880
walking we can create the stresses in

556
00:36:02,880 --> 00:36:04,619
all the components that helps us to

557
00:36:04,619 --> 00:36:07,760
optimize the components

558
00:36:08,640 --> 00:36:11,040
these are not dancing robots these are

559
00:36:11,040 --> 00:36:12,480
actually the modal Behavior the first

560
00:36:12,480 --> 00:36:15,000
five modes of the robot and typically

561
00:36:15,000 --> 00:36:17,160
when people make robots they make sure

562
00:36:17,160 --> 00:36:19,740
the first mode is up around the top

563
00:36:19,740 --> 00:36:22,320
single figures up towards 10 Hertz

564
00:36:22,320 --> 00:36:24,180
who is it do this is to make the

565
00:36:24,180 --> 00:36:26,339
controls of walking easier it's very

566
00:36:26,339 --> 00:36:27,720
difficult to walk if you can't guarantee

567
00:36:27,720 --> 00:36:30,119
where your foot wobbling around

568
00:36:30,119 --> 00:36:32,339
that's okay to make one robot we want to

569
00:36:32,339 --> 00:36:34,320
make thousands maybe Millions

570
00:36:34,320 --> 00:36:36,119
we haven't got the luxury of making them

571
00:36:36,119 --> 00:36:38,339
from carbon fiber titanium we want to

572
00:36:38,339 --> 00:36:39,839
make them on plastic things are not

573
00:36:39,839 --> 00:36:41,700
quite so stiff

574
00:36:41,700 --> 00:36:44,220
so we can't have these high targets I'll

575
00:36:44,220 --> 00:36:46,680
call them dumb targets

576
00:36:46,680 --> 00:36:48,300
we've got to make them work at lower

577
00:36:48,300 --> 00:36:50,760
targets so is that is that going to work

578
00:36:50,760 --> 00:36:52,980
well if you think about it sorry about

579
00:36:52,980 --> 00:36:55,740
this but we're just bags of soggy jelly

580
00:36:55,740 --> 00:36:57,480
and Bones thrown in

581
00:36:57,480 --> 00:36:59,400
we're not high frequency if I stand on

582
00:36:59,400 --> 00:37:02,820
my leg I don't vibrate at 10 Hertz

583
00:37:02,820 --> 00:37:05,760
we people operate at low frequency so we

584
00:37:05,760 --> 00:37:07,140
know the robot actually can it just

585
00:37:07,140 --> 00:37:09,180
makes controls harder so we take the

586
00:37:09,180 --> 00:37:12,300
information from this the modal data and

587
00:37:12,300 --> 00:37:13,680
the stiffness and feed that into the

588
00:37:13,680 --> 00:37:17,480
control system that allows it to walk

589
00:37:18,000 --> 00:37:20,460
just changing tax slightly looking at

590
00:37:20,460 --> 00:37:21,420
the knee

591
00:37:21,420 --> 00:37:23,400
we could take some inspiration from

592
00:37:23,400 --> 00:37:25,500
biology and we can look to see what the

593
00:37:25,500 --> 00:37:27,960
mechanical advantages of the knee is it

594
00:37:27,960 --> 00:37:29,400
turns out it actually represents quite

595
00:37:29,400 --> 00:37:31,440
similar to the four bar link and that's

596
00:37:31,440 --> 00:37:33,180
quite non-linear

597
00:37:33,180 --> 00:37:34,740
that's not surprising really because if

598
00:37:34,740 --> 00:37:36,300
you think when you bend your leg down

599
00:37:36,300 --> 00:37:38,520
the torque on your knee is much more

600
00:37:38,520 --> 00:37:40,140
when it's bent than it is when it's

601
00:37:40,140 --> 00:37:41,040
straight

602
00:37:41,040 --> 00:37:42,900
so you'd expect a non-linear function

603
00:37:42,900 --> 00:37:46,260
and in fact the biology is non-linear

604
00:37:46,260 --> 00:37:49,820
this matches it quite accurately

605
00:37:50,040 --> 00:37:51,720
so that's the representation the four by

606
00:37:51,720 --> 00:37:53,040
link is obviously not physically four

607
00:37:53,040 --> 00:37:54,900
bar link as I said the characteristics

608
00:37:54,900 --> 00:37:57,839
are similar but me betting down that's

609
00:37:57,839 --> 00:37:59,700
not very scientific let's be a bit more

610
00:37:59,700 --> 00:38:02,820
scientific we've played all the tasks

611
00:38:02,820 --> 00:38:04,800
through the through this graph but this

612
00:38:04,800 --> 00:38:06,960
is showing pickets of walking squatting

613
00:38:06,960 --> 00:38:09,720
the tasks I said we did on the stress

614
00:38:09,720 --> 00:38:13,560
and that's the uh the talk a scene at

615
00:38:13,560 --> 00:38:15,839
the knee against the knee bend on the

616
00:38:15,839 --> 00:38:17,820
horizontal axis this is showing the

617
00:38:17,820 --> 00:38:19,500
requirement for the knee to do all these

618
00:38:19,500 --> 00:38:21,960
tasks and then put a curve through it

619
00:38:21,960 --> 00:38:24,240
surfing over the top of the Peaks and

620
00:38:24,240 --> 00:38:26,220
that's saying this is what's required to

621
00:38:26,220 --> 00:38:29,780
make the robot do these tasks

622
00:38:32,040 --> 00:38:33,960
so if we look at the four bar link

623
00:38:33,960 --> 00:38:36,359
that's actually the green curve and it's

624
00:38:36,359 --> 00:38:37,980
saying that the non-linearity of the

625
00:38:37,980 --> 00:38:40,800
four by link is actually linearized the

626
00:38:40,800 --> 00:38:42,720
characteristic of the force what that

627
00:38:42,720 --> 00:38:44,280
really says is that's lowered the force

628
00:38:44,280 --> 00:38:45,960
that's what makes the actuator have the

629
00:38:45,960 --> 00:38:47,760
lowest possible Force which is the most

630
00:38:47,760 --> 00:38:49,260
efficient we want to burn energy up

631
00:38:49,260 --> 00:38:50,160
slowly

632
00:38:50,160 --> 00:38:52,200
what's the blue curve well the blue

633
00:38:52,200 --> 00:38:53,700
curve is actually if we didn't have a

634
00:38:53,700 --> 00:38:55,380
four bar link we just had an arm

635
00:38:55,380 --> 00:38:57,720
sticking out of my leg here with a with

636
00:38:57,720 --> 00:39:00,420
an actuator on it a simple two bar link

637
00:39:00,420 --> 00:39:02,280
that's the best you could do with a

638
00:39:02,280 --> 00:39:04,140
simple two bar link and it shows that

639
00:39:04,140 --> 00:39:05,820
that would create much more force in the

640
00:39:05,820 --> 00:39:09,680
actuator which would not be efficient

641
00:39:09,780 --> 00:39:11,820
so what's that look like in practice

642
00:39:11,820 --> 00:39:13,619
well

643
00:39:13,619 --> 00:39:15,540
as you'll see but it's very tightly

644
00:39:15,540 --> 00:39:17,280
packaged in the knee you'll see a good

645
00:39:17,280 --> 00:39:18,780
transparent in a second you'll see the

646
00:39:18,780 --> 00:39:20,640
full bar link there it's operating on

647
00:39:20,640 --> 00:39:22,560
the actuator this is determined the

648
00:39:22,560 --> 00:39:24,720
force and the displacements on the

649
00:39:24,720 --> 00:39:25,980
actuator

650
00:39:25,980 --> 00:39:28,079
and now pass you over to concertina to

651
00:39:28,079 --> 00:39:29,339
tell you a lot more detail about how

652
00:39:29,339 --> 00:39:31,380
these actuators are made and designed

653
00:39:31,380 --> 00:39:34,260
optimized thank you

654
00:39:34,260 --> 00:39:35,840
thank you Michael

655
00:39:35,840 --> 00:39:41,220
[Applause]

656
00:39:41,220 --> 00:39:43,740
so I am I would like to talk to you

657
00:39:43,740 --> 00:39:44,880
about

658
00:39:44,880 --> 00:39:47,280
um the design process and the actuator

659
00:39:47,280 --> 00:39:48,540
portfolio

660
00:39:48,540 --> 00:39:50,820
uh in our robot

661
00:39:50,820 --> 00:39:52,920
so there are many similarities between a

662
00:39:52,920 --> 00:39:54,180
car and the robot when it comes to

663
00:39:54,180 --> 00:39:55,560
powertrain design

664
00:39:55,560 --> 00:39:57,720
the the most important thing that

665
00:39:57,720 --> 00:40:01,200
matters here is energy mass and cost

666
00:40:01,200 --> 00:40:03,000
we are carrying over most of our

667
00:40:03,000 --> 00:40:05,339
designing experience from the car to the

668
00:40:05,339 --> 00:40:07,640
robot

669
00:40:08,820 --> 00:40:11,640
so in the particular case you see a car

670
00:40:11,640 --> 00:40:15,359
with two drive units and the drive units

671
00:40:15,359 --> 00:40:17,160
are used in order to accelerate the car

672
00:40:17,160 --> 00:40:20,460
0 to 60 miles per hour time or drive a

673
00:40:20,460 --> 00:40:25,020
cities Drive site while the robot that

674
00:40:25,020 --> 00:40:28,140
has 28 actuators and

675
00:40:28,140 --> 00:40:30,780
it's not obvious what are the tasks at

676
00:40:30,780 --> 00:40:34,320
the actuator level so we have tasks that

677
00:40:34,320 --> 00:40:36,300
are higher level like walking or

678
00:40:36,300 --> 00:40:39,119
climbing stairs or carrying a heavy

679
00:40:39,119 --> 00:40:41,400
object which need to be translated into

680
00:40:41,400 --> 00:40:45,660
joint into joint specs therefore we use

681
00:40:45,660 --> 00:40:46,980
our model

682
00:40:46,980 --> 00:40:50,240
that generates the torque speed

683
00:40:50,240 --> 00:40:52,680
trajectories for our joints which

684
00:40:52,680 --> 00:40:54,540
subsequently is going to be fed in our

685
00:40:54,540 --> 00:40:57,780
optimization model and to run through

686
00:40:57,780 --> 00:41:00,859
the optimization process

687
00:41:01,500 --> 00:41:04,020
this is one of the scenarios that the

688
00:41:04,020 --> 00:41:05,640
robot is capable of doing which is

689
00:41:05,640 --> 00:41:07,920
turning and walking

690
00:41:07,920 --> 00:41:10,079
so when we have this torque speed

691
00:41:10,079 --> 00:41:12,599
trajectory we laid over an efficiency

692
00:41:12,599 --> 00:41:15,480
map of an actuator and we are able along

693
00:41:15,480 --> 00:41:19,560
the trajectory to generate the power

694
00:41:19,560 --> 00:41:22,920
consumption and the energy accumulative

695
00:41:22,920 --> 00:41:26,099
energy for the task versus time

696
00:41:26,099 --> 00:41:28,440
so this allows us to define the system

697
00:41:28,440 --> 00:41:30,960
cost for the particular actuator and put

698
00:41:30,960 --> 00:41:34,500
a simple Point into the cloud then we do

699
00:41:34,500 --> 00:41:35,880
this for hundreds of thousands of

700
00:41:35,880 --> 00:41:39,000
actuators by solving in our cluster and

701
00:41:39,000 --> 00:41:40,680
the red line denotes the Pareto front

702
00:41:40,680 --> 00:41:43,260
which is the preferred area where we

703
00:41:43,260 --> 00:41:46,500
will look for optimal so the X denotes

704
00:41:46,500 --> 00:41:48,839
the preferred actuator design we have

705
00:41:48,839 --> 00:41:51,240
picked for this particular joint so now

706
00:41:51,240 --> 00:41:53,460
we need to do this for every joint we

707
00:41:53,460 --> 00:41:56,700
have 28 joints to optimize and we parse

708
00:41:56,700 --> 00:41:58,020
our cloud

709
00:41:58,020 --> 00:42:01,079
we parse our Cloud again for every joint

710
00:42:01,079 --> 00:42:04,020
spec and the red axis this time denotes

711
00:42:04,020 --> 00:42:06,599
the bespoke actuator designs for every

712
00:42:06,599 --> 00:42:09,900
joint the problem here is that we have

713
00:42:09,900 --> 00:42:12,359
too many unique actuator designs and

714
00:42:12,359 --> 00:42:13,980
even if we take advantage of the

715
00:42:13,980 --> 00:42:16,260
Symmetry still there are too many in

716
00:42:16,260 --> 00:42:18,060
order to make something Mass

717
00:42:18,060 --> 00:42:20,700
manufacturable we need to be able to

718
00:42:20,700 --> 00:42:22,740
reduce the amount of unique actuator

719
00:42:22,740 --> 00:42:24,900
designs therefore we run something

720
00:42:24,900 --> 00:42:27,900
called commonality study which we parse

721
00:42:27,900 --> 00:42:30,720
our Cloud again looking this time for

722
00:42:30,720 --> 00:42:33,180
actuators that simultaneously Meet The

723
00:42:33,180 --> 00:42:35,460
Joint performance requirements for more

724
00:42:35,460 --> 00:42:37,800
than one joint at the same time so the

725
00:42:37,800 --> 00:42:40,200
resulting portfolio is six actuators and

726
00:42:40,200 --> 00:42:41,760
they show in a color map the middle

727
00:42:41,760 --> 00:42:43,380
figure

728
00:42:43,380 --> 00:42:44,099
um

729
00:42:44,099 --> 00:42:47,280
and the actuators can be also viewed in

730
00:42:47,280 --> 00:42:50,099
this slide we have three rotary and

731
00:42:50,099 --> 00:42:53,760
three linear actuators all of which have

732
00:42:53,760 --> 00:42:54,839
a great

733
00:42:54,839 --> 00:42:59,339
output force or Torque per Mass

734
00:42:59,339 --> 00:43:01,560
the rotary actuator in particular has a

735
00:43:01,560 --> 00:43:03,540
mechanical clutch integrated

736
00:43:03,540 --> 00:43:05,579
on the high speed side angular contact

737
00:43:05,579 --> 00:43:08,700
ball bearing and on the high speed side

738
00:43:08,700 --> 00:43:11,760
and on the low speed side a cross roller

739
00:43:11,760 --> 00:43:14,640
bearing and the gear train is a strain

740
00:43:14,640 --> 00:43:16,380
wave gear

741
00:43:16,380 --> 00:43:19,980
and there are three integrated sensors

742
00:43:19,980 --> 00:43:22,560
here and the bespoke permanent magnet

743
00:43:22,560 --> 00:43:24,740
machine

744
00:43:24,960 --> 00:43:28,339
the linear actuator

745
00:43:31,560 --> 00:43:33,599
I'm sorry

746
00:43:33,599 --> 00:43:36,000
the linear actuator has planetary

747
00:43:36,000 --> 00:43:39,119
rollers and an inverted planetary Screw

748
00:43:39,119 --> 00:43:41,339
As a gear train which allows efficiency

749
00:43:41,339 --> 00:43:44,160
and compaction and durability

750
00:43:44,160 --> 00:43:47,280
so in order to demonstrate the force

751
00:43:47,280 --> 00:43:49,680
capability of our linear actuators we

752
00:43:49,680 --> 00:43:53,880
have set up an experiment in order to

753
00:43:53,880 --> 00:43:57,680
test it under its limits

754
00:43:58,560 --> 00:44:00,119
and

755
00:44:00,119 --> 00:44:03,859
I will let you enjoy the video

756
00:44:07,680 --> 00:44:12,619
so our actuator is able to lift

757
00:44:19,260 --> 00:44:21,119
a half tone

758
00:44:21,119 --> 00:44:25,640
nine foot concert grand piano

759
00:44:25,859 --> 00:44:28,579
and

760
00:44:30,960 --> 00:44:34,020
this is a requirement it's not something

761
00:44:34,020 --> 00:44:36,839
nice to have because our muscles can do

762
00:44:36,839 --> 00:44:38,880
the same when they are direct driven

763
00:44:38,880 --> 00:44:41,400
when they are directly driven or

764
00:44:41,400 --> 00:44:43,619
quadricep muscles can do the same thing

765
00:44:43,619 --> 00:44:46,740
it's just that the knee is an up gearing

766
00:44:46,740 --> 00:44:49,140
linkage system that converts the force

767
00:44:49,140 --> 00:44:51,480
into velocity at the end effector of our

768
00:44:51,480 --> 00:44:54,300
Hills for purposes of giving to the

769
00:44:54,300 --> 00:44:56,280
human body agility

770
00:44:56,280 --> 00:44:58,619
so this is one of the main things that

771
00:44:58,619 --> 00:45:01,140
are amazing about the human body and I'm

772
00:45:01,140 --> 00:45:02,880
concluding my part at this point and I

773
00:45:02,880 --> 00:45:04,380
would like to welcome my colleague Mike

774
00:45:04,380 --> 00:45:06,420
who's going to talk to you about hand

775
00:45:06,420 --> 00:45:09,740
design thank you very much

776
00:45:10,079 --> 00:45:13,280
thanks constantinos

777
00:45:13,319 --> 00:45:15,720
so we just saw how powerful a human and

778
00:45:15,720 --> 00:45:18,119
a humanoid actuator can be

779
00:45:18,119 --> 00:45:19,260
however

780
00:45:19,260 --> 00:45:23,480
humans are also incredibly dexterous

781
00:45:23,700 --> 00:45:25,319
the human hand has the ability to move

782
00:45:25,319 --> 00:45:27,599
at 300 degrees per second

783
00:45:27,599 --> 00:45:29,819
it has tens of thousands of tactile

784
00:45:29,819 --> 00:45:31,140
sensors

785
00:45:31,140 --> 00:45:32,940
and it has the ability to grasp and

786
00:45:32,940 --> 00:45:34,800
manipulate almost every object in our

787
00:45:34,800 --> 00:45:36,900
daily lives

788
00:45:36,900 --> 00:45:38,819
for our robotic hand design we were

789
00:45:38,819 --> 00:45:40,319
inspired by biology

790
00:45:40,319 --> 00:45:43,319
we have five fingers an opposable thumb

791
00:45:43,319 --> 00:45:45,359
our fingers are driven by metallic

792
00:45:45,359 --> 00:45:47,040
tendons that are both flexible and

793
00:45:47,040 --> 00:45:48,240
strong

794
00:45:48,240 --> 00:45:49,859
we have the ability to complete wide

795
00:45:49,859 --> 00:45:52,260
aperture power grasps while also being

796
00:45:52,260 --> 00:45:54,119
optimized for precision gripping of

797
00:45:54,119 --> 00:45:57,480
small thin and delicate objects

798
00:45:57,480 --> 00:46:00,240
so why a human like robotic hand

799
00:46:00,240 --> 00:46:01,800
well the main reason is that our

800
00:46:01,800 --> 00:46:03,480
factories and the world around us is

801
00:46:03,480 --> 00:46:05,579
designed to be ergonomic

802
00:46:05,579 --> 00:46:07,140
so what that means is that it ensures

803
00:46:07,140 --> 00:46:08,339
that objects in our Factory are

804
00:46:08,339 --> 00:46:09,480
graspable

805
00:46:09,480 --> 00:46:11,400
but it also ensures that new objects

806
00:46:11,400 --> 00:46:13,560
that we may have never seen before can

807
00:46:13,560 --> 00:46:15,960
be grasped by the human hand and by our

808
00:46:15,960 --> 00:46:17,940
robotic hand as well

809
00:46:17,940 --> 00:46:19,500
the converse there is is pretty

810
00:46:19,500 --> 00:46:20,880
interesting because it's saying that

811
00:46:20,880 --> 00:46:22,260
these objects are designed to our hand

812
00:46:22,260 --> 00:46:23,880
instead of having to make changes to our

813
00:46:23,880 --> 00:46:27,440
hand to accompany a new object

814
00:46:27,480 --> 00:46:28,980
some basic stats about our hand is that

815
00:46:28,980 --> 00:46:30,720
has six actuators and 11 degrees of

816
00:46:30,720 --> 00:46:31,560
freedom

817
00:46:31,560 --> 00:46:33,900
it has an in-hand controller which

818
00:46:33,900 --> 00:46:36,300
drives the fingers and receives sensor

819
00:46:36,300 --> 00:46:37,319
feedback

820
00:46:37,319 --> 00:46:39,060
sensor feedback is really important to

821
00:46:39,060 --> 00:46:40,020
learn a little bit more about the

822
00:46:40,020 --> 00:46:41,520
objects that we're grasping

823
00:46:41,520 --> 00:46:43,800
and also for proprioception and that's

824
00:46:43,800 --> 00:46:45,660
the ability for us to recognize where

825
00:46:45,660 --> 00:46:48,240
our hand is in space

826
00:46:48,240 --> 00:46:49,920
one of the important aspects of our hand

827
00:46:49,920 --> 00:46:52,440
is that it's adaptive this adaptability

828
00:46:52,440 --> 00:46:54,119
is involved essentially as complex

829
00:46:54,119 --> 00:46:55,619
mechanisms that allow the hand to adapt

830
00:46:55,619 --> 00:46:58,260
to the objects that's being grasped

831
00:46:58,260 --> 00:47:00,060
another important part is that we have a

832
00:47:00,060 --> 00:47:02,099
non-back drivable finger drive this

833
00:47:02,099 --> 00:47:03,720
clutching mechanism allows us to hold

834
00:47:03,720 --> 00:47:05,640
and transport objects without having to

835
00:47:05,640 --> 00:47:07,920
turn on the hand Motors

836
00:47:07,920 --> 00:47:09,420
you just heard how we went about going

837
00:47:09,420 --> 00:47:11,760
we went about designing the Tesla bot

838
00:47:11,760 --> 00:47:13,680
Hardware now we'll hand it off to Milan

839
00:47:13,680 --> 00:47:15,060
and our autonomy team to bring this

840
00:47:15,060 --> 00:47:17,720
robot to life

841
00:47:18,359 --> 00:47:21,079
thanks Mike

842
00:47:24,540 --> 00:47:26,099
all right

843
00:47:26,099 --> 00:47:28,140
um so all those cool things we've shown

844
00:47:28,140 --> 00:47:30,780
earlier in the video were posted

845
00:47:30,780 --> 00:47:32,339
possible just in a matter of a few

846
00:47:32,339 --> 00:47:34,200
months thanks to the amazing word that

847
00:47:34,200 --> 00:47:35,760
we've done autopilot over the past few

848
00:47:35,760 --> 00:47:36,780
years

849
00:47:36,780 --> 00:47:38,700
most of those components ported quite

850
00:47:38,700 --> 00:47:41,099
easily over to the Bots environment if

851
00:47:41,099 --> 00:47:42,660
you think about it we're just moving

852
00:47:42,660 --> 00:47:44,700
from a robot on Wheels to a robot on

853
00:47:44,700 --> 00:47:47,099
legs so some of those components are

854
00:47:47,099 --> 00:47:48,720
pretty similar and some other require

855
00:47:48,720 --> 00:47:51,300
more heavy lifting

856
00:47:51,300 --> 00:47:53,040
so for example our computer vision

857
00:47:53,040 --> 00:47:54,920
neural networks

858
00:47:54,920 --> 00:47:57,599
reported directly from autopilot to the

859
00:47:57,599 --> 00:47:59,460
Bots situation

860
00:47:59,460 --> 00:48:01,500
it's exactly the same occupancy Network

861
00:48:01,500 --> 00:48:03,599
that we're talking to a little bit more

862
00:48:03,599 --> 00:48:05,220
details later with the autopilot team

863
00:48:05,220 --> 00:48:07,020
that is now running on the bot here in

864
00:48:07,020 --> 00:48:09,119
this video the only thing that changed

865
00:48:09,119 --> 00:48:10,560
really is the training data that we had

866
00:48:10,560 --> 00:48:13,160
to recollect

867
00:48:14,099 --> 00:48:15,900
we're also trying to find ways to

868
00:48:15,900 --> 00:48:19,020
improve those occupancy networks using

869
00:48:19,020 --> 00:48:21,960
work made on your Radiance fields to get

870
00:48:21,960 --> 00:48:24,780
really great volumetric rendering of the

871
00:48:24,780 --> 00:48:27,000
Bots environments for example here some

872
00:48:27,000 --> 00:48:28,740
machine read that the bot might have to

873
00:48:28,740 --> 00:48:31,700
interact with

874
00:48:32,099 --> 00:48:33,960
another interesting problem to think

875
00:48:33,960 --> 00:48:36,720
about is in indoor environments mostly

876
00:48:36,720 --> 00:48:39,720
with that sense of GPS signal how do you

877
00:48:39,720 --> 00:48:41,460
get about to navigate to its destination

878
00:48:41,460 --> 00:48:44,040
say for instance to find its nearest

879
00:48:44,040 --> 00:48:46,560
charging station so we've been training

880
00:48:46,560 --> 00:48:49,440
more neural networks to identify high

881
00:48:49,440 --> 00:48:52,079
frequency features key points within the

882
00:48:52,079 --> 00:48:54,359
Bots camera streams and track them

883
00:48:54,359 --> 00:48:56,640
across frames over time as the bot

884
00:48:56,640 --> 00:48:58,980
navigates to its its environment

885
00:48:58,980 --> 00:49:00,960
and we're using those points to get a

886
00:49:00,960 --> 00:49:03,839
better estimate of the Bots pose and

887
00:49:03,839 --> 00:49:05,579
trajectory within its environment as

888
00:49:05,579 --> 00:49:08,060
it's walking

889
00:49:09,240 --> 00:49:10,920
we also did quite some work on the

890
00:49:10,920 --> 00:49:12,839
simulation side and this is literally

891
00:49:12,839 --> 00:49:15,300
the autopilot simulator uh to which

892
00:49:15,300 --> 00:49:17,339
we've integrated the robot's Locomotion

893
00:49:17,339 --> 00:49:20,520
code and this is a video of the motion

894
00:49:20,520 --> 00:49:22,079
control code running in the operator

895
00:49:22,079 --> 00:49:24,300
simulator simulator showing the

896
00:49:24,300 --> 00:49:26,940
evolution of the robots walk over time

897
00:49:26,940 --> 00:49:28,500
and so as you can see we started quite

898
00:49:28,500 --> 00:49:30,540
slowly in April and start accelerating

899
00:49:30,540 --> 00:49:33,060
as we unlock more joints and deeper more

900
00:49:33,060 --> 00:49:34,800
Advanced Techniques like arms balancing

901
00:49:34,800 --> 00:49:37,140
over the past few months

902
00:49:37,140 --> 00:49:39,300
and so Locomotion is specifically one

903
00:49:39,300 --> 00:49:41,579
component that's very different as we're

904
00:49:41,579 --> 00:49:42,960
moving from the car to the Bots

905
00:49:42,960 --> 00:49:45,240
environment and so I think it warrants a

906
00:49:45,240 --> 00:49:46,619
little bit more depth and I'd like my

907
00:49:46,619 --> 00:49:48,060
colleagues to start talking about this

908
00:49:48,060 --> 00:49:50,240
now

909
00:49:50,520 --> 00:49:53,520
foreign

910
00:49:58,040 --> 00:50:00,780
hi everyone I'm Felix I'm a robotics

911
00:50:00,780 --> 00:50:02,640
engineer on the project and I'm going to

912
00:50:02,640 --> 00:50:04,819
talk about walking

913
00:50:04,819 --> 00:50:07,859
seems easy right people do it every day

914
00:50:07,859 --> 00:50:10,079
you don't even have to think about it

915
00:50:10,079 --> 00:50:12,359
but there are some aspects of walking

916
00:50:12,359 --> 00:50:14,579
which are challenging from engineering

917
00:50:14,579 --> 00:50:16,980
perspective for example

918
00:50:16,980 --> 00:50:19,740
physical self-awareness that means

919
00:50:19,740 --> 00:50:21,660
having a good representation of yourself

920
00:50:21,660 --> 00:50:24,119
what is the length of your limbs what is

921
00:50:24,119 --> 00:50:26,040
the mass of your limbs what is the size

922
00:50:26,040 --> 00:50:28,500
of your feet all that matters

923
00:50:28,500 --> 00:50:31,859
also having an energy efficient gate you

924
00:50:31,859 --> 00:50:33,420
can imagine there's different styles of

925
00:50:33,420 --> 00:50:35,040
walking and all of them are equally

926
00:50:35,040 --> 00:50:37,260
efficient

927
00:50:37,260 --> 00:50:41,160
most important keep balance don't fall

928
00:50:41,160 --> 00:50:43,200
and of course also coordinate the motion

929
00:50:43,200 --> 00:50:45,599
of all of your limbs together

930
00:50:45,599 --> 00:50:47,940
so now humans do all of this naturally

931
00:50:47,940 --> 00:50:50,819
but as Engineers or roboticists we have

932
00:50:50,819 --> 00:50:53,280
to think about these problems and if I'm

933
00:50:53,280 --> 00:50:54,780
going to show you how we address them in

934
00:50:54,780 --> 00:50:56,099
our Locomotion planning and control

935
00:50:56,099 --> 00:50:57,300
stack

936
00:50:57,300 --> 00:51:00,540
so we start with Locomotion planning and

937
00:51:00,540 --> 00:51:02,280
our representation of the bond that

938
00:51:02,280 --> 00:51:03,480
means the model of the robot's

939
00:51:03,480 --> 00:51:05,700
kinematics Dynamics and the contact

940
00:51:05,700 --> 00:51:07,260
properties

941
00:51:07,260 --> 00:51:09,780
and using that model and the desired

942
00:51:09,780 --> 00:51:12,480
path for the Bots our Locomotion planner

943
00:51:12,480 --> 00:51:14,520
generates reference trajectories for the

944
00:51:14,520 --> 00:51:16,440
entire system

945
00:51:16,440 --> 00:51:18,780
this means feasible trajectories with

946
00:51:18,780 --> 00:51:22,440
respect to the assumptions of our model

947
00:51:22,440 --> 00:51:24,180
the planner currently Works in three

948
00:51:24,180 --> 00:51:26,819
stages it starts planning footsteps and

949
00:51:26,819 --> 00:51:29,460
ends with the entire motion photo system

950
00:51:29,460 --> 00:51:31,559
and let's dive a little bit deeper in

951
00:51:31,559 --> 00:51:34,400
how this works so in this video we see

952
00:51:34,400 --> 00:51:36,540
footsteps being planned over planning

953
00:51:36,540 --> 00:51:39,359
Horizon following the desired path

954
00:51:39,359 --> 00:51:42,540
and we start from this and add then for

955
00:51:42,540 --> 00:51:44,040
trajectories that connect these

956
00:51:44,040 --> 00:51:46,680
footsteps using toe off and yield strike

957
00:51:46,680 --> 00:51:49,740
just as the humans just as humans do

958
00:51:49,740 --> 00:51:52,079
and this gives us a larger stride and

959
00:51:52,079 --> 00:51:53,940
less knee Bend for high efficiency of

960
00:51:53,940 --> 00:51:55,500
the system

961
00:51:55,500 --> 00:51:57,599
the last stage is then finding a center

962
00:51:57,599 --> 00:52:00,180
of mass trajectory which gives us a fee

963
00:52:00,180 --> 00:52:01,859
dynamically feasible motion of the

964
00:52:01,859 --> 00:52:04,380
entire system to keep balance

965
00:52:04,380 --> 00:52:07,319
as we all know plans are good but we

966
00:52:07,319 --> 00:52:09,059
also have to realize them in reality

967
00:52:09,059 --> 00:52:11,099
let's say you know see how we can do

968
00:52:11,099 --> 00:52:13,280
this

969
00:52:15,960 --> 00:52:19,130
[Applause]

970
00:52:20,160 --> 00:52:23,040
thank you Felix hello everyone my name

971
00:52:23,040 --> 00:52:24,599
is Anand and I'm going to talk to you

972
00:52:24,599 --> 00:52:26,520
about controls

973
00:52:26,520 --> 00:52:29,579
so let's take the motion plan that Felix

974
00:52:29,579 --> 00:52:31,920
just talked about and put it in the real

975
00:52:31,920 --> 00:52:34,200
world on a real robot let's see what

976
00:52:34,200 --> 00:52:36,380
happens

977
00:52:37,260 --> 00:52:39,240
it takes a couple steps

978
00:52:39,240 --> 00:52:41,040
and falls down

979
00:52:41,040 --> 00:52:43,020
well that's a little disappointing

980
00:52:43,020 --> 00:52:45,359
but we are missing a few key pieces here

981
00:52:45,359 --> 00:52:48,300
which will make it work

982
00:52:48,300 --> 00:52:51,480
now as Felix mentioned the motion

983
00:52:51,480 --> 00:52:53,760
planner is using an idealized version of

984
00:52:53,760 --> 00:52:56,280
itself and a version of reality around

985
00:52:56,280 --> 00:52:57,599
it

986
00:52:57,599 --> 00:52:59,640
this is not exactly correct

987
00:52:59,640 --> 00:53:03,720
it also expresses its intention through

988
00:53:03,720 --> 00:53:06,180
trajectories and wrenches branches of

989
00:53:06,180 --> 00:53:08,280
forces and torques that it wants to

990
00:53:08,280 --> 00:53:12,240
exert on the World to locomote

991
00:53:12,240 --> 00:53:15,599
reality is way more complex than any

992
00:53:15,599 --> 00:53:18,059
similar model also the robot is not

993
00:53:18,059 --> 00:53:21,140
simplified it's got vibrations and modes

994
00:53:21,140 --> 00:53:24,000
compliance sensor noise and on and on

995
00:53:24,000 --> 00:53:25,859
and on

996
00:53:25,859 --> 00:53:27,480
so what does that do to the real world

997
00:53:27,480 --> 00:53:30,119
when you put the bot in the real world

998
00:53:30,119 --> 00:53:32,880
well the unexpected forces cause

999
00:53:32,880 --> 00:53:35,099
unmodled Dynamics which essentially the

1000
00:53:35,099 --> 00:53:36,839
planner doesn't know about and that

1001
00:53:36,839 --> 00:53:38,540
causes destabilization

1002
00:53:38,540 --> 00:53:41,160
especially For A system that is

1003
00:53:41,160 --> 00:53:44,339
dynamically stable like biped locomotion

1004
00:53:44,339 --> 00:53:47,160
so what can we do about it well we

1005
00:53:47,160 --> 00:53:48,480
measure reality

1006
00:53:48,480 --> 00:53:50,700
we use sensors and our understanding of

1007
00:53:50,700 --> 00:53:53,460
the world to do state estimation and

1008
00:53:53,460 --> 00:53:55,619
status to me here you can see the

1009
00:53:55,619 --> 00:53:57,300
attitude and pelvis pose which is

1010
00:53:57,300 --> 00:53:59,160
essentially the vestibular system in a

1011
00:53:59,160 --> 00:54:00,420
human

1012
00:54:00,420 --> 00:54:02,280
along with the center of mass trajectory

1013
00:54:02,280 --> 00:54:04,200
being tracked when the robot's walking

1014
00:54:04,200 --> 00:54:07,020
in the office environment

1015
00:54:07,020 --> 00:54:09,599
now we have all the pieces we need in

1016
00:54:09,599 --> 00:54:11,339
order to close the loop

1017
00:54:11,339 --> 00:54:13,980
so we use our better bot model

1018
00:54:13,980 --> 00:54:16,619
we use the understanding of reality that

1019
00:54:16,619 --> 00:54:18,000
we've gained through State estimation

1020
00:54:18,000 --> 00:54:21,300
and we compare what we want versus what

1021
00:54:21,300 --> 00:54:23,280
we expect the reality we expect that

1022
00:54:23,280 --> 00:54:26,119
reality is doing to us in order to

1023
00:54:26,119 --> 00:54:29,160
add corrections to the behavior of the

1024
00:54:29,160 --> 00:54:30,480
robot

1025
00:54:30,480 --> 00:54:32,460
here the robot certainly doesn't

1026
00:54:32,460 --> 00:54:35,040
appreciate being poked but it doesn't

1027
00:54:35,040 --> 00:54:38,400
admirable job of staying upright

1028
00:54:38,400 --> 00:54:41,520
the final Point here is a robot that

1029
00:54:41,520 --> 00:54:43,559
walks is not enough

1030
00:54:43,559 --> 00:54:47,160
we needed to use its hands and arms to

1031
00:54:47,160 --> 00:54:51,380
be useful let's talk about manipulation

1032
00:54:54,720 --> 00:54:57,910
[Applause]

1033
00:55:00,599 --> 00:55:03,119
hi everyone my name is Eric robotics

1034
00:55:03,119 --> 00:55:06,240
engineer on teslabot and I want to talk

1035
00:55:06,240 --> 00:55:08,040
about how we've made the robot

1036
00:55:08,040 --> 00:55:09,900
manipulate things in the real world

1037
00:55:09,900 --> 00:55:12,300
we wanted to manipulate objects while

1038
00:55:12,300 --> 00:55:15,900
looking as natural as possible and also

1039
00:55:15,900 --> 00:55:18,180
get there quickly so what we've done is

1040
00:55:18,180 --> 00:55:20,280
we've broken this process down into two

1041
00:55:20,280 --> 00:55:22,559
steps first is generating a library of

1042
00:55:22,559 --> 00:55:25,079
natural motion references or we could

1043
00:55:25,079 --> 00:55:26,880
call them demonstrations and then we've

1044
00:55:26,880 --> 00:55:28,980
adapted these motion references online

1045
00:55:28,980 --> 00:55:32,839
to the current real world situation

1046
00:55:32,940 --> 00:55:34,140
so let's say we have a human

1047
00:55:34,140 --> 00:55:36,540
demonstration of picking up an object

1048
00:55:36,540 --> 00:55:38,280
we can get a motion capture of that

1049
00:55:38,280 --> 00:55:40,380
demonstration which is visualized right

1050
00:55:40,380 --> 00:55:42,780
here as a bunch of keyframes

1051
00:55:42,780 --> 00:55:44,520
representing the locations of the hands

1052
00:55:44,520 --> 00:55:46,079
the elbows the Torso

1053
00:55:46,079 --> 00:55:48,059
we can map that to the robot using

1054
00:55:48,059 --> 00:55:51,000
inverse kinematics and if we collect a

1055
00:55:51,000 --> 00:55:52,800
lot of these now we have a library that

1056
00:55:52,800 --> 00:55:55,400
we can work with

1057
00:55:55,559 --> 00:55:58,500
but a single demonstration is not

1058
00:55:58,500 --> 00:56:00,480
generalizable to the variation in the

1059
00:56:00,480 --> 00:56:02,400
real world for instance this would only

1060
00:56:02,400 --> 00:56:04,140
work for a box in a very particular

1061
00:56:04,140 --> 00:56:06,000
location

1062
00:56:06,000 --> 00:56:08,520
so what we've also done is run these

1063
00:56:08,520 --> 00:56:10,740
reference trajectories through a

1064
00:56:10,740 --> 00:56:12,839
trajectory optimization program which

1065
00:56:12,839 --> 00:56:15,300
solves for where the hand should be how

1066
00:56:15,300 --> 00:56:17,099
the robot should balance

1067
00:56:17,099 --> 00:56:20,460
during uh when it needs to adapt the

1068
00:56:20,460 --> 00:56:22,260
motion to the real world so for instance

1069
00:56:22,260 --> 00:56:23,880
if the box is

1070
00:56:23,880 --> 00:56:25,440
in this location

1071
00:56:25,440 --> 00:56:27,839
then our Optimizer will create this

1072
00:56:27,839 --> 00:56:30,859
trajectory instead

1073
00:56:31,380 --> 00:56:34,260
next Milan's going to talk about uh

1074
00:56:34,260 --> 00:56:36,720
what's next for the Optimus uh Tesla y

1075
00:56:36,720 --> 00:56:38,220
thanks

1076
00:56:38,220 --> 00:56:41,119
thanks Larry

1077
00:56:45,059 --> 00:56:47,339
right so hopefully by now you guys got a

1078
00:56:47,339 --> 00:56:48,540
good idea of what we've been up to over

1079
00:56:48,540 --> 00:56:50,460
the past few months

1080
00:56:50,460 --> 00:56:51,839
um we started doing something that's

1081
00:56:51,839 --> 00:56:53,819
usable but it's far from being useful

1082
00:56:53,819 --> 00:56:55,859
there's still a long and exciting road

1083
00:56:55,859 --> 00:56:57,180
ahead of us

1084
00:56:57,180 --> 00:56:57,839
um

1085
00:56:57,839 --> 00:56:59,220
I think the first thing within the next

1086
00:56:59,220 --> 00:57:02,579
few weeks is to get Optimus at least at

1087
00:57:02,579 --> 00:57:04,200
par with Bumble C the other bug

1088
00:57:04,200 --> 00:57:06,300
prototype you saw earlier and probably

1089
00:57:06,300 --> 00:57:08,880
Beyond we're also going to start

1090
00:57:08,880 --> 00:57:11,460
focusing on the real use case at one of

1091
00:57:11,460 --> 00:57:13,800
our factories and really gonna try to

1092
00:57:13,800 --> 00:57:16,859
try to nail this down and I run out all

1093
00:57:16,859 --> 00:57:18,839
the elements needed to deploy this

1094
00:57:18,839 --> 00:57:20,819
product in the real world I was

1095
00:57:20,819 --> 00:57:22,200
mentioning earlier

1096
00:57:22,200 --> 00:57:24,839
um you know indoor navigation graceful

1097
00:57:24,839 --> 00:57:27,480
for management or even servicing all

1098
00:57:27,480 --> 00:57:29,880
components needed to scale this product

1099
00:57:29,880 --> 00:57:30,839
up

1100
00:57:30,839 --> 00:57:33,540
but um I don't know about you but after

1101
00:57:33,540 --> 00:57:35,280
seeing what we've shown tonight I'm

1102
00:57:35,280 --> 00:57:36,720
pretty sure we can get this done within

1103
00:57:36,720 --> 00:57:39,420
the next few months or years and I make

1104
00:57:39,420 --> 00:57:41,280
this product a reality and change the

1105
00:57:41,280 --> 00:57:44,160
entire economy so I would like to thank

1106
00:57:44,160 --> 00:57:46,619
the entire Optimus team for the hard

1107
00:57:46,619 --> 00:57:47,940
work over the past few months I think

1108
00:57:47,940 --> 00:57:49,800
it's pretty amazing all of this was done

1109
00:57:49,800 --> 00:57:52,020
in barely six or eight months thank you

1110
00:57:52,020 --> 00:57:53,310
very much

1111
00:57:53,310 --> 00:57:56,389
[Applause]

1112
00:58:03,480 --> 00:58:05,660
thank you

1113
00:58:07,619 --> 00:58:10,280
hey everyone

1114
00:58:10,619 --> 00:58:12,900
hi I'm Ashok I lead the autopilot team

1115
00:58:12,900 --> 00:58:14,880
alongside Milan

1116
00:58:14,880 --> 00:58:16,740
God it's coming so hard to top that

1117
00:58:16,740 --> 00:58:18,319
Optimus section

1118
00:58:18,319 --> 00:58:21,420
he'll try nonetheless

1119
00:58:21,420 --> 00:58:22,380
anyway

1120
00:58:22,380 --> 00:58:23,520
um

1121
00:58:23,520 --> 00:58:25,380
every Tesla that has been built over the

1122
00:58:25,380 --> 00:58:27,540
last several years we think has the

1123
00:58:27,540 --> 00:58:30,839
hardware to make the car drive itself

1124
00:58:30,839 --> 00:58:33,359
we have been working on the software to

1125
00:58:33,359 --> 00:58:36,599
add higher and higher levels of autonomy

1126
00:58:36,599 --> 00:58:38,400
this time around last year we had

1127
00:58:38,400 --> 00:58:41,220
roughly 2 000 cars driving our FSD beta

1128
00:58:41,220 --> 00:58:43,079
software

1129
00:58:43,079 --> 00:58:45,059
since then we have significantly

1130
00:58:45,059 --> 00:58:46,619
improved the software as robustness and

1131
00:58:46,619 --> 00:58:48,960
capability that we have now shipped it

1132
00:58:48,960 --> 00:58:53,359
to 160 000 customers as of today

1133
00:58:54,359 --> 00:58:56,310
yep

1134
00:58:56,310 --> 00:58:59,489
[Applause]

1135
00:59:00,000 --> 00:59:01,980
this is not come for free it came from

1136
00:59:01,980 --> 00:59:03,780
the sweat and blood of the engineering

1137
00:59:03,780 --> 00:59:05,780
team over the last one year

1138
00:59:05,780 --> 00:59:09,540
for example we trained 75 000 neural

1139
00:59:09,540 --> 00:59:12,059
network models just last one year that's

1140
00:59:12,059 --> 00:59:14,359
roughly a model every eight minutes

1141
00:59:14,359 --> 00:59:16,380
that's you know coming out of the team

1142
00:59:16,380 --> 00:59:18,420
and then we evaluate them on our large

1143
00:59:18,420 --> 00:59:21,420
clusters and then we ship 281 of those

1144
00:59:21,420 --> 00:59:23,160
models that actually improve the

1145
00:59:23,160 --> 00:59:24,599
performance of the car

1146
00:59:24,599 --> 00:59:26,700
and this space of innovation is

1147
00:59:26,700 --> 00:59:28,440
happening throughout the stack

1148
00:59:28,440 --> 00:59:30,420
the the planning software the

1149
00:59:30,420 --> 00:59:32,579
infrastructure the tools even hiring

1150
00:59:32,579 --> 00:59:34,559
everything is progressing to the next

1151
00:59:34,559 --> 00:59:36,740
level

1152
00:59:37,380 --> 00:59:39,599
the FSG beta software is quite capable

1153
00:59:39,599 --> 00:59:41,880
of driving the car

1154
00:59:41,880 --> 00:59:43,260
it should be able to navigate from

1155
00:59:43,260 --> 00:59:45,599
parking lot to parking lot handling CDC

1156
00:59:45,599 --> 00:59:46,559
driving

1157
00:59:46,559 --> 00:59:48,059
stopping for traffic lights and stop

1158
00:59:48,059 --> 00:59:49,140
signs

1159
00:59:49,140 --> 00:59:50,579
negotiating with objects at

1160
00:59:50,579 --> 00:59:54,680
intersections making turns and so on

1161
00:59:56,099 --> 00:59:58,559
all of this comes from the camera

1162
00:59:58,559 --> 01:00:00,119
streams that go through our neural

1163
01:00:00,119 --> 01:00:02,400
networks that run on the car itself it's

1164
01:00:02,400 --> 01:00:03,540
not coming back to the server or

1165
01:00:03,540 --> 01:00:05,520
anything it runs on the car and produces

1166
01:00:05,520 --> 01:00:07,859
all the outputs to form the world model

1167
01:00:07,859 --> 01:00:09,420
around the car and the planning software

1168
01:00:09,420 --> 01:00:12,619
drives the car based on that

1169
01:00:12,900 --> 01:00:14,819
today we'll go into a lot of the

1170
01:00:14,819 --> 01:00:17,220
components that make up the system

1171
01:00:17,220 --> 01:00:20,220
the occupancy Network acts as the base

1172
01:00:20,220 --> 01:00:22,740
geometry layer of the system

1173
01:00:22,740 --> 01:00:25,500
this is a multi-camera video neural

1174
01:00:25,500 --> 01:00:26,880
network

1175
01:00:26,880 --> 01:00:29,760
that from the images predicts the full

1176
01:00:29,760 --> 01:00:32,099
physical occupancy of the world around

1177
01:00:32,099 --> 01:00:33,839
the robot

1178
01:00:33,839 --> 01:00:35,220
so anything that's physically present

1179
01:00:35,220 --> 01:00:38,940
trees walls buildings cars walls what

1180
01:00:38,940 --> 01:00:40,319
have you it predicts if it's

1181
01:00:40,319 --> 01:00:41,520
specifically present it predicts them

1182
01:00:41,520 --> 01:00:45,020
along with their future motion

1183
01:00:46,079 --> 01:00:49,559
on top of this base level of geometry we

1184
01:00:49,559 --> 01:00:51,780
have more semantic layers in order to

1185
01:00:51,780 --> 01:00:53,579
navigate the roadways we need the lens

1186
01:00:53,579 --> 01:00:55,740
of course

1187
01:00:55,740 --> 01:00:57,180
but then the roadways have lots of

1188
01:00:57,180 --> 01:00:58,619
different lanes and they connect in all

1189
01:00:58,619 --> 01:01:00,540
kinds of ways so it's actually a really

1190
01:01:00,540 --> 01:01:02,880
difficult problem for typical computer

1191
01:01:02,880 --> 01:01:04,440
vision techniques to predict the set of

1192
01:01:04,440 --> 01:01:06,420
planes and their connectivities

1193
01:01:06,420 --> 01:01:08,040
so we reached all the way into language

1194
01:01:08,040 --> 01:01:09,900
Technologies and then pulled the state

1195
01:01:09,900 --> 01:01:12,000
of the art from other domains and not

1196
01:01:12,000 --> 01:01:13,740
just computer vision to make this task

1197
01:01:13,740 --> 01:01:16,280
possible

1198
01:01:16,440 --> 01:01:17,940
for vehicles we need their full

1199
01:01:17,940 --> 01:01:21,480
kinematic state to control for them

1200
01:01:21,480 --> 01:01:23,880
all of this directly comes from neural

1201
01:01:23,880 --> 01:01:26,400
networks video streams raw video streams

1202
01:01:26,400 --> 01:01:28,920
come into the networks go through a lot

1203
01:01:28,920 --> 01:01:30,780
of processing and then outputs the full

1204
01:01:30,780 --> 01:01:32,400
kinematic state that positions

1205
01:01:32,400 --> 01:01:35,400
velocities acceleration jerk all of that

1206
01:01:35,400 --> 01:01:37,380
directly comes out of the networks with

1207
01:01:37,380 --> 01:01:39,240
minimal post processing that's really

1208
01:01:39,240 --> 01:01:41,099
fascinating to me because how how is

1209
01:01:41,099 --> 01:01:42,780
this even possible what world do we live

1210
01:01:42,780 --> 01:01:44,880
in that this magic is possible that

1211
01:01:44,880 --> 01:01:46,559
these networks predicts fourth

1212
01:01:46,559 --> 01:01:48,359
derivatives of these positions when

1213
01:01:48,359 --> 01:01:50,040
people thought we couldn't even detect

1214
01:01:50,040 --> 01:01:52,579
these objects

1215
01:01:53,160 --> 01:01:55,079
my opinion is that it did not come for

1216
01:01:55,079 --> 01:01:58,020
free uh it it required tons of data so

1217
01:01:58,020 --> 01:02:00,359
we had a bit sophisticated Auto labeling

1218
01:02:00,359 --> 01:02:02,640
systems that Shone through raw sensor

1219
01:02:02,640 --> 01:02:05,400
data run a ton of offline compute on the

1220
01:02:05,400 --> 01:02:07,500
servers it can take a few hours run

1221
01:02:07,500 --> 01:02:10,079
expensive neural networks distill the

1222
01:02:10,079 --> 01:02:12,480
information into labels that train our

1223
01:02:12,480 --> 01:02:15,119
in-car neural networks

1224
01:02:15,119 --> 01:02:17,040
on top of this we also use our

1225
01:02:17,040 --> 01:02:19,079
simulation system to synthetically

1226
01:02:19,079 --> 01:02:20,940
create images and since it's a

1227
01:02:20,940 --> 01:02:23,220
simulation we trivially have all the

1228
01:02:23,220 --> 01:02:25,520
labels

1229
01:02:25,740 --> 01:02:28,440
all of this goes through a well-oiled

1230
01:02:28,440 --> 01:02:31,079
data engine pipeline where we first

1231
01:02:31,079 --> 01:02:33,240
train a baseline model with some data

1232
01:02:33,240 --> 01:02:35,880
ship it to the car see what the failures

1233
01:02:35,880 --> 01:02:38,400
are and once you know the failures

1234
01:02:38,400 --> 01:02:40,680
we mine the fleet for the cases where it

1235
01:02:40,680 --> 01:02:43,140
fails provide the correct labels and add

1236
01:02:43,140 --> 01:02:45,119
the data to the training set

1237
01:02:45,119 --> 01:02:47,819
this process systematically fixes the

1238
01:02:47,819 --> 01:02:49,619
issues and we do this for every task

1239
01:02:49,619 --> 01:02:51,900
that runs in the car

1240
01:02:51,900 --> 01:02:53,640
yeah and to train these new massive

1241
01:02:53,640 --> 01:02:56,040
neural networks this year we expanded

1242
01:02:56,040 --> 01:02:57,660
our training infrastructure by roughly

1243
01:02:57,660 --> 01:03:01,200
40 to 50 percent so that sits us at

1244
01:03:01,200 --> 01:03:04,020
about 14 000 gpus today across multiple

1245
01:03:04,020 --> 01:03:06,660
training clusters in the United States

1246
01:03:06,660 --> 01:03:09,720
we also worked on our AI compiler which

1247
01:03:09,720 --> 01:03:11,880
now supports new operations needed by

1248
01:03:11,880 --> 01:03:13,980
those neural networks and map them to

1249
01:03:13,980 --> 01:03:15,839
the uh the best of our underlying

1250
01:03:15,839 --> 01:03:17,640
Hardware resources

1251
01:03:17,640 --> 01:03:19,680
and our inference engine today is

1252
01:03:19,680 --> 01:03:22,020
capable of Distributing the execution of

1253
01:03:22,020 --> 01:03:24,180
a single neural network across two

1254
01:03:24,180 --> 01:03:26,819
independent system on ships essentially

1255
01:03:26,819 --> 01:03:29,339
two independent computers interconnected

1256
01:03:29,339 --> 01:03:32,040
within the simple self-driving computer

1257
01:03:32,040 --> 01:03:34,020
and to make this possible we have to

1258
01:03:34,020 --> 01:03:35,940
keep a tight control on the end-to-end

1259
01:03:35,940 --> 01:03:37,740
latency of this new system so we

1260
01:03:37,740 --> 01:03:39,240
deployed more advanced scheduling code

1261
01:03:39,240 --> 01:03:42,859
across the full FSD platform

1262
01:03:43,440 --> 01:03:45,119
all of these neural networks running in

1263
01:03:45,119 --> 01:03:46,859
the car together produce the vector

1264
01:03:46,859 --> 01:03:48,660
space which is again the model of the

1265
01:03:48,660 --> 01:03:51,000
world around the robot or the car and

1266
01:03:51,000 --> 01:03:52,559
then the planning system operates on top

1267
01:03:52,559 --> 01:03:54,420
of this coming up with trajectories that

1268
01:03:54,420 --> 01:03:56,819
avoid collisions or smooth make progress

1269
01:03:56,819 --> 01:03:58,559
towards the destination using a

1270
01:03:58,559 --> 01:04:00,180
combination of model based optimization

1271
01:04:00,180 --> 01:04:03,299
plus neural network that helps optimize

1272
01:04:03,299 --> 01:04:06,140
it to be really fast

1273
01:04:06,780 --> 01:04:09,359
today we are really excited to present

1274
01:04:09,359 --> 01:04:11,520
progress on all of these areas we have

1275
01:04:11,520 --> 01:04:13,140
the engineering leads standing by to

1276
01:04:13,140 --> 01:04:14,760
come in and explain these various blocks

1277
01:04:14,760 --> 01:04:17,760
and these power not just the car but the

1278
01:04:17,760 --> 01:04:19,559
same components also run on the Optimus

1279
01:04:19,559 --> 01:04:22,079
robot that Milan showed earlier

1280
01:04:22,079 --> 01:04:23,819
with that I welcome panel to start

1281
01:04:23,819 --> 01:04:26,900
talking about the planning section

1282
01:04:32,819 --> 01:04:36,359
hi all I'm parel joint

1283
01:04:36,359 --> 01:04:38,339
let's use this intersection scenario to

1284
01:04:38,339 --> 01:04:39,960
dive straight into how we do the

1285
01:04:39,960 --> 01:04:40,980
planning and decision making in

1286
01:04:40,980 --> 01:04:43,319
autopilot

1287
01:04:43,319 --> 01:04:44,700
so we are approaching this intersection

1288
01:04:44,700 --> 01:04:46,920
from a side street and we have to yield

1289
01:04:46,920 --> 01:04:49,079
to all the crossing vehicles

1290
01:04:49,079 --> 01:04:50,880
rightness as we are about to enter the

1291
01:04:50,880 --> 01:04:52,440
intersection

1292
01:04:52,440 --> 01:04:54,000
The Pedestrian on the other side of the

1293
01:04:54,000 --> 01:04:55,920
intersection decides to cross the road

1294
01:04:55,920 --> 01:04:57,660
without a crosswalk

1295
01:04:57,660 --> 01:05:00,359
now we need to yield to this pedestrian

1296
01:05:00,359 --> 01:05:02,819
yield to the vehicles from the right and

1297
01:05:02,819 --> 01:05:04,500
also understand the relation between The

1298
01:05:04,500 --> 01:05:06,660
Pedestrian and the vehicle on the other

1299
01:05:06,660 --> 01:05:08,880
side of the intersection

1300
01:05:08,880 --> 01:05:11,040
so a lot of these intra-object

1301
01:05:11,040 --> 01:05:13,500
dependencies that we need to resolve in

1302
01:05:13,500 --> 01:05:15,420
a quick glance

1303
01:05:15,420 --> 01:05:18,059
and humans are really good at this we

1304
01:05:18,059 --> 01:05:19,799
look at a scene understand all the

1305
01:05:19,799 --> 01:05:22,140
possible interactions evaluate the most

1306
01:05:22,140 --> 01:05:23,460
promising ones

1307
01:05:23,460 --> 01:05:24,960
and generally end up choosing a

1308
01:05:24,960 --> 01:05:27,559
reasonable one

1309
01:05:27,660 --> 01:05:28,920
so let's look at a few of these

1310
01:05:28,920 --> 01:05:30,180
interactions that autopilot system

1311
01:05:30,180 --> 01:05:31,680
evaluated

1312
01:05:31,680 --> 01:05:33,000
we could have gone in front of this

1313
01:05:33,000 --> 01:05:35,099
pedestrian with a very aggressive launch

1314
01:05:35,099 --> 01:05:36,660
in a lateral profile

1315
01:05:36,660 --> 01:05:38,520
now obviously we are being a jerk to The

1316
01:05:38,520 --> 01:05:39,839
Pedestrian and we would spook The

1317
01:05:39,839 --> 01:05:42,000
Pedestrian and his cute pet

1318
01:05:42,000 --> 01:05:45,119
we could have moved forward slowly short

1319
01:05:45,119 --> 01:05:47,099
for a gap between The Pedestrian or and

1320
01:05:47,099 --> 01:05:48,660
the vehicle from the right

1321
01:05:48,660 --> 01:05:50,339
again we are being a jerk to the vehicle

1322
01:05:50,339 --> 01:05:52,440
coming from the right but you should not

1323
01:05:52,440 --> 01:05:54,839
outright reject this interaction in case

1324
01:05:54,839 --> 01:05:58,700
this is only safe interaction available

1325
01:05:58,740 --> 01:06:00,839
lastly the interaction we ended up

1326
01:06:00,839 --> 01:06:02,040
choosing

1327
01:06:02,040 --> 01:06:04,079
stay slow initially find the reasonable

1328
01:06:04,079 --> 01:06:05,819
Gap and then finish the maneuver after

1329
01:06:05,819 --> 01:06:08,660
all the agents pass

1330
01:06:09,240 --> 01:06:10,859
now evaluation of all of these

1331
01:06:10,859 --> 01:06:13,020
interactions is not trivial

1332
01:06:13,020 --> 01:06:15,000
especially when you care about modeling

1333
01:06:15,000 --> 01:06:17,099
the higher order derivatives for other

1334
01:06:17,099 --> 01:06:18,299
agents

1335
01:06:18,299 --> 01:06:20,579
for example what is the longitudinal

1336
01:06:20,579 --> 01:06:22,260
jerk required by the vehicle coming from

1337
01:06:22,260 --> 01:06:25,260
the right when you assert in front of it

1338
01:06:25,260 --> 01:06:27,299
relying purely on collision checks with

1339
01:06:27,299 --> 01:06:29,280
modular predictions will only get you so

1340
01:06:29,280 --> 01:06:31,140
far because you will miss out on a lot

1341
01:06:31,140 --> 01:06:33,359
of valid interactions

1342
01:06:33,359 --> 01:06:35,520
this basically boils down to solving a

1343
01:06:35,520 --> 01:06:37,260
multi-agent joint trajectory planning

1344
01:06:37,260 --> 01:06:39,539
problem over the trajectories of ego and

1345
01:06:39,539 --> 01:06:42,240
all the other agents

1346
01:06:42,240 --> 01:06:44,220
now how much ever you optimize there's

1347
01:06:44,220 --> 01:06:45,839
going to be a limit to how fast you can

1348
01:06:45,839 --> 01:06:47,700
run this optimization problem it will be

1349
01:06:47,700 --> 01:06:49,200
close to close to order of 10

1350
01:06:49,200 --> 01:06:50,760
milliseconds even after a lot of

1351
01:06:50,760 --> 01:06:53,720
incremental approximations

1352
01:06:53,760 --> 01:06:56,280
now for a typical crowded unpredictable

1353
01:06:56,280 --> 01:06:57,119
left

1354
01:06:57,119 --> 01:06:59,940
say you have more than 20 objects each

1355
01:06:59,940 --> 01:07:01,380
object having multiple different future

1356
01:07:01,380 --> 01:07:03,839
modes the number of relevant interaction

1357
01:07:03,839 --> 01:07:07,280
combinations will blow up

1358
01:07:07,859 --> 01:07:09,960
we the planner needs to make a decision

1359
01:07:09,960 --> 01:07:12,480
every 50 milliseconds so how do we solve

1360
01:07:12,480 --> 01:07:14,940
this in real time

1361
01:07:14,940 --> 01:07:16,680
we rely on a framework what we call as

1362
01:07:16,680 --> 01:07:18,900
interaction search which is basically a

1363
01:07:18,900 --> 01:07:20,460
parallelized research over a bunch of

1364
01:07:20,460 --> 01:07:23,099
maneuver trajectories

1365
01:07:23,099 --> 01:07:25,380
the state space here corresponds to the

1366
01:07:25,380 --> 01:07:27,780
kinematic state of ego the kinematic

1367
01:07:27,780 --> 01:07:29,940
state of other agents the nominal future

1368
01:07:29,940 --> 01:07:32,520
multiple multimodal predictions and all

1369
01:07:32,520 --> 01:07:35,720
the static entities in the scene

1370
01:07:36,180 --> 01:07:38,640
the action space is where things get

1371
01:07:38,640 --> 01:07:40,140
interesting

1372
01:07:40,140 --> 01:07:42,000
we use a set of maneuver trajectory

1373
01:07:42,000 --> 01:07:44,160
candidates to Branch over a bunch of

1374
01:07:44,160 --> 01:07:46,140
interactional decisions

1375
01:07:46,140 --> 01:07:48,359
and also incremental goals for a longer

1376
01:07:48,359 --> 01:07:50,460
Horizon maneuver

1377
01:07:50,460 --> 01:07:52,200
Let's Walk Through This research very

1378
01:07:52,200 --> 01:07:55,140
quickly to get a sense of how it works

1379
01:07:55,140 --> 01:07:56,460
we start with a set of vision

1380
01:07:56,460 --> 01:07:59,099
measurements namely Lanes occupancy

1381
01:07:59,099 --> 01:08:02,039
moving objects these get represented as

1382
01:08:02,039 --> 01:08:03,839
sparse extractions as well as latent

1383
01:08:03,839 --> 01:08:05,220
features

1384
01:08:05,220 --> 01:08:07,200
we use this to create a set of goal

1385
01:08:07,200 --> 01:08:08,280
candidates

1386
01:08:08,280 --> 01:08:10,619
Lanes again from the lanes Network or

1387
01:08:10,619 --> 01:08:12,420
unstructured regions which correspond to

1388
01:08:12,420 --> 01:08:14,760
a probability mask derived from Human

1389
01:08:14,760 --> 01:08:17,160
demonstrations

1390
01:08:17,160 --> 01:08:18,660
once we have a bunch of these gold

1391
01:08:18,660 --> 01:08:20,460
candidates we create seed trajectories

1392
01:08:20,460 --> 01:08:21,839
using a combination of classical

1393
01:08:21,839 --> 01:08:24,060
optimization approaches as well as our

1394
01:08:24,060 --> 01:08:26,520
Network planner again trained on data

1395
01:08:26,520 --> 01:08:28,620
from the customer feed

1396
01:08:28,620 --> 01:08:30,359
now once we get a bunch of these free

1397
01:08:30,359 --> 01:08:33,000
trajectories we use them to start

1398
01:08:33,000 --> 01:08:35,219
branching on the interactions

1399
01:08:35,219 --> 01:08:37,679
we find the most critical interaction

1400
01:08:37,679 --> 01:08:39,238
in our case this would be the

1401
01:08:39,238 --> 01:08:40,380
interaction with respect to The

1402
01:08:40,380 --> 01:08:42,179
Pedestrian whether we assert in front of

1403
01:08:42,179 --> 01:08:43,738
it or yield to it

1404
01:08:43,738 --> 01:08:46,198
obviously the option on the left is a

1405
01:08:46,198 --> 01:08:48,179
high penalty option it likely won't get

1406
01:08:48,179 --> 01:08:50,580
prioritized so we Branch further onto

1407
01:08:50,580 --> 01:08:52,380
the option on the right and that's where

1408
01:08:52,380 --> 01:08:53,640
we bring in more and more complex

1409
01:08:53,640 --> 01:08:56,339
interactions building this optimization

1410
01:08:56,339 --> 01:08:58,080
problem incrementally with more and more

1411
01:08:58,080 --> 01:08:59,520
constraints

1412
01:08:59,520 --> 01:09:01,080
and that research keeps flowing

1413
01:09:01,080 --> 01:09:03,179
branching on more interactions branching

1414
01:09:03,179 --> 01:09:04,679
on more goals

1415
01:09:04,679 --> 01:09:06,779
now a lot of tricks here lie in

1416
01:09:06,779 --> 01:09:08,460
evaluation of each of each of this node

1417
01:09:08,460 --> 01:09:10,920
of the research

1418
01:09:10,920 --> 01:09:12,719
inside each node

1419
01:09:12,719 --> 01:09:14,460
initially we started with creating

1420
01:09:14,460 --> 01:09:15,479
trajectories using classical

1421
01:09:15,479 --> 01:09:17,460
optimization approaches where the

1422
01:09:17,460 --> 01:09:19,020
constraints like I described would be

1423
01:09:19,020 --> 01:09:20,880
added incrementally

1424
01:09:20,880 --> 01:09:22,979
and this would take close to one to five

1425
01:09:22,979 --> 01:09:25,380
milliseconds per action

1426
01:09:25,380 --> 01:09:27,060
now even though this is fairly good

1427
01:09:27,060 --> 01:09:29,100
number when you want to evaluate more

1428
01:09:29,100 --> 01:09:30,719
than 100 interactions this does not

1429
01:09:30,719 --> 01:09:32,819
scale

1430
01:09:32,819 --> 01:09:34,380
so we ended up building lightweight

1431
01:09:34,380 --> 01:09:36,600
queryable networks that you can run in

1432
01:09:36,600 --> 01:09:38,339
the loop of the planner

1433
01:09:38,339 --> 01:09:40,140
these networks are trained on human

1434
01:09:40,140 --> 01:09:42,540
demonstrations from the fleet as well as

1435
01:09:42,540 --> 01:09:45,960
offline solvers with relaxed time limits

1436
01:09:45,960 --> 01:09:47,759
with this we were able to bring the

1437
01:09:47,759 --> 01:09:49,979
rundown runtime down to close 200

1438
01:09:49,979 --> 01:09:53,119
microseconds per action

1439
01:09:58,320 --> 01:10:01,020
now doing this alone is not enough

1440
01:10:01,020 --> 01:10:02,460
because you still have this massive

1441
01:10:02,460 --> 01:10:03,719
research that that you need to go

1442
01:10:03,719 --> 01:10:05,280
through and you need to efficiently

1443
01:10:05,280 --> 01:10:07,440
prune the search space

1444
01:10:07,440 --> 01:10:09,900
so you need to do a do scoring on each

1445
01:10:09,900 --> 01:10:11,820
of these trajectories few of these are

1446
01:10:11,820 --> 01:10:13,260
fairly standard you do a bunch of

1447
01:10:13,260 --> 01:10:14,880
collision checks you do a bunch of

1448
01:10:14,880 --> 01:10:17,100
comfort analysis what is the jerk and

1449
01:10:17,100 --> 01:10:19,620
actually required for a given maneuver

1450
01:10:19,620 --> 01:10:21,540
the customer Fleet data plays an

1451
01:10:21,540 --> 01:10:24,239
important role here again

1452
01:10:24,239 --> 01:10:26,219
we run two sets of again lightweight

1453
01:10:26,219 --> 01:10:28,380
variable networks both really augmenting

1454
01:10:28,380 --> 01:10:30,420
each other one of them trained from

1455
01:10:30,420 --> 01:10:32,699
interventions from the FST beta Fleet

1456
01:10:32,699 --> 01:10:35,040
which gives a score on How likely is a

1457
01:10:35,040 --> 01:10:36,300
given maneuver to result in

1458
01:10:36,300 --> 01:10:38,400
interventions over the next few seconds

1459
01:10:38,400 --> 01:10:40,380
and second which is purely on human

1460
01:10:40,380 --> 01:10:42,719
demonstrations human driven data giving

1461
01:10:42,719 --> 01:10:44,940
a score on how close is your given

1462
01:10:44,940 --> 01:10:46,800
selected action to a human driven

1463
01:10:46,800 --> 01:10:48,420
trajectory

1464
01:10:48,420 --> 01:10:50,340
the scoring helps us prune the search

1465
01:10:50,340 --> 01:10:51,239
space

1466
01:10:51,239 --> 01:10:52,800
keep branching further on the

1467
01:10:52,800 --> 01:10:54,900
interactions and focus the compute on

1468
01:10:54,900 --> 01:10:57,980
the most promising outcomes

1469
01:10:58,920 --> 01:11:00,780
the the cool part about this

1470
01:11:00,780 --> 01:11:02,460
architecture is that it allows us to

1471
01:11:02,460 --> 01:11:04,800
create a cool blend between

1472
01:11:04,800 --> 01:11:06,840
uh data driven approaches where you

1473
01:11:06,840 --> 01:11:07,980
don't have to rely on a lot of hand

1474
01:11:07,980 --> 01:11:10,320
engineered costs but also ground it in

1475
01:11:10,320 --> 01:11:13,820
reality with physics-based checks

1476
01:11:13,980 --> 01:11:15,840
now a lot of what what I described was

1477
01:11:15,840 --> 01:11:17,760
with respect to the agents we could

1478
01:11:17,760 --> 01:11:19,620
observe in the scene but the same

1479
01:11:19,620 --> 01:11:21,659
framework extends to objects behind

1480
01:11:21,659 --> 01:11:24,199
occlusions

1481
01:11:24,480 --> 01:11:26,699
we use the video feed from eight cameras

1482
01:11:26,699 --> 01:11:28,920
to generate the 3D occupancy of the

1483
01:11:28,920 --> 01:11:30,000
world

1484
01:11:30,000 --> 01:11:32,040
the blue mask here corresponds to the

1485
01:11:32,040 --> 01:11:34,920
visibility region we call it

1486
01:11:34,920 --> 01:11:37,320
it basically gets blocked at the first

1487
01:11:37,320 --> 01:11:39,300
occlusion you see in the scene we

1488
01:11:39,300 --> 01:11:41,159
consume this visibility mask to generate

1489
01:11:41,159 --> 01:11:42,840
what we call as ghost objects which you

1490
01:11:42,840 --> 01:11:45,120
can see on the top left

1491
01:11:45,120 --> 01:11:47,580
now if you model the spawn regions and

1492
01:11:47,580 --> 01:11:48,960
the state transitions of this ghost

1493
01:11:48,960 --> 01:11:50,940
objects correctly

1494
01:11:50,940 --> 01:11:54,060
if you tune your control response as a

1495
01:11:54,060 --> 01:11:55,380
function of that existence likelihood

1496
01:11:55,380 --> 01:11:57,179
you can extract some really nice

1497
01:11:57,179 --> 01:11:59,520
human-like behaviors

1498
01:11:59,520 --> 01:12:01,380
now I'll pass it on on to fill to

1499
01:12:01,380 --> 01:12:02,880
describe more on how we generate these

1500
01:12:02,880 --> 01:12:05,659
occupancy Networks

1501
01:12:11,340 --> 01:12:14,040
hey guys my name is Phil uh I will share

1502
01:12:14,040 --> 01:12:16,320
the details of the occupancy Network we

1503
01:12:16,320 --> 01:12:18,300
build over the past year

1504
01:12:18,300 --> 01:12:20,400
this network is our solution to model

1505
01:12:20,400 --> 01:12:22,980
the physical work in 3D around our cars

1506
01:12:22,980 --> 01:12:25,739
and it is currently not shown in our

1507
01:12:25,739 --> 01:12:27,900
customer facing visualization and what

1508
01:12:27,900 --> 01:12:30,480
we will see here is the road Network

1509
01:12:30,480 --> 01:12:34,580
output from our internal Dev tool

1510
01:12:35,400 --> 01:12:37,560
the occupancy Network takes video

1511
01:12:37,560 --> 01:12:40,280
streams of all our 80 cameras as input

1512
01:12:40,280 --> 01:12:43,380
produces a single unified volumetric

1513
01:12:43,380 --> 01:12:45,960
occupancy in Vector space directly

1514
01:12:45,960 --> 01:12:49,260
for every 3D location around our car it

1515
01:12:49,260 --> 01:12:51,179
predicts the probability of that

1516
01:12:51,179 --> 01:12:54,179
location being occupied a lot

1517
01:12:54,179 --> 01:12:56,760
since it has video contacts it is

1518
01:12:56,760 --> 01:12:59,400
capable of predicting obstacles that are

1519
01:12:59,400 --> 01:13:02,760
occluded instantaneously

1520
01:13:02,760 --> 01:13:05,760
for each location it also produces a set

1521
01:13:05,760 --> 01:13:09,360
of semantics such as curb car pedestrian

1522
01:13:09,360 --> 01:13:13,820
and low debris as color coded here

1523
01:13:16,159 --> 01:13:18,780
occupancy flow is also predicted for

1524
01:13:18,780 --> 01:13:19,739
motion

1525
01:13:19,739 --> 01:13:21,600
since the model is a generalized Network

1526
01:13:21,600 --> 01:13:23,940
it does not tell static and dynamic

1527
01:13:23,940 --> 01:13:25,040
objects

1528
01:13:25,040 --> 01:13:28,380
explicitly it is able to produce and

1529
01:13:28,380 --> 01:13:31,380
model the random motions such as the

1530
01:13:31,380 --> 01:13:33,840
swerving trainer here

1531
01:13:33,840 --> 01:13:36,060
this network is currently running in all

1532
01:13:36,060 --> 01:13:39,060
Teslas with FSD computers and it is

1533
01:13:39,060 --> 01:13:41,400
incredibly efficient runs about every 10

1534
01:13:41,400 --> 01:13:45,239
milliseconds with our neural accelerator

1535
01:13:45,239 --> 01:13:47,400
so how does this work let's take a look

1536
01:13:47,400 --> 01:13:48,960
at the architecture

1537
01:13:48,960 --> 01:13:52,260
first we Rectify each camera images with

1538
01:13:52,260 --> 01:13:53,820
the camera calibration

1539
01:13:53,820 --> 01:13:56,219
and the images were shown here were

1540
01:13:56,219 --> 01:13:57,659
given to the network it's actually not

1541
01:13:57,659 --> 01:14:00,239
the typical 8-bit RGB image as you can

1542
01:14:00,239 --> 01:14:03,060
see from the first imagery on top we're

1543
01:14:03,060 --> 01:14:04,980
giving the 12 bit raw photo account

1544
01:14:04,980 --> 01:14:08,219
image to the network since it has four

1545
01:14:08,219 --> 01:14:11,100
bits more information it has 16 times

1546
01:14:11,100 --> 01:14:13,739
better dynamic range as well as reduced

1547
01:14:13,739 --> 01:14:15,420
latency since we don't have the wrong

1548
01:14:15,420 --> 01:14:17,880
ISP in Adobe anymore

1549
01:14:17,880 --> 01:14:20,460
we use a set of records and back with

1550
01:14:20,460 --> 01:14:23,100
FPS as a backbone to extract images

1551
01:14:23,100 --> 01:14:25,260
space features

1552
01:14:25,260 --> 01:14:28,739
next we construct a set of 3D position

1553
01:14:28,739 --> 01:14:30,960
query along with the IMG space features

1554
01:14:30,960 --> 01:14:33,659
as keys and values fit into an attention

1555
01:14:33,659 --> 01:14:34,739
module

1556
01:14:34,739 --> 01:14:37,260
the output of the attention module is

1557
01:14:37,260 --> 01:14:39,840
high dimensional spatial features

1558
01:14:39,840 --> 01:14:43,140
these special features are aligned

1559
01:14:43,140 --> 01:14:46,380
temporarily using vehicle odometry

1560
01:14:46,380 --> 01:14:49,260
to derive motion

1561
01:14:49,260 --> 01:14:52,260
last this spatial temporal features go

1562
01:14:52,260 --> 01:14:54,120
through a set of D convolution to

1563
01:14:54,120 --> 01:14:55,679
produce the final occupancy and

1564
01:14:55,679 --> 01:14:57,420
occupancy flow output

1565
01:14:57,420 --> 01:14:59,940
they're formed as fixed size boxer gray

1566
01:14:59,940 --> 01:15:02,219
which might not be precise enough for

1567
01:15:02,219 --> 01:15:04,199
planning on control

1568
01:15:04,199 --> 01:15:06,600
in order to get a higher resolution we

1569
01:15:06,600 --> 01:15:08,820
also produce per voxel feature Maps

1570
01:15:08,820 --> 01:15:12,480
which will feed into MLP with 3D spatial

1571
01:15:12,480 --> 01:15:15,360
Point queries to get position and

1572
01:15:15,360 --> 01:15:19,280
semantics at any arbitrary location

1573
01:15:19,440 --> 01:15:21,420
after knowing the model better let's

1574
01:15:21,420 --> 01:15:23,699
take a look at another example here we

1575
01:15:23,699 --> 01:15:25,679
have an articular bus parked along right

1576
01:15:25,679 --> 01:15:28,739
side row highlighted as a L-shaped boxer

1577
01:15:28,739 --> 01:15:31,500
here as we approach the bus starts to

1578
01:15:31,500 --> 01:15:34,080
move the blue the front of the cart

1579
01:15:34,080 --> 01:15:36,239
turns blue first indicating the model

1580
01:15:36,239 --> 01:15:39,840
predicts the frontal bus has a down zero

1581
01:15:39,840 --> 01:15:42,000
occupancy flow

1582
01:15:42,000 --> 01:15:44,219
and the s-bus keeps moving the entire

1583
01:15:44,219 --> 01:15:46,380
bus turns blue

1584
01:15:46,380 --> 01:15:48,420
and you can also see that the network

1585
01:15:48,420 --> 01:15:51,000
predicts the precise curvature of the

1586
01:15:51,000 --> 01:15:52,080
bus

1587
01:15:52,080 --> 01:15:54,900
well this is a very complicated problem

1588
01:15:54,900 --> 01:15:57,000
for traditional object detection Network

1589
01:15:57,000 --> 01:15:59,159
as you have to see whether I'm going to

1590
01:15:59,159 --> 01:16:02,100
use one cuboid or perhaps a q to fit the

1591
01:16:02,100 --> 01:16:04,320
curvature but for occupation Network

1592
01:16:04,320 --> 01:16:06,719
since all we care about is the occupancy

1593
01:16:06,719 --> 01:16:09,300
in the visible space and we'll be able

1594
01:16:09,300 --> 01:16:13,199
to model the curvature precisely

1595
01:16:13,199 --> 01:16:15,780
besides the voxel grade the occupancy

1596
01:16:15,780 --> 01:16:18,540
Network also produces a drivable surface

1597
01:16:18,540 --> 01:16:20,520
the drivable surface has both 3D

1598
01:16:20,520 --> 01:16:22,679
geometry and semantics they are very

1599
01:16:22,679 --> 01:16:25,320
useful for control especially on healing

1600
01:16:25,320 --> 01:16:27,780
and curvy roads

1601
01:16:27,780 --> 01:16:30,179
the surface and the voxel gray are not

1602
01:16:30,179 --> 01:16:32,880
predicted independently instead the

1603
01:16:32,880 --> 01:16:34,679
voxel grid actually aligns with the

1604
01:16:34,679 --> 01:16:37,800
surface implicitly

1605
01:16:37,800 --> 01:16:40,980
here we are at a hero Quest where you

1606
01:16:40,980 --> 01:16:44,400
can see the 3D geometry of the surface

1607
01:16:44,400 --> 01:16:46,679
being predicted nicely

1608
01:16:46,679 --> 01:16:48,780
planner can use this information to

1609
01:16:48,780 --> 01:16:50,640
decide perhaps we need to slow down more

1610
01:16:50,640 --> 01:16:53,280
for the Hillcrest and as you can also

1611
01:16:53,280 --> 01:16:55,140
see the voxel grade aligns with the

1612
01:16:55,140 --> 01:16:58,219
surface consistently

1613
01:16:58,800 --> 01:17:00,719
besides the Box source and the surface

1614
01:17:00,719 --> 01:17:02,880
we're also very excited about the recent

1615
01:17:02,880 --> 01:17:05,040
breakthrough in neural readings field or

1616
01:17:05,040 --> 01:17:07,320
Nerf

1617
01:17:07,320 --> 01:17:09,659
we're looking into both incorporate some

1618
01:17:09,659 --> 01:17:11,340
of the light color features into

1619
01:17:11,340 --> 01:17:13,679
occupancy Network training as well as

1620
01:17:13,679 --> 01:17:16,080
using our Network output as the input

1621
01:17:16,080 --> 01:17:18,600
state for Nerf

1622
01:17:18,600 --> 01:17:21,120
as a matter of fact Ashok is very

1623
01:17:21,120 --> 01:17:23,159
excited about this this has been his uh

1624
01:17:23,159 --> 01:17:27,020
personal weekend project for a while

1625
01:17:28,440 --> 01:17:31,980
on these nerves because I think the

1626
01:17:31,980 --> 01:17:33,659
Academia is building a lot of these

1627
01:17:33,659 --> 01:17:35,940
Foundation models uh for language using

1628
01:17:35,940 --> 01:17:37,980
like tons of large data sets for

1629
01:17:37,980 --> 01:17:40,800
language but I think for vision nerves

1630
01:17:40,800 --> 01:17:42,179
are going to provide the foundation

1631
01:17:42,179 --> 01:17:44,820
models for computer vision because they

1632
01:17:44,820 --> 01:17:46,739
are grounded in geometry and geometry

1633
01:17:46,739 --> 01:17:48,600
gives us a nice way to supervise these

1634
01:17:48,600 --> 01:17:50,460
networks and freezes of the requirement

1635
01:17:50,460 --> 01:17:52,980
to Define an ontology and the

1636
01:17:52,980 --> 01:17:54,300
supervision is essentially free because

1637
01:17:54,300 --> 01:17:55,800
you just have to differentiably render

1638
01:17:55,800 --> 01:17:56,940
these images

1639
01:17:56,940 --> 01:17:59,520
so I think in the future uh this

1640
01:17:59,520 --> 01:18:01,620
occupancy Network idea where you know

1641
01:18:01,620 --> 01:18:03,060
images come in and then the network

1642
01:18:03,060 --> 01:18:05,420
produces a consistent

1643
01:18:05,420 --> 01:18:07,380
volumetric representation of the scene

1644
01:18:07,380 --> 01:18:09,480
that can then be differentially rendered

1645
01:18:09,480 --> 01:18:12,300
into any image that was observed I I

1646
01:18:12,300 --> 01:18:14,100
personally think is a future of computer

1647
01:18:14,100 --> 01:18:16,679
vision uh and you know we do some

1648
01:18:16,679 --> 01:18:19,020
initial work on it uh right now but I

1649
01:18:19,020 --> 01:18:21,719
think in the future both at Tesla and in

1650
01:18:21,719 --> 01:18:24,120
the Academia we will see that these

1651
01:18:24,120 --> 01:18:27,140
combination of One-Shot prediction of

1652
01:18:27,140 --> 01:18:29,820
volumetric occupancy uh will be that's

1653
01:18:29,820 --> 01:18:32,580
my personal bet

1654
01:18:32,580 --> 01:18:34,020
sexual

1655
01:18:34,020 --> 01:18:36,659
so here's an example early result of a

1656
01:18:36,659 --> 01:18:39,420
3D Reconstruction from our free data

1657
01:18:39,420 --> 01:18:41,520
instead of focusing on getting perfect

1658
01:18:41,520 --> 01:18:45,000
RGB reprojection in imaging space our

1659
01:18:45,000 --> 01:18:46,679
primary goal here is to accurately

1660
01:18:46,679 --> 01:18:48,780
represent the warnings 3D space for

1661
01:18:48,780 --> 01:18:50,940
driving and we want to do this for all

1662
01:18:50,940 --> 01:18:53,340
our free data over the world in all

1663
01:18:53,340 --> 01:18:55,260
weather and lighting conditions and

1664
01:18:55,260 --> 01:18:56,640
obviously this is a very challenging

1665
01:18:56,640 --> 01:18:58,320
problem and we're looking for you guys

1666
01:18:58,320 --> 01:19:00,540
to help

1667
01:19:00,540 --> 01:19:03,060
finally the occupancy network is trained

1668
01:19:03,060 --> 01:19:05,040
with large auto level data set without

1669
01:19:05,040 --> 01:19:07,380
any human in the loop

1670
01:19:07,380 --> 01:19:09,780
and with that I'll pass to Tim to talk

1671
01:19:09,780 --> 01:19:11,040
about what it takes to train this

1672
01:19:11,040 --> 01:19:12,239
network

1673
01:19:12,239 --> 01:19:14,900
thanks Phil

1674
01:19:15,850 --> 01:19:18,420
[Applause]

1675
01:19:18,420 --> 01:19:20,760
all right hey everyone

1676
01:19:20,760 --> 01:19:22,320
let's talk about some training

1677
01:19:22,320 --> 01:19:23,820
infrastructure

1678
01:19:23,820 --> 01:19:25,980
so we've seen a couple of videos you

1679
01:19:25,980 --> 01:19:28,920
know four or five uh I think and care

1680
01:19:28,920 --> 01:19:31,260
more and worry more about a lot more

1681
01:19:31,260 --> 01:19:34,080
Clips on that so we've been looking at

1682
01:19:34,080 --> 01:19:36,659
the occupancy networks just from Phil

1683
01:19:36,659 --> 01:19:40,500
just fills videos it takes 1.4 billion

1684
01:19:40,500 --> 01:19:42,480
frames to train that Network what you

1685
01:19:42,480 --> 01:19:44,760
just saw and if you have a hundred

1686
01:19:44,760 --> 01:19:47,640
thousand gpus uh it would take one hour

1687
01:19:47,640 --> 01:19:51,000
but if you have uh one GPU it would take

1688
01:19:51,000 --> 01:19:53,219
a hundred thousand hours so that is not

1689
01:19:53,219 --> 01:19:55,260
a Humane time period that you can wait

1690
01:19:55,260 --> 01:19:56,880
for your training job to run right we

1691
01:19:56,880 --> 01:19:58,620
want to ship faster than that so that

1692
01:19:58,620 --> 01:20:00,060
means you're going to need to go

1693
01:20:00,060 --> 01:20:02,820
parallel so you need a more compute for

1694
01:20:02,820 --> 01:20:04,800
that that means you're going to need a

1695
01:20:04,800 --> 01:20:07,620
supercomputer so this is why we've built

1696
01:20:07,620 --> 01:20:09,900
in-house three supercomputers comprising

1697
01:20:09,900 --> 01:20:13,679
of 14 000 gpus where we use 10 000 gpus

1698
01:20:13,679 --> 01:20:16,020
for training and around four thousand

1699
01:20:16,020 --> 01:20:18,659
gpus for auto labeling

1700
01:20:18,659 --> 01:20:20,580
all these videos are stored in 30

1701
01:20:20,580 --> 01:20:23,159
petabytes of a distributed managed video

1702
01:20:23,159 --> 01:20:24,500
cache

1703
01:20:24,500 --> 01:20:27,540
you shouldn't think of our data sets as

1704
01:20:27,540 --> 01:20:29,400
fixed let's say as you think of your

1705
01:20:29,400 --> 01:20:30,900
imagenet or something you know with like

1706
01:20:30,900 --> 01:20:32,820
a million frames you should think of it

1707
01:20:32,820 --> 01:20:35,219
as a very fluid thing so we've got a

1708
01:20:35,219 --> 01:20:37,320
half a million of these videos flowing

1709
01:20:37,320 --> 01:20:39,659
in and out of this cluster these

1710
01:20:39,659 --> 01:20:42,060
clusters every single day

1711
01:20:42,060 --> 01:20:45,179
and we track 400 000 of these kind of

1712
01:20:45,179 --> 01:20:48,540
python video instantiations every second

1713
01:20:48,540 --> 01:20:51,480
so that is that's a lot of calls we're

1714
01:20:51,480 --> 01:20:53,520
gonna need to capture that in order to

1715
01:20:53,520 --> 01:20:55,800
govern the retention policies of this

1716
01:20:55,800 --> 01:20:58,080
distributed video cache so underlying

1717
01:20:58,080 --> 01:21:00,179
all of this is a huge amount of infra

1718
01:21:00,179 --> 01:21:01,920
all of which we build and manage

1719
01:21:01,920 --> 01:21:04,260
in-house

1720
01:21:04,260 --> 01:21:06,960
so you cannot just buy you know 40 000

1721
01:21:06,960 --> 01:21:09,600
gpus and then a 30 petabytes of Flash

1722
01:21:09,600 --> 01:21:11,940
mvme and just put it together and let's

1723
01:21:11,940 --> 01:21:14,400
go train uh it actually takes a lot of

1724
01:21:14,400 --> 01:21:16,140
work and I'm gonna go into a little bit

1725
01:21:16,140 --> 01:21:17,340
of that

1726
01:21:17,340 --> 01:21:19,020
what you actually typically want to do

1727
01:21:19,020 --> 01:21:21,300
is you want to take your accelerator so

1728
01:21:21,300 --> 01:21:23,699
that it could be the GPU or Dojo which

1729
01:21:23,699 --> 01:21:25,640
we'll talk about later

1730
01:21:25,640 --> 01:21:28,320
and because that's the most expensive

1731
01:21:28,320 --> 01:21:30,060
component that's where you want to put

1732
01:21:30,060 --> 01:21:32,460
your bottleneck and so that means that

1733
01:21:32,460 --> 01:21:34,980
every single part of your system is

1734
01:21:34,980 --> 01:21:36,659
going to need to outperform this

1735
01:21:36,659 --> 01:21:37,739
accelerator

1736
01:21:37,739 --> 01:21:40,140
and so that is really complicated that

1737
01:21:40,140 --> 01:21:42,060
means that your storage is going to need

1738
01:21:42,060 --> 01:21:43,980
to have the size and the bandwidth to

1739
01:21:43,980 --> 01:21:46,020
deliver all the data down into the nodes

1740
01:21:46,020 --> 01:21:47,880
these nodes need to have the right

1741
01:21:47,880 --> 01:21:50,699
amount of CPU and memory capabilities to

1742
01:21:50,699 --> 01:21:52,260
feed into your machine learning

1743
01:21:52,260 --> 01:21:53,219
framework

1744
01:21:53,219 --> 01:21:54,719
this machine learning framework then

1745
01:21:54,719 --> 01:21:56,699
needs to hand it off to your GPU and

1746
01:21:56,699 --> 01:21:58,739
then you can start training but then you

1747
01:21:58,739 --> 01:22:00,659
need to do so across hundreds or

1748
01:22:00,659 --> 01:22:03,900
thousands of GPU in a reliable way in

1749
01:22:03,900 --> 01:22:06,540
logstap and in a way that's also fast so

1750
01:22:06,540 --> 01:22:07,440
you're also going to need an

1751
01:22:07,440 --> 01:22:08,640
interconnect

1752
01:22:08,640 --> 01:22:10,739
extremely complicated we'll talk more

1753
01:22:10,739 --> 01:22:13,500
about dojo in a second

1754
01:22:13,500 --> 01:22:15,780
so first I want to take you to some

1755
01:22:15,780 --> 01:22:17,520
optimizations that we've done on our

1756
01:22:17,520 --> 01:22:18,540
cluster

1757
01:22:18,540 --> 01:22:21,420
so we're getting in a lot of videos and

1758
01:22:21,420 --> 01:22:23,880
video is very much unlike let's say

1759
01:22:23,880 --> 01:22:26,040
training on images or text which I think

1760
01:22:26,040 --> 01:22:28,320
is very well established video is quite

1761
01:22:28,320 --> 01:22:31,920
literally a dimension more complicated

1762
01:22:31,920 --> 01:22:34,620
um and so that's why we needed to go end

1763
01:22:34,620 --> 01:22:36,600
to end from the storage layer down to

1764
01:22:36,600 --> 01:22:38,159
the accelerator and optimize every

1765
01:22:38,159 --> 01:22:39,480
single piece of that

1766
01:22:39,480 --> 01:22:41,640
because we train on the photon count

1767
01:22:41,640 --> 01:22:44,100
videos that come directly from our Fleet

1768
01:22:44,100 --> 01:22:46,140
we train on those directly we do not

1769
01:22:46,140 --> 01:22:48,420
post process those at all

1770
01:22:48,420 --> 01:22:51,179
the way it's just done is we seek

1771
01:22:51,179 --> 01:22:53,100
exactly to the frames we select for our

1772
01:22:53,100 --> 01:22:55,560
batch we load those in including the

1773
01:22:55,560 --> 01:22:57,179
frames that they depend on so these are

1774
01:22:57,179 --> 01:22:58,920
your iframes or your keyframes we

1775
01:22:58,920 --> 01:23:00,659
package those up move them into shared

1776
01:23:00,659 --> 01:23:02,520
memory move them into a double bar from

1777
01:23:02,520 --> 01:23:04,380
the GPU and then use the hardware

1778
01:23:04,380 --> 01:23:08,100
decoder that's only accelerated to

1779
01:23:08,100 --> 01:23:09,840
actually decode the video so we do that

1780
01:23:09,840 --> 01:23:12,179
on the GPU natively and this is all in a

1781
01:23:12,179 --> 01:23:15,060
very nice python pytorch extension

1782
01:23:15,060 --> 01:23:18,300
doing so unlocked more than 30 training

1783
01:23:18,300 --> 01:23:19,679
speed increase for the occupancy

1784
01:23:19,679 --> 01:23:21,840
networks and freed up basically a whole

1785
01:23:21,840 --> 01:23:25,520
CPU to do any other thing

1786
01:23:26,640 --> 01:23:28,560
um you cannot just do training with just

1787
01:23:28,560 --> 01:23:30,060
videos of course you need some kind of a

1788
01:23:30,060 --> 01:23:32,820
ground Truth uh and uh that is actually

1789
01:23:32,820 --> 01:23:34,920
an interesting problem as well the

1790
01:23:34,920 --> 01:23:36,540
objective for storing your ground truth

1791
01:23:36,540 --> 01:23:39,000
is that you want to make sure you get to

1792
01:23:39,000 --> 01:23:41,100
your ground truth that you need in the

1793
01:23:41,100 --> 01:23:42,780
minimal amount of file system operations

1794
01:23:42,780 --> 01:23:45,179
and load in the minimal size of what you

1795
01:23:45,179 --> 01:23:47,940
need in order to optimize for aggregate

1796
01:23:47,940 --> 01:23:50,280
cross cluster throughput because you

1797
01:23:50,280 --> 01:23:52,320
should see a compute cluster as one big

1798
01:23:52,320 --> 01:23:54,840
device which has internally fixed

1799
01:23:54,840 --> 01:23:56,760
constraints and thresholds

1800
01:23:56,760 --> 01:24:00,179
so for this we rolled out a format that

1801
01:24:00,179 --> 01:24:02,400
is native to us that's called small we

1802
01:24:02,400 --> 01:24:03,960
use this for our ground truth our

1803
01:24:03,960 --> 01:24:06,060
feature cache and any inference outputs

1804
01:24:06,060 --> 01:24:08,159
so a lot of tensors that are in there

1805
01:24:08,159 --> 01:24:10,500
and so just the cartoon here let's say

1806
01:24:10,500 --> 01:24:12,600
these are your uh is your table that you

1807
01:24:12,600 --> 01:24:14,280
want to store then that's how that would

1808
01:24:14,280 --> 01:24:16,440
look out if you rolled out on disk so

1809
01:24:16,440 --> 01:24:17,940
what you do is you take anything you'd

1810
01:24:17,940 --> 01:24:19,860
want to index on so for example video

1811
01:24:19,860 --> 01:24:22,080
timestamps you put those all in the

1812
01:24:22,080 --> 01:24:23,880
header so that in your initial header

1813
01:24:23,880 --> 01:24:25,500
read you know exactly where to go on

1814
01:24:25,500 --> 01:24:28,380
disk then if you have any tensors

1815
01:24:28,380 --> 01:24:30,659
uh you're going to try to transpose the

1816
01:24:30,659 --> 01:24:32,640
dimensions to put a different dimension

1817
01:24:32,640 --> 01:24:34,920
last as the contiguous Dimension and

1818
01:24:34,920 --> 01:24:36,719
then also try different types of

1819
01:24:36,719 --> 01:24:38,760
compression then you check out which one

1820
01:24:38,760 --> 01:24:40,920
was most optimal and then store that one

1821
01:24:40,920 --> 01:24:42,659
this is actually a huge step if you do

1822
01:24:42,659 --> 01:24:43,860
feature caching

1823
01:24:43,860 --> 01:24:45,719
unintelligible output from the machine

1824
01:24:45,719 --> 01:24:48,120
Learning Network rotate around the

1825
01:24:48,120 --> 01:24:49,560
dimensions a little bit you can get up

1826
01:24:49,560 --> 01:24:53,040
to 20 increase in efficiency of storage

1827
01:24:53,040 --> 01:24:56,540
then when you store that we also

1828
01:24:56,540 --> 01:24:59,460
ordered the columns by size so that all

1829
01:24:59,460 --> 01:25:01,260
your small columns and small values are

1830
01:25:01,260 --> 01:25:03,300
together so that when you seek for a

1831
01:25:03,300 --> 01:25:05,280
single value you're likely to overlap

1832
01:25:05,280 --> 01:25:07,260
with a read on more values which you'll

1833
01:25:07,260 --> 01:25:09,300
use later so that you don't need to do

1834
01:25:09,300 --> 01:25:12,060
another file system operation

1835
01:25:12,060 --> 01:25:15,000
so I could go on and on I just went on

1836
01:25:15,000 --> 01:25:17,340
on touched on two projects that we have

1837
01:25:17,340 --> 01:25:19,140
internally but this is actually part of

1838
01:25:19,140 --> 01:25:21,780
a huge continuous effort to optimize the

1839
01:25:21,780 --> 01:25:24,360
compute that we have in-house so

1840
01:25:24,360 --> 01:25:26,159
accumulating and aggregating through all

1841
01:25:26,159 --> 01:25:28,320
these optimizations We Now train our

1842
01:25:28,320 --> 01:25:30,480
occupancy networks twice as fast just

1843
01:25:30,480 --> 01:25:32,820
because it's twice as efficient and now

1844
01:25:32,820 --> 01:25:35,159
if we add in bunch more compute and go

1845
01:25:35,159 --> 01:25:37,140
parallel we cannot train this in hours

1846
01:25:37,140 --> 01:25:38,880
instead of days

1847
01:25:38,880 --> 01:25:40,980
and with that I'd like to hand it off to

1848
01:25:40,980 --> 01:25:44,659
the biggest user of compute John

1849
01:25:50,040 --> 01:25:52,620
hi everybody my name is John Emmons I

1850
01:25:52,620 --> 01:25:54,960
lead the autopilot Vision team

1851
01:25:54,960 --> 01:25:56,460
I'm going to cover two topics with you

1852
01:25:56,460 --> 01:25:57,300
today

1853
01:25:57,300 --> 01:25:59,460
the first is how we predict lanes and

1854
01:25:59,460 --> 01:26:00,719
the second is how we predict the future

1855
01:26:00,719 --> 01:26:04,159
behavior of other agents on the road

1856
01:26:04,380 --> 01:26:06,120
in the early days of autopilot we

1857
01:26:06,120 --> 01:26:08,100
modeled the lane detection problem as an

1858
01:26:08,100 --> 01:26:11,280
image space instant segmentation task

1859
01:26:11,280 --> 01:26:13,320
our network was super simple though in

1860
01:26:13,320 --> 01:26:14,880
fact it was only capable of printing

1861
01:26:14,880 --> 01:26:17,100
Lanes from of a few different kinds of

1862
01:26:17,100 --> 01:26:20,100
geometries specifically it would segment

1863
01:26:20,100 --> 01:26:22,320
the Eagle Lane it could segment adjacent

1864
01:26:22,320 --> 01:26:23,760
lanes and then it had some special

1865
01:26:23,760 --> 01:26:25,800
casing for forks and merges

1866
01:26:25,800 --> 01:26:27,480
this simplistic modeling of the problem

1867
01:26:27,480 --> 01:26:29,040
worked for highly structured roads like

1868
01:26:29,040 --> 01:26:31,020
highways

1869
01:26:31,020 --> 01:26:32,520
but today we're trying to build a system

1870
01:26:32,520 --> 01:26:34,260
that's capable of much more complex

1871
01:26:34,260 --> 01:26:36,360
Maneuvers specifically we want to make

1872
01:26:36,360 --> 01:26:37,860
left and right turns at intersections

1873
01:26:37,860 --> 01:26:39,780
where the road topology can be quite a

1874
01:26:39,780 --> 01:26:42,000
bit more complex and diverse when we try

1875
01:26:42,000 --> 01:26:43,679
to apply this simplistic modeling of the

1876
01:26:43,679 --> 01:26:47,780
problem here it just totally breaks down

1877
01:26:47,880 --> 01:26:49,739
taking a step back for a moment what

1878
01:26:49,739 --> 01:26:51,060
we're trying to do here is to predict

1879
01:26:51,060 --> 01:26:53,100
the spark set of lame instances in their

1880
01:26:53,100 --> 01:26:54,360
connectivity

1881
01:26:54,360 --> 01:26:55,860
and what we want to do is to have a

1882
01:26:55,860 --> 01:26:57,300
neural network that basically predicts

1883
01:26:57,300 --> 01:26:59,520
this graph where the nodes are the lane

1884
01:26:59,520 --> 01:27:01,320
segments and the edges encode the

1885
01:27:01,320 --> 01:27:04,580
connectivities between these Lanes

1886
01:27:04,860 --> 01:27:07,020
so what we have is our lane detection

1887
01:27:07,020 --> 01:27:08,520
neural network

1888
01:27:08,520 --> 01:27:11,280
it's made up of three components

1889
01:27:11,280 --> 01:27:13,139
in the first component we have a set of

1890
01:27:13,139 --> 01:27:14,639
convolutional layers attention layers

1891
01:27:14,639 --> 01:27:16,380
and other neural network layers that

1892
01:27:16,380 --> 01:27:18,239
encode the video streams from our eight

1893
01:27:18,239 --> 01:27:20,040
cameras on the vehicle and produce a

1894
01:27:20,040 --> 01:27:23,300
rich visual representation

1895
01:27:23,400 --> 01:27:24,719
we then enhance this digital

1896
01:27:24,719 --> 01:27:27,960
representation with a coarse roadmap

1897
01:27:27,960 --> 01:27:31,260
Road level map data which we encode with

1898
01:27:31,260 --> 01:27:32,400
a set of additional neural network

1899
01:27:32,400 --> 01:27:33,840
layers that we call the lane guidance

1900
01:27:33,840 --> 01:27:35,100
module

1901
01:27:35,100 --> 01:27:37,199
this map is not an HD map but it

1902
01:27:37,199 --> 01:27:38,580
provides a lot of useful hints about the

1903
01:27:38,580 --> 01:27:39,659
topology of lanes inside of

1904
01:27:39,659 --> 01:27:41,520
intersections the lane counts on various

1905
01:27:41,520 --> 01:27:43,380
roads and a set of other attributes that

1906
01:27:43,380 --> 01:27:45,679
help us

1907
01:27:46,620 --> 01:27:48,600
the first two components here produced a

1908
01:27:48,600 --> 01:27:50,400
dense tensor that sort of encodes the

1909
01:27:50,400 --> 01:27:52,800
world but what we really want to do is

1910
01:27:52,800 --> 01:27:54,540
to convert this dense tensor into a

1911
01:27:54,540 --> 01:27:55,739
smart set of lanes in their

1912
01:27:55,739 --> 01:27:57,780
connectivities

1913
01:27:57,780 --> 01:27:59,760
we approach this problem like an image

1914
01:27:59,760 --> 01:28:02,159
captioning task where the input is this

1915
01:28:02,159 --> 01:28:04,320
dense tensor and the output text is

1916
01:28:04,320 --> 01:28:06,179
predicted into a special language that

1917
01:28:06,179 --> 01:28:08,040
we developed at Tesla for encoding Lanes

1918
01:28:08,040 --> 01:28:09,659
in their connectivities

1919
01:28:09,659 --> 01:28:11,880
in this language of lanes the words and

1920
01:28:11,880 --> 01:28:13,620
tokens are the lane positions in 3D

1921
01:28:13,620 --> 01:28:14,400
space

1922
01:28:14,400 --> 01:28:15,659
in The Ordering of the tokens

1923
01:28:15,659 --> 01:28:17,520
introducted modifiers in the tokens

1924
01:28:17,520 --> 01:28:19,139
encode the connective relationships

1925
01:28:19,139 --> 01:28:21,120
between these Lanes

1926
01:28:21,120 --> 01:28:22,560
by modeling the task as a language

1927
01:28:22,560 --> 01:28:24,420
problem we can capitalize on recent

1928
01:28:24,420 --> 01:28:26,340
autoregressive architectures

1929
01:28:26,340 --> 01:28:27,420
and techniques from the language

1930
01:28:27,420 --> 01:28:28,980
Community for handling the multiple

1931
01:28:28,980 --> 01:28:30,780
modality of the problem

1932
01:28:30,780 --> 01:28:31,860
we're not just solving the computer

1933
01:28:31,860 --> 01:28:33,780
vision problem at autopilot we're also

1934
01:28:33,780 --> 01:28:34,980
applying the state-of-the-art and

1935
01:28:34,980 --> 01:28:36,239
language modeling and machine learning

1936
01:28:36,239 --> 01:28:38,460
more generally

1937
01:28:38,460 --> 01:28:39,900
I'm now going to dive into a little bit

1938
01:28:39,900 --> 01:28:42,840
more detail this language component

1939
01:28:42,840 --> 01:28:44,580
what I have depicted on the screen here

1940
01:28:44,580 --> 01:28:46,500
is the satellite image which sort of

1941
01:28:46,500 --> 01:28:48,179
represents the local area around the

1942
01:28:48,179 --> 01:28:48,960
vehicle

1943
01:28:48,960 --> 01:28:51,540
the set of nosing edges is what we refer

1944
01:28:51,540 --> 01:28:53,159
to as the lane graph and it's ultimately

1945
01:28:53,159 --> 01:28:54,420
what we want to come out of this neural

1946
01:28:54,420 --> 01:28:56,540
network

1947
01:28:56,699 --> 01:28:59,219
we start with a blank slate

1948
01:28:59,219 --> 01:29:00,179
we're going to want to make our first

1949
01:29:00,179 --> 01:29:03,360
prediction here at this Green Dot

1950
01:29:03,360 --> 01:29:05,219
this green dots position is encoded as

1951
01:29:05,219 --> 01:29:06,540
an index into a course grid which

1952
01:29:06,540 --> 01:29:08,880
discretizes the 3D World

1953
01:29:08,880 --> 01:29:10,620
now we don't predict this index directly

1954
01:29:10,620 --> 01:29:11,880
because it would be too computationally

1955
01:29:11,880 --> 01:29:14,280
expensive to do so there's just too many

1956
01:29:14,280 --> 01:29:16,260
grid points and predicting a categorical

1957
01:29:16,260 --> 01:29:17,940
distribution over this has both

1958
01:29:17,940 --> 01:29:19,380
implications at training time and test

1959
01:29:19,380 --> 01:29:20,400
time

1960
01:29:20,400 --> 01:29:22,320
so instead what we do is we disretch the

1961
01:29:22,320 --> 01:29:24,239
world coarsely first we predict a heat

1962
01:29:24,239 --> 01:29:26,580
map over the possible locations and then

1963
01:29:26,580 --> 01:29:28,800
we latch in the most probable location

1964
01:29:28,800 --> 01:29:31,199
on this we then refine the prediction

1965
01:29:31,199 --> 01:29:34,760
and get the precise point

1966
01:29:34,800 --> 01:29:36,120
now we know where the position of this

1967
01:29:36,120 --> 01:29:38,699
token is we don't know its type in this

1968
01:29:38,699 --> 01:29:40,320
case though it's the beginning of a new

1969
01:29:40,320 --> 01:29:41,639
Lane

1970
01:29:41,639 --> 01:29:44,340
so we approach it as a start token

1971
01:29:44,340 --> 01:29:46,320
and because it's a star token there's no

1972
01:29:46,320 --> 01:29:48,900
additional attributes in our language

1973
01:29:48,900 --> 01:29:50,580
we then take the predictions from this

1974
01:29:50,580 --> 01:29:52,500
first forward pass and we encode them

1975
01:29:52,500 --> 01:29:54,300
using a learned additional embedding

1976
01:29:54,300 --> 01:29:56,040
which produces a set of tensors that we

1977
01:29:56,040 --> 01:29:58,080
combine together

1978
01:29:58,080 --> 01:30:00,120
which is actually the first word in our

1979
01:30:00,120 --> 01:30:01,860
language of lanes we add this to the you

1980
01:30:01,860 --> 01:30:04,380
know first position in our sentence here

1981
01:30:04,380 --> 01:30:06,420
we then continue this process by

1982
01:30:06,420 --> 01:30:08,340
printing the next Lane point in a

1983
01:30:08,340 --> 01:30:10,080
similar fashion

1984
01:30:10,080 --> 01:30:11,460
now this Lane point is not the beginning

1985
01:30:11,460 --> 01:30:12,900
of a new Lane it's actually a

1986
01:30:12,900 --> 01:30:15,420
continuation of the previous Lane

1987
01:30:15,420 --> 01:30:18,900
so it's a continuation token type

1988
01:30:18,900 --> 01:30:20,580
now it's not enough just to know that

1989
01:30:20,580 --> 01:30:22,440
this Lane is connected to the previously

1990
01:30:22,440 --> 01:30:24,360
protected plane we want to encode its

1991
01:30:24,360 --> 01:30:25,620
precise geometry which we do by

1992
01:30:25,620 --> 01:30:29,300
regressing a set of spline coefficients

1993
01:30:29,460 --> 01:30:31,980
we then take this Lane we encode it

1994
01:30:31,980 --> 01:30:33,480
again and add it as the next word in the

1995
01:30:33,480 --> 01:30:34,920
sentence

1996
01:30:34,920 --> 01:30:36,120
we continue predicting these

1997
01:30:36,120 --> 01:30:38,040
continuation Lanes until we get to the

1998
01:30:38,040 --> 01:30:39,960
end of the prediction grid

1999
01:30:39,960 --> 01:30:41,340
we then move on to a different Lane

2000
01:30:41,340 --> 01:30:42,659
segment

2001
01:30:42,659 --> 01:30:44,580
so you can see that cyan dot there now

2002
01:30:44,580 --> 01:30:46,260
it's it's not topologically connected to

2003
01:30:46,260 --> 01:30:48,060
that pink point it's actually forking

2004
01:30:48,060 --> 01:30:50,580
off of that that blue sorry that green

2005
01:30:50,580 --> 01:30:52,739
point there

2006
01:30:52,739 --> 01:30:55,980
so it's got a fork type and Fork tokens

2007
01:30:55,980 --> 01:30:58,620
actually point back to previous tokens

2008
01:30:58,620 --> 01:31:01,380
from which the fork originates so you

2009
01:31:01,380 --> 01:31:03,060
can see here the fork Point predictor is

2010
01:31:03,060 --> 01:31:04,440
actually the index zero so it's actually

2011
01:31:04,440 --> 01:31:06,000
referencing back to tokens that it's

2012
01:31:06,000 --> 01:31:07,139
already predicted like you would in

2013
01:31:07,139 --> 01:31:09,440
language

2014
01:31:09,719 --> 01:31:11,639
we continue this process over and over

2015
01:31:11,639 --> 01:31:13,260
again until we've enumerated all of the

2016
01:31:13,260 --> 01:31:15,540
tokens in the Ling graph and then the

2017
01:31:15,540 --> 01:31:16,739
network predicts the end of sentence

2018
01:31:16,739 --> 01:31:18,840
token

2019
01:31:18,840 --> 01:31:21,360
yeah I just want to note that the reason

2020
01:31:21,360 --> 01:31:23,040
we do this is not just because we want

2021
01:31:23,040 --> 01:31:24,300
to build something complicated it's

2022
01:31:24,300 --> 01:31:25,679
almost feels like a turing complete

2023
01:31:25,679 --> 01:31:27,179
machine here with neural networks though

2024
01:31:27,179 --> 01:31:29,580
is that we tried simple approaches for

2025
01:31:29,580 --> 01:31:31,560
example uh trying to just segment the

2026
01:31:31,560 --> 01:31:33,600
lanes along the road or something like

2027
01:31:33,600 --> 01:31:35,280
that but then the problem is when

2028
01:31:35,280 --> 01:31:37,679
there's uncertainty say you cannot see

2029
01:31:37,679 --> 01:31:39,120
the road clearly and there could be two

2030
01:31:39,120 --> 01:31:40,620
lanes or three lanes and you can't tell

2031
01:31:40,620 --> 01:31:42,600
a simple segmentation based approach

2032
01:31:42,600 --> 01:31:44,760
would just draw both of them

2033
01:31:44,760 --> 01:31:47,400
is kind of a 2.5 Lane situation and the

2034
01:31:47,400 --> 01:31:48,540
post processing algorithm would

2035
01:31:48,540 --> 01:31:50,340
hilariously fail when the predictions

2036
01:31:50,340 --> 01:31:51,540
are such

2037
01:31:51,540 --> 01:31:53,400
yeah the problems don't end there I mean

2038
01:31:53,400 --> 01:31:55,139
you need to predict these connective

2039
01:31:55,139 --> 01:31:56,400
conditions like these connective Lanes

2040
01:31:56,400 --> 01:31:58,080
inside of intersections which it's just

2041
01:31:58,080 --> 01:31:59,460
not possible with the approach that

2042
01:31:59,460 --> 01:32:00,659
ashok's mentioning which is why we had

2043
01:32:00,659 --> 01:32:02,520
to upgrade to this sort of like overlaps

2044
01:32:02,520 --> 01:32:03,960
like this segmentation would just go

2045
01:32:03,960 --> 01:32:05,940
Haywire but even if you try very hard to

2046
01:32:05,940 --> 01:32:07,500
you know put them on separate layers

2047
01:32:07,500 --> 01:32:09,360
it's just a really hard problem what

2048
01:32:09,360 --> 01:32:10,860
language just offers a really nice

2049
01:32:10,860 --> 01:32:13,980
framework for modern getting a

2050
01:32:13,980 --> 01:32:16,139
sample from a posterior as opposed to

2051
01:32:16,139 --> 01:32:17,880
you know trying to do all of this in

2052
01:32:17,880 --> 01:32:19,080
post-processing

2053
01:32:19,080 --> 01:32:20,760
but this doesn't actually stop for just

2054
01:32:20,760 --> 01:32:22,440
autopilot right John this can be used

2055
01:32:22,440 --> 01:32:23,820
for Optimus

2056
01:32:23,820 --> 01:32:25,320
again you know I guess they wouldn't be

2057
01:32:25,320 --> 01:32:26,820
called Lanes but you could imagine you

2058
01:32:26,820 --> 01:32:28,320
know sort of in this you know stage here

2059
01:32:28,320 --> 01:32:30,300
that you might have sort of paths that

2060
01:32:30,300 --> 01:32:31,739
sort of you know encode the possible

2061
01:32:31,739 --> 01:32:33,900
places that people could walk

2062
01:32:33,900 --> 01:32:35,460
yeah it's basically if you're in a

2063
01:32:35,460 --> 01:32:38,219
factory or in a you know home setting

2064
01:32:38,219 --> 01:32:40,080
you can just ask the robot okay let me

2065
01:32:40,080 --> 01:32:42,179
please talk to the kitchen or please

2066
01:32:42,179 --> 01:32:43,920
route to some location in the factory

2067
01:32:43,920 --> 01:32:46,260
and then we predict a set of Pathways

2068
01:32:46,260 --> 01:32:47,340
that would you know go through the

2069
01:32:47,340 --> 01:32:49,080
aisles take the robot and say okay this

2070
01:32:49,080 --> 01:32:50,880
is how you get to the kitchen it just

2071
01:32:50,880 --> 01:32:52,679
really gives us a nice framework to

2072
01:32:52,679 --> 01:32:54,060
model these different paths that

2073
01:32:54,060 --> 01:32:56,040
simplify the navigation problem or the

2074
01:32:56,040 --> 01:32:58,880
downstream planner

2075
01:33:00,179 --> 01:33:02,219
all right so ultimately what we get from

2076
01:33:02,219 --> 01:33:04,500
this Lane detection network is a set of

2077
01:33:04,500 --> 01:33:05,880
lanes in their connectivities which

2078
01:33:05,880 --> 01:33:07,260
comes directly from the network there's

2079
01:33:07,260 --> 01:33:09,420
no additional step here for as far

2080
01:33:09,420 --> 01:33:10,800
simplifying these you know dense

2081
01:33:10,800 --> 01:33:12,840
predictions into into indispersed ones

2082
01:33:12,840 --> 01:33:14,580
this is just a direct unfiltered output

2083
01:33:14,580 --> 01:33:16,880
of the network

2084
01:33:18,300 --> 01:33:19,620
okay so I talked a little bit about

2085
01:33:19,620 --> 01:33:21,179
Lanes I'm going to briefly touch on how

2086
01:33:21,179 --> 01:33:24,420
we model and predict the future paths in

2087
01:33:24,420 --> 01:33:26,699
other semantics on objects

2088
01:33:26,699 --> 01:33:27,900
so I'm just going to go really quickly

2089
01:33:27,900 --> 01:33:29,940
through two examples the video on the

2090
01:33:29,940 --> 01:33:31,380
right here we've got a car that's

2091
01:33:31,380 --> 01:33:32,880
actually running a red light and turning

2092
01:33:32,880 --> 01:33:35,100
in front of us what we do to handle

2093
01:33:35,100 --> 01:33:37,679
situations like this is we predict a set

2094
01:33:37,679 --> 01:33:39,000
of short time Horizon future

2095
01:33:39,000 --> 01:33:41,400
trajectories on all objects we can use

2096
01:33:41,400 --> 01:33:43,199
these to anticipate the dangerous

2097
01:33:43,199 --> 01:33:45,300
situation here and apply whatever you

2098
01:33:45,300 --> 01:33:46,380
know braking and steering action is

2099
01:33:46,380 --> 01:33:48,239
required to avoid a collision

2100
01:33:48,239 --> 01:33:50,100
in the video on the right there's two

2101
01:33:50,100 --> 01:33:52,199
vehicles in front of us the one on the

2102
01:33:52,199 --> 01:33:54,600
left lane is parked apparently it's

2103
01:33:54,600 --> 01:33:55,920
being loaded unloaded I don't know why

2104
01:33:55,920 --> 01:33:57,840
the driver decided to park there but the

2105
01:33:57,840 --> 01:33:58,860
important thing is that our neural

2106
01:33:58,860 --> 01:34:00,780
network predicted that it was stopped

2107
01:34:00,780 --> 01:34:03,060
which is the red color there

2108
01:34:03,060 --> 01:34:04,739
um the vehicle on the other lane as you

2109
01:34:04,739 --> 01:34:06,840
notice also is stationary but that one's

2110
01:34:06,840 --> 01:34:07,800
obviously just waiting for that red

2111
01:34:07,800 --> 01:34:09,659
light to turn green so even though both

2112
01:34:09,659 --> 01:34:11,159
objects are stationary and have zero

2113
01:34:11,159 --> 01:34:12,960
velocity it's the semantics that is

2114
01:34:12,960 --> 01:34:14,460
really important here so that we don't

2115
01:34:14,460 --> 01:34:15,960
get stuck behind that awkwardly parked

2116
01:34:15,960 --> 01:34:18,080
car

2117
01:34:19,080 --> 01:34:21,060
predicting all of these agent attributes

2118
01:34:21,060 --> 01:34:22,560
presents some practical problems when

2119
01:34:22,560 --> 01:34:24,300
trying to build a real-time system

2120
01:34:24,300 --> 01:34:26,040
we need to maximize the frame rate of

2121
01:34:26,040 --> 01:34:27,840
our object section stack so that

2122
01:34:27,840 --> 01:34:29,219
autopilot can quickly react to the

2123
01:34:29,219 --> 01:34:30,360
changing environment

2124
01:34:30,360 --> 01:34:32,760
every millisecond really matters here

2125
01:34:32,760 --> 01:34:34,920
to minimize the inference latency our

2126
01:34:34,920 --> 01:34:37,020
neural network is split into two phases

2127
01:34:37,020 --> 01:34:39,179
in the first phase we identified

2128
01:34:39,179 --> 01:34:42,540
locations in 3D space where agents exist

2129
01:34:42,540 --> 01:34:44,460
in the second stage we then pull out

2130
01:34:44,460 --> 01:34:46,980
tensors at those 3D locations append it

2131
01:34:46,980 --> 01:34:48,600
with additional data that's on the

2132
01:34:48,600 --> 01:34:50,760
vehicle and then we you know do the rest

2133
01:34:50,760 --> 01:34:52,020
of the processing

2134
01:34:52,020 --> 01:34:54,120
this specification step allows the

2135
01:34:54,120 --> 01:34:55,800
neural network to focus compute on the

2136
01:34:55,800 --> 01:34:57,600
areas that matter most which gives us

2137
01:34:57,600 --> 01:34:59,100
Superior performance for a fraction of

2138
01:34:59,100 --> 01:35:00,960
the latency cost

2139
01:35:00,960 --> 01:35:03,300
so putting it all together

2140
01:35:03,300 --> 01:35:04,920
the autopilot Vision stack predicts more

2141
01:35:04,920 --> 01:35:06,239
than just the geometry and kinematics of

2142
01:35:06,239 --> 01:35:08,340
the world it also predicts a rich set of

2143
01:35:08,340 --> 01:35:10,020
semantics which enables safe and

2144
01:35:10,020 --> 01:35:11,280
human-like driving

2145
01:35:11,280 --> 01:35:12,480
I'm not going to hand things off to

2146
01:35:12,480 --> 01:35:13,500
streak we'll tell us how we run all

2147
01:35:13,500 --> 01:35:15,179
these cool neural networks on our FSD

2148
01:35:15,179 --> 01:35:18,020
computer thank you

2149
01:35:18,250 --> 01:35:24,179
[Applause]

2150
01:35:24,179 --> 01:35:26,580
hi everyone I'm SRI

2151
01:35:26,580 --> 01:35:28,380
today I'm going to give glimpse of what

2152
01:35:28,380 --> 01:35:30,239
it takes to run this FSC networks in the

2153
01:35:30,239 --> 01:35:32,340
car and how do we optimize for the

2154
01:35:32,340 --> 01:35:34,020
inference latency

2155
01:35:34,020 --> 01:35:36,000
uh today I'm going to focus just on the

2156
01:35:36,000 --> 01:35:37,860
FSG Lanes Network that John just talked

2157
01:35:37,860 --> 01:35:39,920
about

2158
01:35:41,699 --> 01:35:44,340
so when you started this track we wanted

2159
01:35:44,340 --> 01:35:46,440
to know if we can run this FSC Lanes

2160
01:35:46,440 --> 01:35:48,420
Network natively on the trip engine

2161
01:35:48,420 --> 01:35:50,280
which is our in-house neural network

2162
01:35:50,280 --> 01:35:52,620
accelerator that we built in the FSD

2163
01:35:52,620 --> 01:35:53,520
computer

2164
01:35:53,520 --> 01:35:55,920
when we build this Hardware we kept it

2165
01:35:55,920 --> 01:35:58,920
simple and we made sure it can do one

2166
01:35:58,920 --> 01:36:01,620
thing ridiculously fast dense dot

2167
01:36:01,620 --> 01:36:04,679
products but this architecture is auto

2168
01:36:04,679 --> 01:36:07,620
regressive and iterative where it

2169
01:36:07,620 --> 01:36:09,300
crunches through multiple attention

2170
01:36:09,300 --> 01:36:11,400
attention blocks in the Inner Loop

2171
01:36:11,400 --> 01:36:13,860
producing sparse points directly at

2172
01:36:13,860 --> 01:36:16,800
every step so the challenge here was how

2173
01:36:16,800 --> 01:36:18,659
can we do this parse Point prediction

2174
01:36:18,659 --> 01:36:21,060
and sparse computation on a dense dot

2175
01:36:21,060 --> 01:36:23,280
product engine let's see how we did this

2176
01:36:23,280 --> 01:36:25,560
on the trip

2177
01:36:25,560 --> 01:36:29,040
so the network predicts the heat map of

2178
01:36:29,040 --> 01:36:31,739
most probable spatial locations of the

2179
01:36:31,739 --> 01:36:35,400
point now we do a Arc Max and a one

2180
01:36:35,400 --> 01:36:37,739
heart operation which gives the one hard

2181
01:36:37,739 --> 01:36:39,960
encoding of the index of the spatial

2182
01:36:39,960 --> 01:36:41,460
location

2183
01:36:41,460 --> 01:36:43,920
now we need to select the embedding

2184
01:36:43,920 --> 01:36:46,080
associated with this index from an

2185
01:36:46,080 --> 01:36:48,120
embedding table that is learned during

2186
01:36:48,120 --> 01:36:49,260
training

2187
01:36:49,260 --> 01:36:51,960
to do this on trip we actually built a

2188
01:36:51,960 --> 01:36:54,900
lookup table in SRAM and we engineered

2189
01:36:54,900 --> 01:36:57,000
the dimensions of this embedding such

2190
01:36:57,000 --> 01:36:59,520
that we could achieve all of this thing

2191
01:36:59,520 --> 01:37:02,639
with just matrix multiplication

2192
01:37:02,639 --> 01:37:05,580
not just that we also wanted to store

2193
01:37:05,580 --> 01:37:07,860
this embedding into a token cache so

2194
01:37:07,860 --> 01:37:09,480
that we don't recompute this for every

2195
01:37:09,480 --> 01:37:11,820
iteration rather reuse it for future

2196
01:37:11,820 --> 01:37:14,219
Point prediction again we pulled some

2197
01:37:14,219 --> 01:37:16,139
tricks here where we did all these

2198
01:37:16,139 --> 01:37:18,060
operations just on the dot product

2199
01:37:18,060 --> 01:37:21,120
engine it's actually cool that our team

2200
01:37:21,120 --> 01:37:23,520
found creative ways to map all these

2201
01:37:23,520 --> 01:37:26,400
operations on the trip engine in ways

2202
01:37:26,400 --> 01:37:28,320
that were not even imagined when this

2203
01:37:28,320 --> 01:37:31,080
Hardware was designed

2204
01:37:31,080 --> 01:37:33,420
but that's not the only thing we have to

2205
01:37:33,420 --> 01:37:35,460
do to make this work we actually

2206
01:37:35,460 --> 01:37:37,560
implemented a whole lot of operations

2207
01:37:37,560 --> 01:37:39,840
and features to make this model

2208
01:37:39,840 --> 01:37:42,120
compilable to improve the intake

2209
01:37:42,120 --> 01:37:44,040
accuracy as well as to optimize

2210
01:37:44,040 --> 01:37:45,420
performance

2211
01:37:45,420 --> 01:37:48,600
all of these things helped us run the 75

2212
01:37:48,600 --> 01:37:51,300
million parameter model just under 10

2213
01:37:51,300 --> 01:37:53,940
millisecond of latency consuming just 8

2214
01:37:53,940 --> 01:37:56,659
watts of power

2215
01:37:56,940 --> 01:37:59,100
but this is not the only architecture

2216
01:37:59,100 --> 01:38:00,780
running in the car there are so many

2217
01:38:00,780 --> 01:38:03,300
other architectures modules and networks

2218
01:38:03,300 --> 01:38:04,800
we need to run in the car

2219
01:38:04,800 --> 01:38:07,500
to give a sense of scale there are about

2220
01:38:07,500 --> 01:38:10,440
a billion parameters of all the networks

2221
01:38:10,440 --> 01:38:12,659
combined producing around 1000 neural

2222
01:38:12,659 --> 01:38:15,659
network signals so we need to make sure

2223
01:38:15,659 --> 01:38:18,719
we optimize them jointly and

2224
01:38:18,719 --> 01:38:21,300
such that we maximize the compute

2225
01:38:21,300 --> 01:38:23,340
utilization throughput and minimize the

2226
01:38:23,340 --> 01:38:25,679
latency

2227
01:38:25,679 --> 01:38:28,679
so we built a compiler just for neural

2228
01:38:28,679 --> 01:38:30,719
networks that shares the structure to

2229
01:38:30,719 --> 01:38:32,760
traditional compilers

2230
01:38:32,760 --> 01:38:35,159
as you can see it takes the massive

2231
01:38:35,159 --> 01:38:38,460
graph of neural Nets with 150k nodes and

2232
01:38:38,460 --> 01:38:40,880
375k connection takes this thing

2233
01:38:40,880 --> 01:38:43,080
partitions them into independent

2234
01:38:43,080 --> 01:38:46,020
subgraphs and com compels each of those

2235
01:38:46,020 --> 01:38:48,300
subgraphs natively for the inference

2236
01:38:48,300 --> 01:38:51,239
devices then we have a neural network

2237
01:38:51,239 --> 01:38:53,520
Linker which shares the structure to

2238
01:38:53,520 --> 01:38:55,679
traditional Linker where we perform this

2239
01:38:55,679 --> 01:38:57,360
link time optimization

2240
01:38:57,360 --> 01:38:59,699
there we solve an offline optimization

2241
01:38:59,699 --> 01:39:00,780
problem

2242
01:39:00,780 --> 01:39:04,080
uh for with compute memory and memory

2243
01:39:04,080 --> 01:39:06,360
bandwidth constraints so that it comes

2244
01:39:06,360 --> 01:39:07,980
with an optimized schedule that gets

2245
01:39:07,980 --> 01:39:10,320
executed in the car

2246
01:39:10,320 --> 01:39:13,080
on the runtime we designed a hybrid

2247
01:39:13,080 --> 01:39:15,600
scheduling system which basically does

2248
01:39:15,600 --> 01:39:18,179
heterogeneous scheduling on one SOC and

2249
01:39:18,179 --> 01:39:20,280
distributed scheduling across both the

2250
01:39:20,280 --> 01:39:22,560
socs to run these networks in a model

2251
01:39:22,560 --> 01:39:24,239
parallel fashion

2252
01:39:24,239 --> 01:39:27,060
to get 100 drops of compute utilization

2253
01:39:27,060 --> 01:39:29,699
we need to optimize across all the

2254
01:39:29,699 --> 01:39:32,280
layers of software right from tuning the

2255
01:39:32,280 --> 01:39:34,920
network architecture the compiler all

2256
01:39:34,920 --> 01:39:36,960
the way to implementing a low latency

2257
01:39:36,960 --> 01:39:39,659
high bandwidth RDMA link across both the

2258
01:39:39,659 --> 01:39:42,960
srcs and in fact going even deeper to

2259
01:39:42,960 --> 01:39:45,300
understanding and optimizing the cache

2260
01:39:45,300 --> 01:39:47,639
coherent and non-coherent data Paths of

2261
01:39:47,639 --> 01:39:50,100
the accelerator in the soc this is a lot

2262
01:39:50,100 --> 01:39:52,380
of optimization at every level in order

2263
01:39:52,380 --> 01:39:54,239
to make sure we get the highest frame

2264
01:39:54,239 --> 01:39:57,239
rate and as every millisecond counts

2265
01:39:57,239 --> 01:39:59,300
here

2266
01:39:59,400 --> 01:40:03,120
and this is this is just the this is the

2267
01:40:03,120 --> 01:40:04,860
visualization of the neural networks

2268
01:40:04,860 --> 01:40:06,780
that are running in the car this is our

2269
01:40:06,780 --> 01:40:09,420
digital brain essentially as you can see

2270
01:40:09,420 --> 01:40:11,219
these operations are nothing but just

2271
01:40:11,219 --> 01:40:12,960
the matrix multiplication convolution to

2272
01:40:12,960 --> 01:40:13,920
name a few

2273
01:40:13,920 --> 01:40:16,920
real operations running in the car

2274
01:40:16,920 --> 01:40:19,320
to train or train this network with a

2275
01:40:19,320 --> 01:40:21,600
billion parameters you need a lot of

2276
01:40:21,600 --> 01:40:24,239
labeled data so aegon is going to talk

2277
01:40:24,239 --> 01:40:26,699
about how do we achieve this with the

2278
01:40:26,699 --> 01:40:29,719
auto labeling pipeline

2279
01:40:31,860 --> 01:40:33,980
thank you

2280
01:40:35,040 --> 01:40:36,239
uh

2281
01:40:36,239 --> 01:40:37,560
thank you Sherry

2282
01:40:37,560 --> 01:40:40,260
uh hi everyone I'm Jurgen Zhang and I'm

2283
01:40:40,260 --> 01:40:42,659
leading a geometric Vision at autopilot

2284
01:40:42,659 --> 01:40:44,520
so

2285
01:40:44,520 --> 01:40:48,300
yeah let's talk about Auto labeling

2286
01:40:48,300 --> 01:40:50,760
so we have several kinds of all the

2287
01:40:50,760 --> 01:40:52,679
labeling Frameworks to support various

2288
01:40:52,679 --> 01:40:55,139
types of networks but today I'd like to

2289
01:40:55,139 --> 01:40:58,580
focus on the awesome Lanes net here

2290
01:40:58,580 --> 01:41:02,400
so to successfully train and generalize

2291
01:41:02,400 --> 01:41:05,460
this network to everywhere we think we

2292
01:41:05,460 --> 01:41:07,679
went tens of millions of trips from

2293
01:41:07,679 --> 01:41:10,800
probably one one million intersection or

2294
01:41:10,800 --> 01:41:11,820
even more

2295
01:41:11,820 --> 01:41:13,560
so

2296
01:41:13,560 --> 01:41:17,400
then how to do that so it is certainly

2297
01:41:17,400 --> 01:41:20,219
achievable uh to Source sufficient

2298
01:41:20,219 --> 01:41:22,560
amount of trips because we already have

2299
01:41:22,560 --> 01:41:24,300
as Tim explained earlier we already have

2300
01:41:24,300 --> 01:41:28,199
like 500 000 trips per day cash rate

2301
01:41:28,199 --> 01:41:30,719
um however converting all those data

2302
01:41:30,719 --> 01:41:33,000
into a training form is a very

2303
01:41:33,000 --> 01:41:36,080
challenging technical problem

2304
01:41:36,480 --> 01:41:39,600
to solve this challenge we tried various

2305
01:41:39,600 --> 01:41:42,600
ways of manual and auto labeling so from

2306
01:41:42,600 --> 01:41:44,760
the First Column to the second from the

2307
01:41:44,760 --> 01:41:46,500
second to the third each Advance

2308
01:41:46,500 --> 01:41:49,260
provided us nearly 100x Improvement in

2309
01:41:49,260 --> 01:41:50,400
throughput

2310
01:41:50,400 --> 01:41:53,639
but still uh we won an even better Auto

2311
01:41:53,639 --> 01:41:55,320
labeling machine that can provide

2312
01:41:55,320 --> 01:41:58,860
provide providers good quality diversity

2313
01:41:58,860 --> 01:42:02,060
and scalability

2314
01:42:02,580 --> 01:42:05,219
to meet all these requirements uh

2315
01:42:05,219 --> 01:42:07,139
despite the huge amount of engineering

2316
01:42:07,139 --> 01:42:10,500
effort required here we've developed a

2317
01:42:10,500 --> 01:42:12,719
new order labeling machine powered by

2318
01:42:12,719 --> 01:42:14,880
multi-trib reconstruction

2319
01:42:14,880 --> 01:42:18,179
so this can replace 5 million hours of

2320
01:42:18,179 --> 01:42:20,880
manual labeling with just 12 hours on

2321
01:42:20,880 --> 01:42:24,420
cluster for labeling 10 000 trips

2322
01:42:24,420 --> 01:42:26,639
so how we solved there are three big

2323
01:42:26,639 --> 01:42:29,400
steps the first step is high Precision

2324
01:42:29,400 --> 01:42:31,500
trajectory and structure recovery by

2325
01:42:31,500 --> 01:42:34,560
multi-camera visual inertial odometry

2326
01:42:34,560 --> 01:42:36,360
so here all the features including

2327
01:42:36,360 --> 01:42:38,159
ground surface are inferred from videos

2328
01:42:38,159 --> 01:42:41,040
by neural networks then tracked and

2329
01:42:41,040 --> 01:42:44,040
reconstructed in the vector space

2330
01:42:44,040 --> 01:42:46,619
so the typical drift rate of this

2331
01:42:46,619 --> 01:42:49,860
trajectory in car is like 1.3 centimeter

2332
01:42:49,860 --> 01:42:52,500
per meter and 0.45 Milli radian per

2333
01:42:52,500 --> 01:42:54,600
meter which is pretty decent uh

2334
01:42:54,600 --> 01:42:56,280
considering it's compact compute

2335
01:42:56,280 --> 01:42:57,420
requirement

2336
01:42:57,420 --> 01:42:59,699
than the recovery service and raw

2337
01:42:59,699 --> 01:43:01,619
details are also used as a strong

2338
01:43:01,619 --> 01:43:03,360
guidance for the later manual

2339
01:43:03,360 --> 01:43:05,100
verification step

2340
01:43:05,100 --> 01:43:07,679
this is also enabled in every FSD

2341
01:43:07,679 --> 01:43:10,139
vehicle so we get pre-processed

2342
01:43:10,139 --> 01:43:12,300
trajectories and structures along with

2343
01:43:12,300 --> 01:43:15,020
the trip data

2344
01:43:16,020 --> 01:43:18,360
the second step is multi-2

2345
01:43:18,360 --> 01:43:20,699
reconstruction which is the big and core

2346
01:43:20,699 --> 01:43:22,380
piece of this machine

2347
01:43:22,380 --> 01:43:25,020
so the video shows how the previously

2348
01:43:25,020 --> 01:43:27,480
shown trip is reconstructed and aligned

2349
01:43:27,480 --> 01:43:29,639
with other trips basically other trips

2350
01:43:29,639 --> 01:43:31,380
from different people not the same

2351
01:43:31,380 --> 01:43:33,960
vehicle so this is done by multiple

2352
01:43:33,960 --> 01:43:35,820
internet steps like course alignment

2353
01:43:35,820 --> 01:43:38,100
pairwise matching joint optimization

2354
01:43:38,100 --> 01:43:40,739
then further surface refinement

2355
01:43:40,739 --> 01:43:43,800
in the end the human analyst comes in

2356
01:43:43,800 --> 01:43:46,380
and finalizes the label

2357
01:43:46,380 --> 01:43:49,260
so each happy steps are already fully

2358
01:43:49,260 --> 01:43:51,840
parallelized on the cluster so the

2359
01:43:51,840 --> 01:43:53,880
entire process usually takes just a

2360
01:43:53,880 --> 01:43:56,300
couple of hours

2361
01:43:57,300 --> 01:44:00,540
the last step is actually Auto labeling

2362
01:44:00,540 --> 01:44:02,699
the new trips so

2363
01:44:02,699 --> 01:44:04,860
here we use the same multi-trip

2364
01:44:04,860 --> 01:44:07,260
alignment engine but only between

2365
01:44:07,260 --> 01:44:09,719
pre-built reconstruction and each new

2366
01:44:09,719 --> 01:44:12,300
trip so it's much much simpler than

2367
01:44:12,300 --> 01:44:13,860
fully reconstructing all the clips

2368
01:44:13,860 --> 01:44:14,820
altogether

2369
01:44:14,820 --> 01:44:17,340
that's why it only takes 30 minutes per

2370
01:44:17,340 --> 01:44:21,119
trip to other label instead of manual

2371
01:44:21,119 --> 01:44:24,119
several hours of manual labeling

2372
01:44:24,119 --> 01:44:26,820
and this is also the key of scalability

2373
01:44:26,820 --> 01:44:29,659
of this machine

2374
01:44:31,739 --> 01:44:35,100
this machine easily scales as long as we

2375
01:44:35,100 --> 01:44:38,159
have available compute and trip data

2376
01:44:38,159 --> 01:44:40,440
so about 50 trees were newly order

2377
01:44:40,440 --> 01:44:42,480
labeled from this scene and some of them

2378
01:44:42,480 --> 01:44:45,119
are shown here so 53 from different

2379
01:44:45,119 --> 01:44:47,159
vehicles

2380
01:44:47,159 --> 01:44:50,460
so this is how we capture and transform

2381
01:44:50,460 --> 01:44:52,739
the space-time slices of the world into

2382
01:44:52,739 --> 01:44:54,719
the network supervision

2383
01:44:54,719 --> 01:44:56,540
yeah one thing I like to note is that

2384
01:44:56,540 --> 01:44:59,340
again just talked about how we Auto

2385
01:44:59,340 --> 01:45:01,380
label our lanes but we have Auto

2386
01:45:01,380 --> 01:45:03,239
laborers for almost every task that we

2387
01:45:03,239 --> 01:45:04,980
do including our planner and many of

2388
01:45:04,980 --> 01:45:06,960
these are fully automatic like no humans

2389
01:45:06,960 --> 01:45:08,940
involved for example for objects or

2390
01:45:08,940 --> 01:45:10,920
other kinematics the shapes their

2391
01:45:10,920 --> 01:45:12,659
Futures everything just comes from Auto

2392
01:45:12,659 --> 01:45:14,340
labeling and the same is true for

2393
01:45:14,340 --> 01:45:16,380
occupancy too and we have really just

2394
01:45:16,380 --> 01:45:18,480
built a machine around this yeah so if

2395
01:45:18,480 --> 01:45:21,119
you can go back one slide

2396
01:45:21,119 --> 01:45:22,679
not one more

2397
01:45:22,679 --> 01:45:26,699
it says parallelized on cluster so so

2398
01:45:26,699 --> 01:45:28,980
that sounds pretty straightforward but

2399
01:45:28,980 --> 01:45:30,179
it really wasn't

2400
01:45:30,179 --> 01:45:31,739
um maybe it's it's fun to share how

2401
01:45:31,739 --> 01:45:33,900
something like this comes about

2402
01:45:33,900 --> 01:45:36,060
um so a while ago we didn't have any

2403
01:45:36,060 --> 01:45:38,400
auto labeling at all and then someone

2404
01:45:38,400 --> 01:45:40,380
makes a script it starts to work it

2405
01:45:40,380 --> 01:45:42,300
starts working better until we reach a

2406
01:45:42,300 --> 01:45:43,920
volume that's pretty high and we clearly

2407
01:45:43,920 --> 01:45:45,119
need a solution

2408
01:45:45,119 --> 01:45:47,639
and so there were two other engineers in

2409
01:45:47,639 --> 01:45:49,020
our team who were like you know that's

2410
01:45:49,020 --> 01:45:51,659
an interesting you know uh thing what we

2411
01:45:51,659 --> 01:45:53,820
needed to do was build a whole graph of

2412
01:45:53,820 --> 01:45:54,840
essentially

2413
01:45:54,840 --> 01:45:56,880
python functions that we need to run one

2414
01:45:56,880 --> 01:45:58,380
after the other first you pull the clip

2415
01:45:58,380 --> 01:46:00,119
then you do some cleaning then you do

2416
01:46:00,119 --> 01:46:01,800
some Network inference then another

2417
01:46:01,800 --> 01:46:03,659
Network inference until you finally get

2418
01:46:03,659 --> 01:46:06,060
this but so you need to do this as a

2419
01:46:06,060 --> 01:46:08,159
large scale so I so I tell them we

2420
01:46:08,159 --> 01:46:10,380
probably need to shoot for you know 100

2421
01:46:10,380 --> 01:46:12,780
000 Clips per day or like 100 000 items

2422
01:46:12,780 --> 01:46:14,639
that seems good

2423
01:46:14,639 --> 01:46:17,520
um and so the engineers say well we can

2424
01:46:17,520 --> 01:46:19,679
do you know a bit of postgres and a bit

2425
01:46:19,679 --> 01:46:22,619
of elbow grease we can do it meanwhile

2426
01:46:22,619 --> 01:46:24,719
we are a bit later and we're doing 20

2427
01:46:24,719 --> 01:46:27,360
million of these functions every single

2428
01:46:27,360 --> 01:46:28,139
day

2429
01:46:28,139 --> 01:46:30,060
again we pull in around half a million

2430
01:46:30,060 --> 01:46:32,460
clips and on those we run a ton of

2431
01:46:32,460 --> 01:46:34,080
functions each of these in a streaming

2432
01:46:34,080 --> 01:46:35,940
fashion and so that's kind of the back

2433
01:46:35,940 --> 01:46:38,100
end infra that's also needed to not just

2434
01:46:38,100 --> 01:46:40,139
run training but also Auto labeling yeah

2435
01:46:40,139 --> 01:46:42,060
it really is like a factory that

2436
01:46:42,060 --> 01:46:43,679
produces labels and like production

2437
01:46:43,679 --> 01:46:46,739
lines yield quality uh inventory like

2438
01:46:46,739 --> 01:46:48,840
all of the same Concepts applied to this

2439
01:46:48,840 --> 01:46:51,000
label Factory uh that applies for you

2440
01:46:51,000 --> 01:46:52,560
know the factory for our cars that's

2441
01:46:52,560 --> 01:46:54,739
right

2442
01:46:55,500 --> 01:47:00,780
okay uh thanks uh so yeah so concluding

2443
01:47:00,780 --> 01:47:02,699
this section uh I'd like to share a few

2444
01:47:02,699 --> 01:47:03,900
more challenging and interesting

2445
01:47:03,900 --> 01:47:06,659
examples for Network for sure and even

2446
01:47:06,659 --> 01:47:09,060
for humans probably uh so from the top

2447
01:47:09,060 --> 01:47:11,520
there's like examples for like lack of

2448
01:47:11,520 --> 01:47:15,300
Lies case or foggy night or roundabout

2449
01:47:15,300 --> 01:47:17,400
and occlusions by heavy occlusions by

2450
01:47:17,400 --> 01:47:19,739
parked cars and even rainy night with

2451
01:47:19,739 --> 01:47:22,260
their raindrops on camera lenses uh

2452
01:47:22,260 --> 01:47:24,060
these are challenging but once their

2453
01:47:24,060 --> 01:47:25,980
original scenes are fully reconstructed

2454
01:47:25,980 --> 01:47:28,619
by other clips they all of them can be

2455
01:47:28,619 --> 01:47:30,540
Auto labeled so that our cards can drive

2456
01:47:30,540 --> 01:47:32,580
even better through these challenging

2457
01:47:32,580 --> 01:47:33,960
scenarios

2458
01:47:33,960 --> 01:47:36,719
so now let me pass the mic to David to

2459
01:47:36,719 --> 01:47:38,520
learn more about how Sim is creating the

2460
01:47:38,520 --> 01:47:40,139
new world on top of these labels thank

2461
01:47:40,139 --> 01:47:42,260
you

2462
01:47:46,980 --> 01:47:49,199
thank you again my name is David and I'm

2463
01:47:49,199 --> 01:47:51,840
going to talk about simulation

2464
01:47:51,840 --> 01:47:54,060
so simulation plays a critical role in

2465
01:47:54,060 --> 01:47:55,800
providing data that is difficult to

2466
01:47:55,800 --> 01:47:58,500
source and or hard to label

2467
01:47:58,500 --> 01:48:01,800
however 3D scenes are notoriously slow

2468
01:48:01,800 --> 01:48:04,560
to produce take for example the

2469
01:48:04,560 --> 01:48:06,900
simulated scene playing behind me a

2470
01:48:06,900 --> 01:48:07,920
complex

2471
01:48:07,920 --> 01:48:09,960
intersection from Market Street in San

2472
01:48:09,960 --> 01:48:12,239
Francisco it would take two weeks for

2473
01:48:12,239 --> 01:48:14,880
artists to complete and for us that is

2474
01:48:14,880 --> 01:48:16,380
painfully slow

2475
01:48:16,380 --> 01:48:18,540
however I'm going to talk about using

2476
01:48:18,540 --> 01:48:20,520
jaegan's automated ground truth labels

2477
01:48:20,520 --> 01:48:22,619
along with some brand new tooling that

2478
01:48:22,619 --> 01:48:24,659
allows us to procedurally generate this

2479
01:48:24,659 --> 01:48:26,760
scene and many like it in just five

2480
01:48:26,760 --> 01:48:28,980
minutes that's an amazing a thousand

2481
01:48:28,980 --> 01:48:31,320
times faster than before

2482
01:48:31,320 --> 01:48:33,780
so let's dive in to our scene like this

2483
01:48:33,780 --> 01:48:36,000
is created

2484
01:48:36,000 --> 01:48:38,040
we start by piping the automated ground

2485
01:48:38,040 --> 01:48:40,260
truth labels into our simulated World

2486
01:48:40,260 --> 01:48:42,119
creator tooling inside the software

2487
01:48:42,119 --> 01:48:44,699
Houdini starting with Road boundary

2488
01:48:44,699 --> 01:48:47,100
labels we can generate a solid Road mesh

2489
01:48:47,100 --> 01:48:49,440
and re-topologize it with the lane graph

2490
01:48:49,440 --> 01:48:51,840
labels this helps inform important Road

2491
01:48:51,840 --> 01:48:54,060
details like Crossroads slope and

2492
01:48:54,060 --> 01:48:57,060
detailed material blending

2493
01:48:57,060 --> 01:48:59,340
next we can use the line data and sweep

2494
01:48:59,340 --> 01:49:01,500
geometry across its surface and project

2495
01:49:01,500 --> 01:49:03,900
it to the road creating Lane paint

2496
01:49:03,900 --> 01:49:06,619
decals

2497
01:49:07,679 --> 01:49:10,139
next using median edges we can spawned

2498
01:49:10,139 --> 01:49:12,060
Island geometry and populate it with

2499
01:49:12,060 --> 01:49:13,980
randomized foliage this drastically

2500
01:49:13,980 --> 01:49:16,560
changes the visibility of the scene

2501
01:49:16,560 --> 01:49:18,420
now the outside world can be generated

2502
01:49:18,420 --> 01:49:20,040
through a series of randomized

2503
01:49:20,040 --> 01:49:22,380
heuristics a modular building generators

2504
01:49:22,380 --> 01:49:24,540
create visual obstructions while

2505
01:49:24,540 --> 01:49:26,400
randomly placed objects like hydrants

2506
01:49:26,400 --> 01:49:28,380
can change the color of the curves while

2507
01:49:28,380 --> 01:49:31,380
trees can drop leaves below it obscuring

2508
01:49:31,380 --> 01:49:33,780
lines or edges

2509
01:49:33,780 --> 01:49:36,179
next we can bring in map data to inform

2510
01:49:36,179 --> 01:49:38,040
positions of things like traffic traffic

2511
01:49:38,040 --> 01:49:40,619
lights or stop signs we can trace along

2512
01:49:40,619 --> 01:49:42,960
its normal to collect important

2513
01:49:42,960 --> 01:49:44,699
information like number of lanes and

2514
01:49:44,699 --> 01:49:46,619
even get accurate street names on the

2515
01:49:46,619 --> 01:49:48,239
signs themselves

2516
01:49:48,239 --> 01:49:50,580
next using Lane graph we can determine

2517
01:49:50,580 --> 01:49:52,800
Lane connectivity and spawn directional

2518
01:49:52,800 --> 01:49:54,600
Road markings on the road and they're

2519
01:49:54,600 --> 01:49:57,300
accompanying road signs

2520
01:49:57,300 --> 01:49:59,699
and finally with Lane graph itself we

2521
01:49:59,699 --> 01:50:01,800
can determine Lane adjacency and other

2522
01:50:01,800 --> 01:50:04,080
useful metrics to spawn randomized

2523
01:50:04,080 --> 01:50:06,840
traffic permutations Insider simulator

2524
01:50:06,840 --> 01:50:09,119
and again this is all automatic no

2525
01:50:09,119 --> 01:50:11,040
artists in the loop and happens within

2526
01:50:11,040 --> 01:50:13,440
minutes and now this sets us up to do

2527
01:50:13,440 --> 01:50:15,840
some pretty cool things

2528
01:50:15,840 --> 01:50:17,820
since everything is based on data and

2529
01:50:17,820 --> 01:50:19,619
heuristics we can start to fuzz

2530
01:50:19,619 --> 01:50:21,659
parameters to create visual variations

2531
01:50:21,659 --> 01:50:24,179
of the single ground truth it can be as

2532
01:50:24,179 --> 01:50:26,580
subtle as object placement and random

2533
01:50:26,580 --> 01:50:28,320
material swapping to more drastic

2534
01:50:28,320 --> 01:50:30,540
changes like entirely new biomes or

2535
01:50:30,540 --> 01:50:32,820
locations of environment like Urban

2536
01:50:32,820 --> 01:50:34,920
Suburban or rural

2537
01:50:34,920 --> 01:50:36,780
this allows us to create infinite

2538
01:50:36,780 --> 01:50:39,060
targeted permutations for specific

2539
01:50:39,060 --> 01:50:41,159
ground truths that we need

2540
01:50:41,159 --> 01:50:43,260
more ground Truth for

2541
01:50:43,260 --> 01:50:45,480
and all this happens within a click of a

2542
01:50:45,480 --> 01:50:47,719
button

2543
01:50:47,820 --> 01:50:49,440
and we can even take this one step

2544
01:50:49,440 --> 01:50:51,300
further by altering our ground truth

2545
01:50:51,300 --> 01:50:52,380
itself

2546
01:50:52,380 --> 01:50:54,300
say John wants his Network to pay more

2547
01:50:54,300 --> 01:50:56,460
attention the directional Road markings

2548
01:50:56,460 --> 01:50:58,560
to better detect an upcoming captive

2549
01:50:58,560 --> 01:51:00,480
left turn lane we can start to

2550
01:51:00,480 --> 01:51:02,520
procedurally alter our lane graph inside

2551
01:51:02,520 --> 01:51:03,840
the simulator

2552
01:51:03,840 --> 01:51:06,300
to help folk to create entirely new

2553
01:51:06,300 --> 01:51:08,100
flows through this intersection to help

2554
01:51:08,100 --> 01:51:10,139
Focus the Network's attention to the

2555
01:51:10,139 --> 01:51:11,760
road markings to create more accurate

2556
01:51:11,760 --> 01:51:12,840
predictions

2557
01:51:12,840 --> 01:51:14,940
and this is a great example of how this

2558
01:51:14,940 --> 01:51:16,980
tooling allows us to create new data

2559
01:51:16,980 --> 01:51:18,540
that could never be collected from The

2560
01:51:18,540 --> 01:51:20,699
Real World

2561
01:51:20,699 --> 01:51:22,980
and the true power of this tool

2562
01:51:22,980 --> 01:51:24,960
is in its architecture and how we can

2563
01:51:24,960 --> 01:51:27,060
run all tasks in parallel to infinitely

2564
01:51:27,060 --> 01:51:28,739
scale

2565
01:51:28,739 --> 01:51:30,960
so you saw the tile Creator tool in

2566
01:51:30,960 --> 01:51:32,400
action converting the ground truth

2567
01:51:32,400 --> 01:51:35,460
labels into their counterparts

2568
01:51:35,460 --> 01:51:37,739
next we can use our tile extractor tool

2569
01:51:37,739 --> 01:51:40,260
to divide this data into geohash tiles

2570
01:51:40,260 --> 01:51:43,560
about 150 meters square in size

2571
01:51:43,560 --> 01:51:46,139
we then save out that data into separate

2572
01:51:46,139 --> 01:51:48,480
geometry and instance files this gives

2573
01:51:48,480 --> 01:51:50,760
us a clean source of data that's easy to

2574
01:51:50,760 --> 01:51:52,380
load and allows us to be rendering

2575
01:51:52,380 --> 01:51:56,000
engine agnostic for the future

2576
01:51:56,219 --> 01:51:58,380
then using a tile loader tool we can

2577
01:51:58,380 --> 01:52:00,300
summon any number of those cache tiles

2578
01:52:00,300 --> 01:52:03,600
using a geohash ID currently we're doing

2579
01:52:03,600 --> 01:52:05,520
about these five by five tiles or three

2580
01:52:05,520 --> 01:52:07,800
by three usually centered around Fleet

2581
01:52:07,800 --> 01:52:09,659
hotspots or interesting land graph

2582
01:52:09,659 --> 01:52:11,280
locations

2583
01:52:11,280 --> 01:52:13,860
in the tile loader also converts these

2584
01:52:13,860 --> 01:52:16,440
tile sets into U assets for consumption

2585
01:52:16,440 --> 01:52:18,600
by the Unreal Engine and gives you a

2586
01:52:18,600 --> 01:52:20,820
finished project product from what you

2587
01:52:20,820 --> 01:52:23,280
saw in the first slide

2588
01:52:23,280 --> 01:52:25,860
and this really sets us up for size and

2589
01:52:25,860 --> 01:52:27,960
scale as you can see on the map behind

2590
01:52:27,960 --> 01:52:28,619
us

2591
01:52:28,619 --> 01:52:30,900
we can easily generate most of San

2592
01:52:30,900 --> 01:52:33,300
Francisco city streets and this didn't

2593
01:52:33,300 --> 01:52:35,460
take years or even months of work but

2594
01:52:35,460 --> 01:52:37,980
rather two weeks by one person

2595
01:52:37,980 --> 01:52:40,619
we can continue to manage and grow all

2596
01:52:40,619 --> 01:52:43,320
this data using our PDG Network inside

2597
01:52:43,320 --> 01:52:45,719
of the tooling this allows us to throw

2598
01:52:45,719 --> 01:52:47,760
compute at it and regenerate all these

2599
01:52:47,760 --> 01:52:49,980
tile sets overnight

2600
01:52:49,980 --> 01:52:52,199
this ensures all environments are of

2601
01:52:52,199 --> 01:52:54,719
consistent quality and features which is

2602
01:52:54,719 --> 01:52:56,880
super important for training since new

2603
01:52:56,880 --> 01:52:58,860
ontologies and signals are constantly

2604
01:52:58,860 --> 01:53:01,520
released

2605
01:53:03,659 --> 01:53:06,179
and now to come full circle because we

2606
01:53:06,179 --> 01:53:07,980
generated all these tile sets from

2607
01:53:07,980 --> 01:53:09,900
ground truth data that contain all the

2608
01:53:09,900 --> 01:53:11,580
weird intricacies from The Real World

2609
01:53:11,580 --> 01:53:13,199
and we can combine that with the

2610
01:53:13,199 --> 01:53:15,900
procedural Visual and traffic variety to

2611
01:53:15,900 --> 01:53:18,119
create Limitless targeted data for the

2612
01:53:18,119 --> 01:53:20,219
network to learn from

2613
01:53:20,219 --> 01:53:22,199
and that concludes the Sim section I'll

2614
01:53:22,199 --> 01:53:24,300
pass it to Kate to talk about how we can

2615
01:53:24,300 --> 01:53:26,400
use all this data to improve autopilot

2616
01:53:26,400 --> 01:53:28,820
thank you

2617
01:53:36,719 --> 01:53:39,360
thanks David hi everyone my name is Kate

2618
01:53:39,360 --> 01:53:41,520
Park and I'm here to talk about the data

2619
01:53:41,520 --> 01:53:43,619
engine which is the process by which we

2620
01:53:43,619 --> 01:53:46,679
improve our neural networks via data

2621
01:53:46,679 --> 01:53:48,360
we're going to show you how we

2622
01:53:48,360 --> 01:53:50,400
deterministically solve interventions

2623
01:53:50,400 --> 01:53:52,679
via data and walk you through the life

2624
01:53:52,679 --> 01:53:55,760
of this particular clip in this scenario

2625
01:53:55,760 --> 01:53:58,500
autopilot is approaching a turn and

2626
01:53:58,500 --> 01:54:00,239
incorrectly predicts that Crossing

2627
01:54:00,239 --> 01:54:02,639
vehicle as stopped for traffic and thus

2628
01:54:02,639 --> 01:54:05,219
a vehicle that we would slow down for in

2629
01:54:05,219 --> 01:54:07,560
reality there's nobody in the car it's

2630
01:54:07,560 --> 01:54:10,080
just awkwardly parked we've built this

2631
01:54:10,080 --> 01:54:12,239
tooling to identify the mispredictions

2632
01:54:12,239 --> 01:54:15,179
correct the label and categorize this

2633
01:54:15,179 --> 01:54:17,699
clip into an evaluation set this

2634
01:54:17,699 --> 01:54:20,400
particular clip happens to be one of 126

2635
01:54:20,400 --> 01:54:22,560
that we've diagnosed as challenging

2636
01:54:22,560 --> 01:54:25,440
parked cars at turns because of this

2637
01:54:25,440 --> 01:54:28,380
infra we can curate this evaluation set

2638
01:54:28,380 --> 01:54:31,020
without any engineering resources custom

2639
01:54:31,020 --> 01:54:34,760
to this particular challenge case

2640
01:54:34,800 --> 01:54:36,780
to actually solve that challenge case

2641
01:54:36,780 --> 01:54:38,940
requires mining thousands of examples

2642
01:54:38,940 --> 01:54:40,920
like it and it's something Tesla can

2643
01:54:40,920 --> 01:54:43,739
trivially do we simply use our data

2644
01:54:43,739 --> 01:54:46,619
sourcing infra request data and use the

2645
01:54:46,619 --> 01:54:49,020
tooling shown previously to correct the

2646
01:54:49,020 --> 01:54:50,100
labels

2647
01:54:50,100 --> 01:54:51,960
by surgically targeting the

2648
01:54:51,960 --> 01:54:53,520
mispredictions of the current model

2649
01:54:53,520 --> 01:54:55,739
we're only adding the most valuable

2650
01:54:55,739 --> 01:54:58,739
examples to our training set

2651
01:54:58,739 --> 01:55:03,420
we surgically fix 13 900 clips and uh

2652
01:55:03,420 --> 01:55:04,980
because those were examples where the

2653
01:55:04,980 --> 01:55:06,780
current model struggles we don't even

2654
01:55:06,780 --> 01:55:09,719
need to change the model architecture a

2655
01:55:09,719 --> 01:55:11,760
simple way update with this new valuable

2656
01:55:11,760 --> 01:55:13,560
data is enough to solve the challenge

2657
01:55:13,560 --> 01:55:16,080
case so you see we no longer predict

2658
01:55:16,080 --> 01:55:18,119
that Crossing vehicle as stopped as

2659
01:55:18,119 --> 01:55:20,639
shown in Orange but parked as shown in

2660
01:55:20,639 --> 01:55:21,600
red

2661
01:55:21,600 --> 01:55:24,119
in Academia we often see that people

2662
01:55:24,119 --> 01:55:26,880
keep data constant but at Tesla it's

2663
01:55:26,880 --> 01:55:29,460
very much the opposite we see time and

2664
01:55:29,460 --> 01:55:31,619
time and again that data is one of the

2665
01:55:31,619 --> 01:55:33,960
best if not the most deterministic lever

2666
01:55:33,960 --> 01:55:37,139
to solving these interventions

2667
01:55:37,139 --> 01:55:39,239
we just showed you the data engine Loop

2668
01:55:39,239 --> 01:55:41,400
for one challenge case namely these

2669
01:55:41,400 --> 01:55:43,739
parked cars at turns but there are many

2670
01:55:43,739 --> 01:55:45,960
challenge cases even for one signal of

2671
01:55:45,960 --> 01:55:48,360
vehicle Movement we apply this data

2672
01:55:48,360 --> 01:55:50,100
engine Loop to every single challenge

2673
01:55:50,100 --> 01:55:52,560
case we've diagnosed whether it's buses

2674
01:55:52,560 --> 01:55:54,659
curvy roads stopped Vehicles parking

2675
01:55:54,659 --> 01:55:58,020
lots and we don't just add data once we

2676
01:55:58,020 --> 01:56:00,239
do this again and again to perfect the

2677
01:56:00,239 --> 01:56:03,000
semantic in fact this year we updated

2678
01:56:03,000 --> 01:56:05,520
our vehicle movement signal five times

2679
01:56:05,520 --> 01:56:07,800
and with every weight update trained on

2680
01:56:07,800 --> 01:56:09,659
the new data we push our vehicle

2681
01:56:09,659 --> 01:56:12,780
movement accuracy up and up

2682
01:56:12,780 --> 01:56:15,960
this data engine framework applies to

2683
01:56:15,960 --> 01:56:18,179
all our signals whether they're 3D

2684
01:56:18,179 --> 01:56:20,639
multi-cam video whether the data is

2685
01:56:20,639 --> 01:56:22,800
human labeled Auto labeled or simulated

2686
01:56:22,800 --> 01:56:25,020
whether it's an offline model or an

2687
01:56:25,020 --> 01:56:27,960
online model model and Tesla is able to

2688
01:56:27,960 --> 01:56:30,360
do this at scale because of the fleet

2689
01:56:30,360 --> 01:56:32,580
Advantage the infra that our engine team

2690
01:56:32,580 --> 01:56:34,679
has built and the labeling resources

2691
01:56:34,679 --> 01:56:36,540
that feed our Networks

2692
01:56:36,540 --> 01:56:38,580
to train on all this data we need a

2693
01:56:38,580 --> 01:56:40,560
massive amount of compute so I'll hand

2694
01:56:40,560 --> 01:56:42,659
it off to Pete and Ganesh to talk about

2695
01:56:42,659 --> 01:56:45,360
the dojo supercomputing platform thank

2696
01:56:45,360 --> 01:56:45,730
you

2697
01:56:45,730 --> 01:56:48,060
[Applause]

2698
01:56:48,060 --> 01:56:49,380
thank you

2699
01:56:49,380 --> 01:56:52,639
thank you Katie

2700
01:56:55,020 --> 01:56:56,639
thanks everybody thanks for hanging in

2701
01:56:56,639 --> 01:56:59,280
there we're almost there

2702
01:56:59,280 --> 01:57:01,920
my name is Pete Bannon I run the custom

2703
01:57:01,920 --> 01:57:05,040
silicon and low voltage teams at Tesla

2704
01:57:05,040 --> 01:57:07,440
and my name is Ganesh venkat I run the

2705
01:57:07,440 --> 01:57:09,980
doji program

2706
01:57:12,890 --> 01:57:14,219
[Applause]

2707
01:57:14,219 --> 01:57:15,599
thank you

2708
01:57:15,599 --> 01:57:18,060
I'm frequently asked why is a car

2709
01:57:18,060 --> 01:57:19,800
company building a super computer for

2710
01:57:19,800 --> 01:57:20,820
training

2711
01:57:20,820 --> 01:57:23,480
and this question fundamentally

2712
01:57:23,480 --> 01:57:27,840
misunderstands the nature of Tesla at

2713
01:57:27,840 --> 01:57:30,239
its heart Tesla is a hardcore technology

2714
01:57:30,239 --> 01:57:31,500
company

2715
01:57:31,500 --> 01:57:33,480
all across the company people are

2716
01:57:33,480 --> 01:57:36,239
working hard in science and engineering

2717
01:57:36,239 --> 01:57:39,239
to advance the fundamental understanding

2718
01:57:39,239 --> 01:57:41,580
and and methods that we have available

2719
01:57:41,580 --> 01:57:45,119
to build cars Energy Solutions robots

2720
01:57:45,119 --> 01:57:48,300
and anything else so can we we can do to

2721
01:57:48,300 --> 01:57:50,099
improve The Human Condition around the

2722
01:57:50,099 --> 01:57:50,820
world

2723
01:57:50,820 --> 01:57:52,980
it's a super exciting thing to be a part

2724
01:57:52,980 --> 01:57:55,320
of and it's a privilege to run a very

2725
01:57:55,320 --> 01:57:57,060
small piece of it in the semiconductor

2726
01:57:57,060 --> 01:57:59,040
group tonight we're going to talk a

2727
01:57:59,040 --> 01:58:01,619
little bit about dojo and give you an

2728
01:58:01,619 --> 01:58:03,060
update on what we've been able to do

2729
01:58:03,060 --> 01:58:05,460
over the last year but before we do that

2730
01:58:05,460 --> 01:58:06,659
I wanted to give a little bit of

2731
01:58:06,659 --> 01:58:08,880
background on the initial design that we

2732
01:58:08,880 --> 01:58:11,099
started a few years ago when we got

2733
01:58:11,099 --> 01:58:12,719
started the goal was to provide a

2734
01:58:12,719 --> 01:58:15,300
substantial Improvement to the training

2735
01:58:15,300 --> 01:58:17,880
latency for our autopilot team some of

2736
01:58:17,880 --> 01:58:19,440
the largest neural networks they trained

2737
01:58:19,440 --> 01:58:21,960
today run for over a month

2738
01:58:21,960 --> 01:58:24,860
which inhibits their ability to rapidly

2739
01:58:24,860 --> 01:58:27,480
explore Alternatives and evaluate them

2740
01:58:27,480 --> 01:58:30,119
so you know a 30X speed up would be

2741
01:58:30,119 --> 01:58:32,400
really nice if we could provide it at a

2742
01:58:32,400 --> 01:58:34,199
cost competitive and energy competitive

2743
01:58:34,199 --> 01:58:35,159
way

2744
01:58:35,159 --> 01:58:37,980
to do that we wanted to build a chip

2745
01:58:37,980 --> 01:58:40,320
with a lot of arithmetic arithmetic

2746
01:58:40,320 --> 01:58:42,599
units that we could utilize at a very

2747
01:58:42,599 --> 01:58:44,820
high efficiency and we spent a lot of

2748
01:58:44,820 --> 01:58:47,099
time studying whether we could do that

2749
01:58:47,099 --> 01:58:51,179
using DRM various packaging ideas all of

2750
01:58:51,179 --> 01:58:53,280
which failed and in the end even though

2751
01:58:53,280 --> 01:58:55,500
it felt like an unnatural act we decided

2752
01:58:55,500 --> 01:58:57,659
to reject dram as the primary storage

2753
01:58:57,659 --> 01:59:00,300
medium for this system and instead focus

2754
01:59:00,300 --> 01:59:03,239
on SRAM embedded in the chip

2755
01:59:03,239 --> 01:59:06,119
SRAM provides unfortunately a modest

2756
01:59:06,119 --> 01:59:07,800
amount of capacity but extremely high

2757
01:59:07,800 --> 01:59:09,900
bandwidth and very low latency and that

2758
01:59:09,900 --> 01:59:11,699
enables us to achieve High utilization

2759
01:59:11,699 --> 01:59:13,920
with the arithmetic units

2760
01:59:13,920 --> 01:59:17,040
those choices

2761
01:59:17,040 --> 01:59:19,440
of that particular choice led to a whole

2762
01:59:19,440 --> 01:59:21,659
bunch of other choices for example if

2763
01:59:21,659 --> 01:59:22,860
you want to have virtual memory you need

2764
01:59:22,860 --> 01:59:24,540
page tables they take up a lot of space

2765
01:59:24,540 --> 01:59:26,760
we didn't have space so no virtual

2766
01:59:26,760 --> 01:59:27,739
memory

2767
01:59:27,739 --> 01:59:30,719
we also don't have interrupts the

2768
01:59:30,719 --> 01:59:34,320
accelerator is a bare bonds Rob piece of

2769
01:59:34,320 --> 01:59:36,599
Hardware that's presented to a compiler

2770
01:59:36,599 --> 01:59:38,280
in the compiler is responsible for

2771
01:59:38,280 --> 01:59:40,080
scheduling everything that happens in a

2772
01:59:40,080 --> 01:59:42,239
terministic way so there's no need or

2773
01:59:42,239 --> 01:59:44,900
even desire for interrupts in the system

2774
01:59:44,900 --> 01:59:48,119
we also chose to pursue model

2775
01:59:48,119 --> 01:59:50,639
parallelism as a training methodology

2776
01:59:50,639 --> 01:59:54,480
which is not the typical situation most

2777
01:59:54,480 --> 01:59:57,060
most machines today use data parallelism

2778
01:59:57,060 --> 01:59:59,280
which consumes additional memory

2779
01:59:59,280 --> 02:00:01,099
capacity which we obviously don't have

2780
02:00:01,099 --> 02:00:05,040
so all of those choices led us to build

2781
02:00:05,040 --> 02:00:07,080
a machine that is pretty radically

2782
02:00:07,080 --> 02:00:10,139
different from what's available today

2783
02:00:10,139 --> 02:00:11,940
we also had a whole bunch of other goals

2784
02:00:11,940 --> 02:00:14,099
one of the most important ones was no

2785
02:00:14,099 --> 02:00:16,139
limits so we wanted to build a compute

2786
02:00:16,139 --> 02:00:19,080
fabric that would scale in an unbounded

2787
02:00:19,080 --> 02:00:20,820
way for the most part I mean obviously

2788
02:00:20,820 --> 02:00:24,060
there's physical limits now and then but

2789
02:00:24,060 --> 02:00:25,860
you know pretty much if your model was

2790
02:00:25,860 --> 02:00:27,780
too big for the computer you just had to

2791
02:00:27,780 --> 02:00:30,300
go buy a bigger computer that's what we

2792
02:00:30,300 --> 02:00:32,580
were looking for today the way package

2793
02:00:32,580 --> 02:00:34,619
machines are packaged there's a pretty

2794
02:00:34,619 --> 02:00:37,980
fixed ratio of for example GPU CPUs and

2795
02:00:37,980 --> 02:00:40,800
and dram capacity and network capacity

2796
02:00:40,800 --> 02:00:42,659
and we really wanted to disaggregate all

2797
02:00:42,659 --> 02:00:45,840
that so that as models evolved we could

2798
02:00:45,840 --> 02:00:48,060
vary the ratios of those various

2799
02:00:48,060 --> 02:00:49,920
elements and make the system more

2800
02:00:49,920 --> 02:00:52,739
flexible to meet the needs of the

2801
02:00:52,739 --> 02:00:54,480
autopilot team

2802
02:00:54,480 --> 02:00:57,239
yeah and it's so true with like No

2803
02:00:57,239 --> 02:00:59,580
Limits philosophy was our guiding star

2804
02:00:59,580 --> 02:01:03,119
all the way all of our choices were

2805
02:01:03,119 --> 02:01:05,639
centered around that and and to the

2806
02:01:05,639 --> 02:01:07,739
point that we didn't want traditional

2807
02:01:07,739 --> 02:01:10,860
data center infrastructure to limit our

2808
02:01:10,860 --> 02:01:13,920
capacity to execute these programs at

2809
02:01:13,920 --> 02:01:14,880
speed

2810
02:01:14,880 --> 02:01:17,099
so that's why we

2811
02:01:17,099 --> 02:01:20,699
that's why sorry about that that's why

2812
02:01:20,699 --> 02:01:22,380
we integrated

2813
02:01:22,380 --> 02:01:25,080
vertically our data center

2814
02:01:25,080 --> 02:01:28,320
entire data center by doing a vertical

2815
02:01:28,320 --> 02:01:30,780
integration of the data center

2816
02:01:30,780 --> 02:01:32,880
we could extract new levels of

2817
02:01:32,880 --> 02:01:35,219
efficiency we could optimize power

2818
02:01:35,219 --> 02:01:37,500
delivery Cooling

2819
02:01:37,500 --> 02:01:40,320
and as well as system management across

2820
02:01:40,320 --> 02:01:43,020
the whole data center stack rather than

2821
02:01:43,020 --> 02:01:45,780
doing Box by box and integrating that

2822
02:01:45,780 --> 02:01:49,020
those boxes into Data Centers

2823
02:01:49,020 --> 02:01:53,520
and to do this we also wanted to

2824
02:01:53,520 --> 02:01:55,199
integrate early

2825
02:01:55,199 --> 02:01:58,679
to figure out limits of scale uh for our

2826
02:01:58,679 --> 02:02:00,719
software workloads so we integrated Dojo

2827
02:02:00,719 --> 02:02:02,940
environment into our autopilot software

2828
02:02:02,940 --> 02:02:05,639
very early and we learned a lot of

2829
02:02:05,639 --> 02:02:09,719
lessons and today uh Bill Chang will go

2830
02:02:09,719 --> 02:02:12,540
over our hardware update as well as some

2831
02:02:12,540 --> 02:02:14,520
of the challenges that we faced along

2832
02:02:14,520 --> 02:02:18,540
the way and Rajiv kurian will give you a

2833
02:02:18,540 --> 02:02:21,360
glimpse of our compiler technology as

2834
02:02:21,360 --> 02:02:25,020
well as go over some of our cool results

2835
02:02:25,020 --> 02:02:27,560
right

2836
02:02:27,860 --> 02:02:31,159
there you go

2837
02:02:31,199 --> 02:02:34,199
thanks Pete thanks Ganesh

2838
02:02:34,199 --> 02:02:36,900
um I'll start tonight with a high level

2839
02:02:36,900 --> 02:02:39,540
vision of our system that will that will

2840
02:02:39,540 --> 02:02:41,880
help set the stage for the the

2841
02:02:41,880 --> 02:02:43,320
challenges and the problems we're

2842
02:02:43,320 --> 02:02:46,320
solving and then also how software will

2843
02:02:46,320 --> 02:02:48,780
then leverage this for performance

2844
02:02:48,780 --> 02:02:52,139
now our vision for Dojo is to build a

2845
02:02:52,139 --> 02:02:54,179
single unified accelerate a very large

2846
02:02:54,179 --> 02:02:57,060
one software would see a seamless

2847
02:02:57,060 --> 02:02:59,699
compute plane with globally addressable

2848
02:02:59,699 --> 02:03:02,340
very fast memory and all connected

2849
02:03:02,340 --> 02:03:05,520
together with uniform high bandwidth and

2850
02:03:05,520 --> 02:03:08,119
low latency

2851
02:03:08,880 --> 02:03:11,699
now to realize this we we need to use

2852
02:03:11,699 --> 02:03:14,520
density to achieve performance

2853
02:03:14,520 --> 02:03:16,560
now we leverage technology to get this

2854
02:03:16,560 --> 02:03:18,659
density in order to break levels of

2855
02:03:18,659 --> 02:03:21,780
hierarchy all the way from the chip to

2856
02:03:21,780 --> 02:03:23,820
the scale out systems

2857
02:03:23,820 --> 02:03:26,820
now silicon technology has has used this

2858
02:03:26,820 --> 02:03:29,460
has done this for decades chips have

2859
02:03:29,460 --> 02:03:33,060
followed Moore's law to for density and

2860
02:03:33,060 --> 02:03:37,080
integration to get performance scaling

2861
02:03:37,080 --> 02:03:39,360
now a key step in realizing that Vision

2862
02:03:39,360 --> 02:03:41,460
was our training tile

2863
02:03:41,460 --> 02:03:44,639
not only can we integrate 25 dies at

2864
02:03:44,639 --> 02:03:46,739
extremely high bandwidth but we can

2865
02:03:46,739 --> 02:03:49,320
scale that to any number of additional

2866
02:03:49,320 --> 02:03:53,000
tiles by just connecting them together

2867
02:03:53,820 --> 02:03:56,520
now last year we showcased our first

2868
02:03:56,520 --> 02:03:58,739
functional training tile and at that

2869
02:03:58,739 --> 02:04:00,780
time we already had workloads running on

2870
02:04:00,780 --> 02:04:02,900
it

2871
02:04:03,119 --> 02:04:05,699
and since then the team here has been

2872
02:04:05,699 --> 02:04:09,060
working hard and diligently to deploy

2873
02:04:09,060 --> 02:04:10,800
this at scale

2874
02:04:10,800 --> 02:04:13,500
now we've made amazing progress and had

2875
02:04:13,500 --> 02:04:16,020
a lot of Milestones along the way and of

2876
02:04:16,020 --> 02:04:18,119
course we've had a lot of unexpected

2877
02:04:18,119 --> 02:04:19,199
challenges

2878
02:04:19,199 --> 02:04:21,060
but this is where our fail fast

2879
02:04:21,060 --> 02:04:23,699
philosophy has allowed us to push our

2880
02:04:23,699 --> 02:04:26,119
boundaries

2881
02:04:27,300 --> 02:04:29,420
now pushing density for performance

2882
02:04:29,420 --> 02:04:32,099
presents all new challenges

2883
02:04:32,099 --> 02:04:35,040
one area is power delivery

2884
02:04:35,040 --> 02:04:37,619
here we need to deliver the power to our

2885
02:04:37,619 --> 02:04:40,679
compute die and this directly impacts

2886
02:04:40,679 --> 02:04:43,260
our Top Line compute performance

2887
02:04:43,260 --> 02:04:45,599
but we need to do this at unprecedented

2888
02:04:45,599 --> 02:04:48,480
density we need to be able to match our

2889
02:04:48,480 --> 02:04:50,940
die pitch with a power density of almost

2890
02:04:50,940 --> 02:04:54,000
one amp per millimeter squared

2891
02:04:54,000 --> 02:04:56,099
and because of the extreme integration

2892
02:04:56,099 --> 02:04:59,159
this needs to be a multi-tiered vertical

2893
02:04:59,159 --> 02:05:00,840
power solution

2894
02:05:00,840 --> 02:05:02,280
and because there's a complex

2895
02:05:02,280 --> 02:05:04,679
heterogeneous material Stack Up

2896
02:05:04,679 --> 02:05:07,080
we have to carefully manage the material

2897
02:05:07,080 --> 02:05:11,420
transition especially CTE

2898
02:05:12,420 --> 02:05:14,400
now why does the coefficient of thermal

2899
02:05:14,400 --> 02:05:16,560
expansion matter in this case

2900
02:05:16,560 --> 02:05:19,560
CTE is a fundamental material property

2901
02:05:19,560 --> 02:05:22,619
and if it's not carefully managed that

2902
02:05:22,619 --> 02:05:24,480
Stack Up would literally rip itself

2903
02:05:24,480 --> 02:05:26,900
apart

2904
02:05:27,659 --> 02:05:30,060
so we started this effort by working

2905
02:05:30,060 --> 02:05:32,820
with vendors to deliver to develop this

2906
02:05:32,820 --> 02:05:34,500
power solution

2907
02:05:34,500 --> 02:05:36,659
but we realized that we actually had to

2908
02:05:36,659 --> 02:05:38,639
develop this in-house

2909
02:05:38,639 --> 02:05:41,639
now to balance schedule and risk

2910
02:05:41,639 --> 02:05:43,860
we built quick iterations to support

2911
02:05:43,860 --> 02:05:46,080
both our system bring up and software

2912
02:05:46,080 --> 02:05:47,099
development

2913
02:05:47,099 --> 02:05:50,040
and also to find the optimal design and

2914
02:05:50,040 --> 02:05:51,420
stack up that would meet our final

2915
02:05:51,420 --> 02:05:53,040
production goals

2916
02:05:53,040 --> 02:05:54,780
and in the end we were able to reduce

2917
02:05:54,780 --> 02:05:57,960
CTE over 50 percent

2918
02:05:57,960 --> 02:06:01,080
and meet our performance by 3x over our

2919
02:06:01,080 --> 02:06:03,000
initial version

2920
02:06:03,000 --> 02:06:05,880
now needless to say finding this optimal

2921
02:06:05,880 --> 02:06:08,280
material stack up while maximizing

2922
02:06:08,280 --> 02:06:11,219
performance at density is extremely

2923
02:06:11,219 --> 02:06:13,580
difficult

2924
02:06:14,639 --> 02:06:16,920
now we did have unexpected challenges

2925
02:06:16,920 --> 02:06:18,300
along the way

2926
02:06:18,300 --> 02:06:20,460
here's an example where we push the

2927
02:06:20,460 --> 02:06:22,619
boundaries of integration that led to

2928
02:06:22,619 --> 02:06:25,460
component failures

2929
02:06:25,679 --> 02:06:28,139
this started when we scaled up to larger

2930
02:06:28,139 --> 02:06:30,179
and longer workloads and then

2931
02:06:30,179 --> 02:06:32,340
intermediate intermittently a single

2932
02:06:32,340 --> 02:06:35,099
site on a tile would fail

2933
02:06:35,099 --> 02:06:36,840
now they started out as recoverable

2934
02:06:36,840 --> 02:06:39,420
failures but as we pushed some much

2935
02:06:39,420 --> 02:06:41,820
higher and higher power these would

2936
02:06:41,820 --> 02:06:45,320
become permanent failures

2937
02:06:45,599 --> 02:06:47,880
now to understand this failure you have

2938
02:06:47,880 --> 02:06:51,179
to understand why and how we build our

2939
02:06:51,179 --> 02:06:52,619
power modules

2940
02:06:52,619 --> 02:06:56,219
solving density at every level is the is

2941
02:06:56,219 --> 02:06:58,260
is the Cornerstone of actually achieving

2942
02:06:58,260 --> 02:06:59,940
our system performance

2943
02:06:59,940 --> 02:07:02,340
now because our X Y plane is used for

2944
02:07:02,340 --> 02:07:04,380
high bandwidth communication

2945
02:07:04,380 --> 02:07:06,360
everything else must be stacked

2946
02:07:06,360 --> 02:07:08,159
vertically

2947
02:07:08,159 --> 02:07:10,440
this means all other components other

2948
02:07:10,440 --> 02:07:12,900
than our die must be integrated into our

2949
02:07:12,900 --> 02:07:14,340
power modules

2950
02:07:14,340 --> 02:07:16,260
now that includes our clock and our

2951
02:07:16,260 --> 02:07:18,360
power supplies and also our system

2952
02:07:18,360 --> 02:07:20,960
controllers

2953
02:07:21,239 --> 02:07:23,280
now in this case the failures were due

2954
02:07:23,280 --> 02:07:25,380
to losing clock output from our

2955
02:07:25,380 --> 02:07:27,719
oscillators

2956
02:07:27,719 --> 02:07:30,599
and after an extensive debug we found

2957
02:07:30,599 --> 02:07:32,040
that the root cause was due to

2958
02:07:32,040 --> 02:07:34,020
vibrations on the module from

2959
02:07:34,020 --> 02:07:36,480
piezoelectric effects our nearby

2960
02:07:36,480 --> 02:07:39,199
capacitors

2961
02:07:39,599 --> 02:07:41,880
now singing caps are not a new

2962
02:07:41,880 --> 02:07:44,159
phenomenon and in fact very common in

2963
02:07:44,159 --> 02:07:45,480
power design

2964
02:07:45,480 --> 02:07:47,760
but normally clock chips are placed in a

2965
02:07:47,760 --> 02:07:50,580
very quiet area of the board and often

2966
02:07:50,580 --> 02:07:53,159
not affected by power circuits but

2967
02:07:53,159 --> 02:07:54,960
because we needed to achieve this level

2968
02:07:54,960 --> 02:07:57,300
of integration these oscillators need to

2969
02:07:57,300 --> 02:08:00,480
be placed in very close proximity

2970
02:08:00,480 --> 02:08:03,179
now due to our switching frequency and

2971
02:08:03,179 --> 02:08:05,940
then the vibration resonance created it

2972
02:08:05,940 --> 02:08:08,460
caused Auto plane vibration on our mems

2973
02:08:08,460 --> 02:08:12,500
oscillator that caused it to crack

2974
02:08:13,139 --> 02:08:15,179
now the solution to this problem is a

2975
02:08:15,179 --> 02:08:17,760
multi-prong approach we can reduce the

2976
02:08:17,760 --> 02:08:22,219
vibration by using soft terminal caps

2977
02:08:22,619 --> 02:08:25,800
we can update our mems part with a lower

2978
02:08:25,800 --> 02:08:29,659
Q factor for the outer plane Direction

2979
02:08:30,599 --> 02:08:32,400
and we can also update our switching

2980
02:08:32,400 --> 02:08:34,619
frequency frequency to push the

2981
02:08:34,619 --> 02:08:36,239
resonance further away from these

2982
02:08:36,239 --> 02:08:39,020
sensitive bands

2983
02:08:40,320 --> 02:08:43,920
now addition to the to the density uh at

2984
02:08:43,920 --> 02:08:45,840
the system level we've been making a lot

2985
02:08:45,840 --> 02:08:49,199
of progress at the infrastructure level

2986
02:08:49,199 --> 02:08:52,380
we knew that we had to re-examine every

2987
02:08:52,380 --> 02:08:54,480
aspect of the data center infrastructure

2988
02:08:54,480 --> 02:08:56,880
in order to support our unprecedented

2989
02:08:56,880 --> 02:08:59,639
power and cooling density

2990
02:08:59,639 --> 02:09:01,560
we brought in a fully custom designed

2991
02:09:01,560 --> 02:09:04,920
CDU to support dojo's dense cooling

2992
02:09:04,920 --> 02:09:07,139
requirements and the amazing part is

2993
02:09:07,139 --> 02:09:08,940
we're able to do this at a fraction of

2994
02:09:08,940 --> 02:09:11,340
the cost versus buying off the shelf and

2995
02:09:11,340 --> 02:09:13,500
modifying it

2996
02:09:13,500 --> 02:09:15,540
and since our Dojo cabinet integrates

2997
02:09:15,540 --> 02:09:17,820
enough power and cooling to match an

2998
02:09:17,820 --> 02:09:21,960
entire row of standard it racks we need

2999
02:09:21,960 --> 02:09:23,820
to carefully design our cabinet and

3000
02:09:23,820 --> 02:09:26,400
infrastructure together

3001
02:09:26,400 --> 02:09:28,320
and we've already gone through several

3002
02:09:28,320 --> 02:09:30,239
iterations of this cabinet to optimize

3003
02:09:30,239 --> 02:09:31,800
this

3004
02:09:31,800 --> 02:09:33,960
and earlier in this year we started load

3005
02:09:33,960 --> 02:09:35,580
testing our power and cooling

3006
02:09:35,580 --> 02:09:37,860
infrastructure and we were able to push

3007
02:09:37,860 --> 02:09:39,900
it over two megawatts before we tripped

3008
02:09:39,900 --> 02:09:41,940
our substation and got a call from the

3009
02:09:41,940 --> 02:09:43,860
city

3010
02:09:43,860 --> 02:09:46,380
yeah

3011
02:09:46,380 --> 02:09:48,599
now last year we introduced only a

3012
02:09:48,599 --> 02:09:50,880
couple of components of our system the

3013
02:09:50,880 --> 02:09:53,820
custom D1 die and the training tile but

3014
02:09:53,820 --> 02:09:57,000
we teased the exit pod as our end goal

3015
02:09:57,000 --> 02:09:58,440
we'll walk through the remaining parts

3016
02:09:58,440 --> 02:10:00,179
of our system that are required to build

3017
02:10:00,179 --> 02:10:03,199
out this exit pod

3018
02:10:04,199 --> 02:10:06,480
now the system tray is a key part of

3019
02:10:06,480 --> 02:10:08,099
realizing our vision of a single

3020
02:10:08,099 --> 02:10:09,300
accelerator

3021
02:10:09,300 --> 02:10:11,940
it enables us to seamlessly seamlessly

3022
02:10:11,940 --> 02:10:14,760
connect tiles together not only within

3023
02:10:14,760 --> 02:10:17,699
the cabinet but between cabinets

3024
02:10:17,699 --> 02:10:20,280
we can connect these Tiles at very tight

3025
02:10:20,280 --> 02:10:22,800
spacing across the entire accelerator

3026
02:10:22,800 --> 02:10:25,500
and this is how we achieve our uniform

3027
02:10:25,500 --> 02:10:27,420
communication

3028
02:10:27,420 --> 02:10:29,639
this is a laminated bus bar that allows

3029
02:10:29,639 --> 02:10:31,639
us to integrate very high power

3030
02:10:31,639 --> 02:10:34,500
mechanical and thermal support in an

3031
02:10:34,500 --> 02:10:36,780
extremely dense integration

3032
02:10:36,780 --> 02:10:40,020
it's 75 millimeters in height and and

3033
02:10:40,020 --> 02:10:43,679
supports six Tiles at 135 kilograms

3034
02:10:43,679 --> 02:10:46,080
this is the equivalent of three to four

3035
02:10:46,080 --> 02:10:50,719
fully loaded high performance racks

3036
02:10:51,960 --> 02:10:54,300
next we need to feed data to the

3037
02:10:54,300 --> 02:10:56,460
training tiles this is where we've

3038
02:10:56,460 --> 02:10:59,219
developed the dojo interface processor

3039
02:10:59,219 --> 02:11:01,080
it provides our system with high

3040
02:11:01,080 --> 02:11:03,900
bandwidth dram to Stage our training

3041
02:11:03,900 --> 02:11:04,920
data

3042
02:11:04,920 --> 02:11:07,260
and it provides full memory bandwidth to

3043
02:11:07,260 --> 02:11:10,440
our training tiles using TTP our custom

3044
02:11:10,440 --> 02:11:12,420
protocol that we can use to communicate

3045
02:11:12,420 --> 02:11:15,300
across our entire accelerator

3046
02:11:15,300 --> 02:11:17,580
it also has high-speed ethernet that

3047
02:11:17,580 --> 02:11:19,679
helps us extend this custom protocol

3048
02:11:19,679 --> 02:11:21,719
over standard ethernet

3049
02:11:21,719 --> 02:11:24,360
and we provide native Hardware support

3050
02:11:24,360 --> 02:11:26,400
for this with little to no software

3051
02:11:26,400 --> 02:11:27,540
overhead

3052
02:11:27,540 --> 02:11:30,300
and lastly we can connect connect to it

3053
02:11:30,300 --> 02:11:35,179
through a standard Gen 4 pcie interface

3054
02:11:36,179 --> 02:11:38,580
now we pair 20 of these cards per tray

3055
02:11:38,580 --> 02:11:41,820
and that gives us 640 gigabytes of high

3056
02:11:41,820 --> 02:11:43,619
bandwidth dram

3057
02:11:43,619 --> 02:11:45,659
and this provides our disaggregated

3058
02:11:45,659 --> 02:11:48,480
memory layer for our training tiles

3059
02:11:48,480 --> 02:11:50,699
these cards are a high bandwidth ingest

3060
02:11:50,699 --> 02:11:54,960
path both through pcie and ethernet

3061
02:11:54,960 --> 02:11:56,760
they also provide a high ratex

3062
02:11:56,760 --> 02:11:59,040
z-connectivity path that allows

3063
02:11:59,040 --> 02:12:01,199
shortcuts across our large Dojo

3064
02:12:01,199 --> 02:12:03,860
accelerator

3065
02:12:04,739 --> 02:12:06,540
now we actually integrate the host

3066
02:12:06,540 --> 02:12:09,360
directly underneath our system tray

3067
02:12:09,360 --> 02:12:11,159
these hosts provide our ingest

3068
02:12:11,159 --> 02:12:13,619
processing and connect to our interface

3069
02:12:13,619 --> 02:12:16,739
processors through pcie

3070
02:12:16,739 --> 02:12:19,679
these hosts can provide Hardware video

3071
02:12:19,679 --> 02:12:23,820
decoder support for video Based training

3072
02:12:23,820 --> 02:12:26,400
and our user applications land on these

3073
02:12:26,400 --> 02:12:29,280
hosts that we so we can provide them

3074
02:12:29,280 --> 02:12:33,679
with the standard x86 Linux environment

3075
02:12:35,159 --> 02:12:37,500
now we can put two of these assemblies

3076
02:12:37,500 --> 02:12:40,020
into one cabinet and pair it with

3077
02:12:40,020 --> 02:12:42,239
redundant power supplies that do direct

3078
02:12:42,239 --> 02:12:45,360
conversion of three phase 480 volt AC

3079
02:12:45,360 --> 02:12:50,360
power to 52 volt DC power

3080
02:12:52,139 --> 02:12:54,900
Now by focusing on density at every

3081
02:12:54,900 --> 02:12:55,980
level

3082
02:12:55,980 --> 02:12:59,040
we can realize the vision of a single

3083
02:12:59,040 --> 02:13:00,239
accelerator

3084
02:13:00,239 --> 02:13:02,340
now starting with the uniform nodes on

3085
02:13:02,340 --> 02:13:04,199
our custom D1 die

3086
02:13:04,199 --> 02:13:06,360
we can connect them together in our

3087
02:13:06,360 --> 02:13:09,060
fully integrated training tile

3088
02:13:09,060 --> 02:13:12,000
and then finally seamlessly connecting

3089
02:13:12,000 --> 02:13:14,940
them across cabinet boundaries to form

3090
02:13:14,940 --> 02:13:17,280
our Dojo accelerator

3091
02:13:17,280 --> 02:13:20,099
and all together we can house two full

3092
02:13:20,099 --> 02:13:22,800
accelerators in our exit pod for a

3093
02:13:22,800 --> 02:13:26,040
combined one exaflop of ml compute

3094
02:13:26,040 --> 02:13:28,320
now all can altogether this amount of

3095
02:13:28,320 --> 02:13:31,260
technology and integration has only ever

3096
02:13:31,260 --> 02:13:33,360
been done a couple of times in the

3097
02:13:33,360 --> 02:13:35,520
history of compute

3098
02:13:35,520 --> 02:13:37,920
next we'll see how software can leverage

3099
02:13:37,920 --> 02:13:41,599
this to accelerate their performance

3100
02:13:41,780 --> 02:13:47,069
[Applause]

3101
02:13:48,000 --> 02:13:50,400
thanks Bill my name is Rajiv and I'm

3102
02:13:50,400 --> 02:13:52,800
going to talk some numbers

3103
02:13:52,800 --> 02:13:55,139
so our software stack begins with the pi

3104
02:13:55,139 --> 02:13:57,179
torch extension that speaks to our

3105
02:13:57,179 --> 02:13:59,040
commitment to one standard pytorch

3106
02:13:59,040 --> 02:14:01,380
models out of the box

3107
02:14:01,380 --> 02:14:02,940
we're going to talk more about our jit

3108
02:14:02,940 --> 02:14:04,920
compiler and the ingest pipeline that

3109
02:14:04,920 --> 02:14:07,619
feeds the hardware with data

3110
02:14:07,619 --> 02:14:10,199
abstractly performances tops times

3111
02:14:10,199 --> 02:14:13,800
utilization times accelerator occupancy

3112
02:14:13,800 --> 02:14:15,420
we've seen how the hardware provides

3113
02:14:15,420 --> 02:14:17,340
Peak Performance is the job of the

3114
02:14:17,340 --> 02:14:19,260
compiler to extract utilization from the

3115
02:14:19,260 --> 02:14:21,840
hardware while code is running on it

3116
02:14:21,840 --> 02:14:23,880
and it's the job of the ingest pipeline

3117
02:14:23,880 --> 02:14:25,560
to make sure that data can be fettered

3118
02:14:25,560 --> 02:14:26,940
at throughput high enough for the

3119
02:14:26,940 --> 02:14:29,880
hardware to not ever starve

3120
02:14:29,880 --> 02:14:31,500
so let's talk about why communication

3121
02:14:31,500 --> 02:14:33,780
bound models are difficult to scale

3122
02:14:33,780 --> 02:14:36,119
but before that let's look at why resnet

3123
02:14:36,119 --> 02:14:38,940
50 like models are easier to scale you

3124
02:14:38,940 --> 02:14:40,560
start off with a single accelerator run

3125
02:14:40,560 --> 02:14:42,480
the forward and backward passes followed

3126
02:14:42,480 --> 02:14:44,280
by the optimizer

3127
02:14:44,280 --> 02:14:46,380
than to scale this up you run multiple

3128
02:14:46,380 --> 02:14:48,420
copies of this on multiple accelerators

3129
02:14:48,420 --> 02:14:50,159
and while the gradient is produced by

3130
02:14:50,159 --> 02:14:51,900
the backward pass do need to be reduced

3131
02:14:51,900 --> 02:14:53,639
and this introduces some communication

3132
02:14:53,639 --> 02:14:55,800
this can be done Pipeline with the

3133
02:14:55,800 --> 02:14:58,280
backward pass

3134
02:15:00,179 --> 02:15:02,040
this setup scales fairly well almost

3135
02:15:02,040 --> 02:15:04,760
linearly

3136
02:15:05,099 --> 02:15:07,079
for models with much larger activations

3137
02:15:07,079 --> 02:15:09,239
we run into a problem as soon as we want

3138
02:15:09,239 --> 02:15:10,739
to run the forward pass

3139
02:15:10,739 --> 02:15:12,540
the batch size that fits in a single

3140
02:15:12,540 --> 02:15:14,159
accelerator is often smaller than the

3141
02:15:14,159 --> 02:15:15,780
batch Norm surface

3142
02:15:15,780 --> 02:15:17,520
so to get around this researchers

3143
02:15:17,520 --> 02:15:19,139
typically run this setup on multiple

3144
02:15:19,139 --> 02:15:21,420
accelerators in sync batch Norm mode

3145
02:15:21,420 --> 02:15:23,460
this introduces latency bound

3146
02:15:23,460 --> 02:15:25,139
communication to the critical path of

3147
02:15:25,139 --> 02:15:27,300
the forward pass and we already have a

3148
02:15:27,300 --> 02:15:29,699
communication bottleneck

3149
02:15:29,699 --> 02:15:31,079
and while there are ways to get around

3150
02:15:31,079 --> 02:15:33,239
this they usually involve tedious manual

3151
02:15:33,239 --> 02:15:35,940
work best suited for a compiler

3152
02:15:35,940 --> 02:15:37,739
and ultimately there's no skirting

3153
02:15:37,739 --> 02:15:39,300
around the fact that if your state does

3154
02:15:39,300 --> 02:15:42,000
not fit in a single accelerator you can

3155
02:15:42,000 --> 02:15:44,820
be communication bound

3156
02:15:44,820 --> 02:15:46,860
and even with significant efforts from

3157
02:15:46,860 --> 02:15:49,380
our ml Engineers we see such models

3158
02:15:49,380 --> 02:15:52,380
don't scale linearly

3159
02:15:52,380 --> 02:15:54,840
the dojo system was built to make such

3160
02:15:54,840 --> 02:15:58,020
models work at high utilization the high

3161
02:15:58,020 --> 02:16:00,179
density integration is was built to not

3162
02:16:00,179 --> 02:16:01,500
only accelerate the compute bound

3163
02:16:01,500 --> 02:16:03,960
portions of a model but also the latency

3164
02:16:03,960 --> 02:16:06,840
bound portions like a batch Norm or the

3165
02:16:06,840 --> 02:16:09,540
bandwidth bound portions like a gradient

3166
02:16:09,540 --> 02:16:12,840
all reduced or a parameter all gather

3167
02:16:12,840 --> 02:16:15,179
a slice of the dojo mesh can be carved

3168
02:16:15,179 --> 02:16:17,699
out to run any model

3169
02:16:17,699 --> 02:16:19,860
the only thing users need to do is to

3170
02:16:19,860 --> 02:16:21,960
make the slice large enough to fit a

3171
02:16:21,960 --> 02:16:23,639
bathroom surface for their particular

3172
02:16:23,639 --> 02:16:25,320
model

3173
02:16:25,320 --> 02:16:27,780
after that the partition presents itself

3174
02:16:27,780 --> 02:16:30,420
as one large accelerator freeing the

3175
02:16:30,420 --> 02:16:32,040
users from having to worry about the

3176
02:16:32,040 --> 02:16:34,558
internal details of execution

3177
02:16:34,558 --> 02:16:36,959
and as the job of the compiler to

3178
02:16:36,959 --> 02:16:38,879
maintain this abstraction

3179
02:16:38,879 --> 02:16:40,740
fine grain synchronization Primitives in

3180
02:16:40,740 --> 02:16:43,620
uniform low latency makes it easy to

3181
02:16:43,620 --> 02:16:45,540
accelerate all forms of parallelism

3182
02:16:45,540 --> 02:16:48,120
across integration boundaries tensors

3183
02:16:48,120 --> 02:16:50,040
are usually store sharded in SRAM and

3184
02:16:50,040 --> 02:16:52,080
replicated just in time for layers

3185
02:16:52,080 --> 02:16:54,660
execution we depend on the high Dojo

3186
02:16:54,660 --> 02:16:57,599
bandwidth to hide this replication time

3187
02:16:57,599 --> 02:16:59,459
tensor replication and other data

3188
02:16:59,459 --> 02:17:01,500
transfers are overlapped with compute

3189
02:17:01,500 --> 02:17:03,299
and the compiler can also recompute

3190
02:17:03,299 --> 02:17:07,138
layers when it's profitable to do so

3191
02:17:07,138 --> 02:17:09,478
we expect most models to work out of the

3192
02:17:09,478 --> 02:17:12,120
box as an example we took the recently

3193
02:17:12,120 --> 02:17:14,218
released stable diffusion model and got

3194
02:17:14,218 --> 02:17:16,679
it running on dojo in minutes out of the

3195
02:17:16,679 --> 02:17:19,200
box the Kampala was able to map it in a

3196
02:17:19,200 --> 02:17:22,558
model parallel manner on 25 Dojo dies

3197
02:17:22,558 --> 02:17:24,840
here's some pictures of a cyber truck on

3198
02:17:24,840 --> 02:17:27,179
Mars generated by stable diffusion

3199
02:17:27,179 --> 02:17:29,040
running on dojo

3200
02:17:29,040 --> 02:17:30,860
looks

3201
02:17:30,860 --> 02:17:34,129
[Applause]

3202
02:17:35,898 --> 02:17:38,160
looks like it still has some ways to go

3203
02:17:38,160 --> 02:17:39,780
before matching the Tesla Design Studio

3204
02:17:39,780 --> 02:17:42,139
team

3205
02:17:42,420 --> 02:17:44,040
so we've talked about how communication

3206
02:17:44,040 --> 02:17:45,898
bottlenecks can hamper scalability

3207
02:17:45,898 --> 02:17:48,840
perhaps an acid test of a compiler and

3208
02:17:48,840 --> 02:17:51,058
the underlying Hardware is executing a

3209
02:17:51,058 --> 02:17:53,459
cross-diabash form layer like mentioned

3210
02:17:53,459 --> 02:17:55,740
before this can be a Serial bottleneck

3211
02:17:55,740 --> 02:17:57,540
the communication phase of a bachelor

3212
02:17:57,540 --> 02:17:59,519
begins with nodes Computing the local

3213
02:17:59,519 --> 02:18:01,920
mean and standard deviations then

3214
02:18:01,920 --> 02:18:04,080
coordinating to reduce these values then

3215
02:18:04,080 --> 02:18:06,299
broadcasting these values back and then

3216
02:18:06,299 --> 02:18:09,359
they resume their work in parallel

3217
02:18:09,359 --> 02:18:11,340
so what would an ideal batch form look

3218
02:18:11,340 --> 02:18:13,740
like on 25 Dojo dots

3219
02:18:13,740 --> 02:18:15,540
let's say the previous less activations

3220
02:18:15,540 --> 02:18:19,138
are are already split across dice

3221
02:18:19,138 --> 02:18:21,898
we would expect that 350 nodes on each

3222
02:18:21,898 --> 02:18:23,700
die to coordinate and produce die local

3223
02:18:23,700 --> 02:18:26,218
mean and standard division values

3224
02:18:26,218 --> 02:18:28,080
ideally these would get would further

3225
02:18:28,080 --> 02:18:29,580
reduced with the final value ending

3226
02:18:29,580 --> 02:18:31,080
somewhere and towards the middle of the

3227
02:18:31,080 --> 02:18:32,879
tile

3228
02:18:32,879 --> 02:18:34,920
we would then hope to see a broadcast of

3229
02:18:34,920 --> 02:18:38,160
this value radiating from the center

3230
02:18:38,160 --> 02:18:39,898
let's see how the compiler actually

3231
02:18:39,898 --> 02:18:41,760
executes a real Bachelor operation

3232
02:18:41,760 --> 02:18:44,879
across 25 dice the communication trees

3233
02:18:44,879 --> 02:18:47,340
were extracted from the compiler and the

3234
02:18:47,340 --> 02:18:49,620
timing is from a real Hardware one we're

3235
02:18:49,620 --> 02:18:53,218
about to see 8750 nodes on 25 dies

3236
02:18:53,218 --> 02:18:55,260
coordinating to reduce and then

3237
02:18:55,260 --> 02:18:57,478
broadcast the bastrum mean and standard

3238
02:18:57,478 --> 02:18:59,519
deviation valves

3239
02:18:59,519 --> 02:19:01,679
dial Local reduction

3240
02:19:01,679 --> 02:19:04,320
followed by global reduction towards the

3241
02:19:04,320 --> 02:19:05,700
middle of the tie

3242
02:19:05,700 --> 02:19:07,638
then the reduced value broadcast

3243
02:19:07,638 --> 02:19:09,718
radiating from The Middle

3244
02:19:09,718 --> 02:19:11,459
accelerated by the Hardware's broadcast

3245
02:19:11,459 --> 02:19:14,058
facility

3246
02:19:14,879 --> 02:19:17,099
this operation takes only five

3247
02:19:17,099 --> 02:19:20,638
microseconds on 25 Dojo dice the same

3248
02:19:20,638 --> 02:19:23,160
operation takes 150 microseconds on 24

3249
02:19:23,160 --> 02:19:26,040
gpus this is an orders of magnitude

3250
02:19:26,040 --> 02:19:28,500
improvement over gpus

3251
02:19:28,500 --> 02:19:30,599
and while we talked about an all reduced

3252
02:19:30,599 --> 02:19:32,280
operation in the context of a batch Norm

3253
02:19:32,280 --> 02:19:34,379
it's important to reiterate that the

3254
02:19:34,379 --> 02:19:36,898
same advantages apply to all other

3255
02:19:36,898 --> 02:19:38,820
communication Primitives and these

3256
02:19:38,820 --> 02:19:41,040
Primitives are essential for large scale

3257
02:19:41,040 --> 02:19:42,898
training

3258
02:19:42,898 --> 02:19:45,179
so how about full model performance

3259
02:19:45,179 --> 02:19:47,340
so while we think that resonant 50 is

3260
02:19:47,340 --> 02:19:49,140
not a good representation of real world

3261
02:19:49,140 --> 02:19:51,359
Tesla workloads it is a standard

3262
02:19:51,359 --> 02:19:54,000
Benchmark so let's start there

3263
02:19:54,000 --> 02:19:56,580
we are already able to match the 100 die

3264
02:19:56,580 --> 02:19:59,280
for die however perhaps a hint of dojo's

3265
02:19:59,280 --> 02:20:01,260
capabilities is that we're able to hit

3266
02:20:01,260 --> 02:20:03,420
this number with just a batch of 8 per

3267
02:20:03,420 --> 02:20:04,380
die

3268
02:20:04,380 --> 02:20:06,120
but Dojo was really built to tackle

3269
02:20:06,120 --> 02:20:09,000
larger complex models

3270
02:20:09,000 --> 02:20:10,740
so when we set out to tackle real world

3271
02:20:10,740 --> 02:20:12,479
workloads we looked at the usage

3272
02:20:12,479 --> 02:20:15,300
patterns of our current GPU cluster and

3273
02:20:15,300 --> 02:20:17,220
two models stood up the auto labeling

3274
02:20:17,220 --> 02:20:19,320
networks a class of offline models that

3275
02:20:19,320 --> 02:20:21,060
are used to generate ground truth and

3276
02:20:21,060 --> 02:20:22,740
the occupancy networks that you heard

3277
02:20:22,740 --> 02:20:23,939
about

3278
02:20:23,939 --> 02:20:25,740
the auto labeling networks are large

3279
02:20:25,740 --> 02:20:27,359
models that have high arithmetic

3280
02:20:27,359 --> 02:20:29,820
intensity while the occupancy networks

3281
02:20:29,820 --> 02:20:32,399
can be in justbound we chose these

3282
02:20:32,399 --> 02:20:34,140
models because together they account for

3283
02:20:34,140 --> 02:20:36,180
a large chunk of our current GPU cluster

3284
02:20:36,180 --> 02:20:37,920
usage and they would challenge the

3285
02:20:37,920 --> 02:20:41,359
system in different ways

3286
02:20:42,120 --> 02:20:43,920
so how do we do on these two networks

3287
02:20:43,920 --> 02:20:45,960
the results we're about to see were

3288
02:20:45,960 --> 02:20:47,939
measured on multi-die systems for both

3289
02:20:47,939 --> 02:20:50,819
the GPU and Dojo but normalized to per

3290
02:20:50,819 --> 02:20:52,680
die numbers

3291
02:20:52,680 --> 02:20:55,380
on our Auto labeling Network we're

3292
02:20:55,380 --> 02:20:57,000
already able to surpass the performance

3293
02:20:57,000 --> 02:20:58,920
of an a100 with our current Hardware

3294
02:20:58,920 --> 02:21:01,979
running on our older generation vrms on

3295
02:21:01,979 --> 02:21:03,420
our production Hardware with our newer

3296
02:21:03,420 --> 02:21:05,819
vrams that translates to doubling the

3297
02:21:05,819 --> 02:21:08,100
throughput of an a100

3298
02:21:08,100 --> 02:21:09,660
and our model showed that with some key

3299
02:21:09,660 --> 02:21:11,880
compiler optimizations we could get to

3300
02:21:11,880 --> 02:21:14,340
more than three extra performance of an

3301
02:21:14,340 --> 02:21:15,600
a100

3302
02:21:15,600 --> 02:21:17,399
we see even bigger leaps on the

3303
02:21:17,399 --> 02:21:20,100
occupancy Network

3304
02:21:20,100 --> 02:21:22,020
almost 3x with our production Hardware

3305
02:21:22,020 --> 02:21:25,580
with room for more

3306
02:21:26,340 --> 02:21:28,530
foreign

3307
02:21:28,530 --> 02:21:32,489
[Applause]

3308
02:21:35,240 --> 02:21:38,100
level of compiler performance we could

3309
02:21:38,100 --> 02:21:40,020
replace the ml compute of

3310
02:21:40,020 --> 02:21:44,100
one two three four five and six GPU

3311
02:21:44,100 --> 02:21:48,450
boxes with just a single Dojo tile

3312
02:21:48,450 --> 02:21:54,560
[Applause]

3313
02:21:54,560 --> 02:21:57,359
and this Dojo tile costs less than one

3314
02:21:57,359 --> 02:21:59,240
of these GPU boxes

3315
02:21:59,240 --> 02:22:01,020
whoa

3316
02:22:01,020 --> 02:22:04,020
yeah

3317
02:22:04,319 --> 02:22:06,600
what it really means is that networks

3318
02:22:06,600 --> 02:22:08,760
that took more than a month to train now

3319
02:22:08,760 --> 02:22:11,840
take less than a week

3320
02:22:13,020 --> 02:22:15,540
alas when we measure things it did not

3321
02:22:15,540 --> 02:22:16,859
turn out so well

3322
02:22:16,859 --> 02:22:18,899
at the pie torch level we did not see

3323
02:22:18,899 --> 02:22:21,120
our expected performance out of the git

3324
02:22:21,120 --> 02:22:22,920
and this timeline chart shows our

3325
02:22:22,920 --> 02:22:23,700
problem

3326
02:22:23,700 --> 02:22:26,220
the teeny tiny little green bars that's

3327
02:22:26,220 --> 02:22:27,660
the compile code running on the

3328
02:22:27,660 --> 02:22:28,979
accelerator

3329
02:22:28,979 --> 02:22:31,260
the row is mostly white space where the

3330
02:22:31,260 --> 02:22:34,640
hardware is just waiting for data

3331
02:22:35,819 --> 02:22:38,640
with our dense ml compute Dojo hosts

3332
02:22:38,640 --> 02:22:40,800
effectively have 10x more ml compute

3333
02:22:40,800 --> 02:22:43,080
than the GPU host the data loader is

3334
02:22:43,080 --> 02:22:44,819
running on this one host simply couldn't

3335
02:22:44,819 --> 02:22:48,479
keep up with all that ml Hardware

3336
02:22:48,479 --> 02:22:50,399
so to solve our data loader scalability

3337
02:22:50,399 --> 02:22:52,500
issues we knew we had to get over the

3338
02:22:52,500 --> 02:22:54,240
limit of this single host

3339
02:22:54,240 --> 02:22:57,060
the Tesla transport protocol moves data

3340
02:22:57,060 --> 02:22:59,760
seamlessly across host tiles and ingest

3341
02:22:59,760 --> 02:23:02,160
processors so we extended the Tesla

3342
02:23:02,160 --> 02:23:03,960
transport protocol to work over ethernet

3343
02:23:03,960 --> 02:23:06,300
we then built the dojo network interface

3344
02:23:06,300 --> 02:23:08,700
called the dnic to leverage TTP over

3345
02:23:08,700 --> 02:23:11,399
ethernet this allows any host with a

3346
02:23:11,399 --> 02:23:13,920
dnic card to be able to DM it to and

3347
02:23:13,920 --> 02:23:17,040
from other TTP endpoints

3348
02:23:17,040 --> 02:23:19,560
so we started with the dojo mesh

3349
02:23:19,560 --> 02:23:22,020
then we added a tier of data loading

3350
02:23:22,020 --> 02:23:25,460
hosts equipped with the dnic card

3351
02:23:25,859 --> 02:23:27,960
we connected these hosts to the mesh via

3352
02:23:27,960 --> 02:23:30,300
an ethernet switch now every host in

3353
02:23:30,300 --> 02:23:31,859
this data loading tier is capable of

3354
02:23:31,859 --> 02:23:33,960
reaching all TTP endpoints in the dojo

3355
02:23:33,960 --> 02:23:38,540
mesh via Hardware accelerated dma

3356
02:23:39,000 --> 02:23:41,580
after these optimizations went in our

3357
02:23:41,580 --> 02:23:44,040
occupancy went from four percent

3358
02:23:44,040 --> 02:23:46,080
to 97 percent

3359
02:23:46,080 --> 02:23:47,700
so the data loading sections have

3360
02:23:47,700 --> 02:23:50,180
reduced

3361
02:23:53,280 --> 02:23:55,260
data the data loading sections have

3362
02:23:55,260 --> 02:23:56,939
reduced drastically and the ml Hardware

3363
02:23:56,939 --> 02:23:59,220
is kept busy we actually expect this

3364
02:23:59,220 --> 02:24:01,620
number to go to 100 pretty soon

3365
02:24:01,620 --> 02:24:03,899
after these changes went in we saw the

3366
02:24:03,899 --> 02:24:06,060
full expected speed up from the pytorch

3367
02:24:06,060 --> 02:24:09,680
layer and we were back in business

3368
02:24:09,899 --> 02:24:12,120
so we started with Hardware design that

3369
02:24:12,120 --> 02:24:13,620
breaks through traditional integration

3370
02:24:13,620 --> 02:24:15,780
boundaries in service of our vision of a

3371
02:24:15,780 --> 02:24:17,580
single giant accelerator

3372
02:24:17,580 --> 02:24:19,439
we've seen how the compiler and just

3373
02:24:19,439 --> 02:24:21,840
layers build on top of that Hardware

3374
02:24:21,840 --> 02:24:23,640
so after proving your performance on

3375
02:24:23,640 --> 02:24:25,979
these complex real-world networks we

3376
02:24:25,979 --> 02:24:27,300
knew what our first large-scale

3377
02:24:27,300 --> 02:24:29,399
deployment would Target our high

3378
02:24:29,399 --> 02:24:31,380
arithmetic intensity Auto labeling

3379
02:24:31,380 --> 02:24:32,880
Networks

3380
02:24:32,880 --> 02:24:36,060
today that occupies 4000 gpus over 72

3381
02:24:36,060 --> 02:24:37,620
GPU racks

3382
02:24:37,620 --> 02:24:39,479
with our dense computer and our high

3383
02:24:39,479 --> 02:24:41,640
performance we expect to provide the

3384
02:24:41,640 --> 02:24:44,040
same throughput with just four Dojo

3385
02:24:44,040 --> 02:24:46,580
cabinets

3386
02:24:47,540 --> 02:24:53,939
[Applause]

3387
02:24:53,939 --> 02:24:55,859
and these four Dojo cabinets will be

3388
02:24:55,859 --> 02:24:58,200
part of our first exopod that we plan to

3389
02:24:58,200 --> 02:25:00,720
build by quarter one of 2023

3390
02:25:00,720 --> 02:25:02,939
this one more than double Tesla's Auto

3391
02:25:02,939 --> 02:25:05,840
labeling capacity

3392
02:25:06,840 --> 02:25:10,450
[Applause]

3393
02:25:10,859 --> 02:25:13,200
the first extra part is part of a total

3394
02:25:13,200 --> 02:25:14,880
of seven extra parts that we plan to

3395
02:25:14,880 --> 02:25:17,160
build in Palo Alto right here across the

3396
02:25:17,160 --> 02:25:19,340
wall

3397
02:25:19,500 --> 02:25:20,760
[Applause]

3398
02:25:20,760 --> 02:25:22,620
and we have a display cabinet from one

3399
02:25:22,620 --> 02:25:26,660
of these exopods for everyone to look at

3400
02:25:27,780 --> 02:25:31,200
six tiles densely packed on a tray 54

3401
02:25:31,200 --> 02:25:34,140
petaflops of compute 640 gigabytes of

3402
02:25:34,140 --> 02:25:36,660
high bandwidth memory with power and

3403
02:25:36,660 --> 02:25:39,420
host to feed it

3404
02:25:39,420 --> 02:25:42,200
a lot of

3405
02:25:44,160 --> 02:25:46,140
and we're building out new versions of

3406
02:25:46,140 --> 02:25:48,240
all our cluster components and

3407
02:25:48,240 --> 02:25:50,580
constantly improving our software to hit

3408
02:25:50,580 --> 02:25:52,920
new limits of skill we believe that we

3409
02:25:52,920 --> 02:25:55,260
can get another 10x improvement with our

3410
02:25:55,260 --> 02:25:58,100
next Generation Hardware

3411
02:25:58,680 --> 02:26:00,600
and to realize their ambitious goals we

3412
02:26:00,600 --> 02:26:01,740
need the best software and Hardware

3413
02:26:01,740 --> 02:26:04,200
Engineers so please come talk to us or

3414
02:26:04,200 --> 02:26:07,360
visit tesla.com AI thank you

3415
02:26:07,360 --> 02:26:19,190
[Applause]

3416
02:26:19,859 --> 02:26:23,540
all right all right let me know

3417
02:26:25,040 --> 02:26:27,319
all right

3418
02:26:27,319 --> 02:26:29,880
so we

3419
02:26:29,880 --> 02:26:33,200
um hopefully that was enough detail

3420
02:26:34,080 --> 02:26:37,620
and now we can move to questions

3421
02:26:37,620 --> 02:26:41,640
um and uh guys uh like I think the team

3422
02:26:41,640 --> 02:26:46,319
came back come out on stage and but

3423
02:26:46,319 --> 02:26:48,899
we really wanted to show the the depth

3424
02:26:48,899 --> 02:26:52,560
and breadth of Tesla in um artificial

3425
02:26:52,560 --> 02:26:54,000
intelligence

3426
02:26:54,000 --> 02:26:55,640
compute Hardware

3427
02:26:55,640 --> 02:26:58,500
robotics actuators and

3428
02:26:58,500 --> 02:26:59,700
[Music]

3429
02:26:59,700 --> 02:27:01,740
and try to really shift the perception

3430
02:27:01,740 --> 02:27:05,040
of the company away from uh you know a

3431
02:27:05,040 --> 02:27:06,540
lot of people think we're like just a

3432
02:27:06,540 --> 02:27:08,220
car company or we make cool cars

3433
02:27:08,220 --> 02:27:10,200
whatever but uh

3434
02:27:10,200 --> 02:27:12,540
they don't have most people have no idea

3435
02:27:12,540 --> 02:27:16,380
that Tesla is arguably the the leader in

3436
02:27:16,380 --> 02:27:19,500
real world AI hardware and software

3437
02:27:19,500 --> 02:27:21,899
and that we're building

3438
02:27:21,899 --> 02:27:25,439
uh what is arguably the first

3439
02:27:25,439 --> 02:27:28,380
uh some of the most radical

3440
02:27:28,380 --> 02:27:30,660
computer architecture since the the

3441
02:27:30,660 --> 02:27:32,460
crayon supercomputer

3442
02:27:32,460 --> 02:27:34,080
and I think if you're interested in

3443
02:27:34,080 --> 02:27:36,479
developing uh some some of the most

3444
02:27:36,479 --> 02:27:37,800
advanced technology in the world that's

3445
02:27:37,800 --> 02:27:40,080
going to really affect the world in a

3446
02:27:40,080 --> 02:27:43,859
positive way uh tells us the place to be

3447
02:27:43,859 --> 02:27:45,359
so yeah let's fire away with some

3448
02:27:45,359 --> 02:27:47,540
questions

3449
02:27:48,780 --> 02:27:50,819
I think there's a mic at the front and a

3450
02:27:50,819 --> 02:27:53,420
mic at the back

3451
02:27:53,760 --> 02:27:56,479
uh

3452
02:28:03,740 --> 02:28:06,960
thank you very much I I was impressed

3453
02:28:06,960 --> 02:28:08,160
here

3454
02:28:08,160 --> 02:28:10,979
yeah I was impressed very much by

3455
02:28:10,979 --> 02:28:13,740
Optimus but I wonder why they don't

3456
02:28:13,740 --> 02:28:16,200
driven the hunt why did you choose a

3457
02:28:16,200 --> 02:28:18,300
tender driven approach for the hunt

3458
02:28:18,300 --> 02:28:21,420
because tendons are not very durable and

3459
02:28:21,420 --> 02:28:24,500
why spring loaded

3460
02:28:26,280 --> 02:28:28,500
well this is pretty cool awesome yes

3461
02:28:28,500 --> 02:28:30,000
that's a great question

3462
02:28:30,000 --> 02:28:31,620
um you know when it comes to any type of

3463
02:28:31,620 --> 02:28:33,780
actuation scheme there's trade-offs

3464
02:28:33,780 --> 02:28:35,160
between you know whether or not it's a

3465
02:28:35,160 --> 02:28:36,960
tendon urine system or some type of

3466
02:28:36,960 --> 02:28:39,120
linkage based system I'm just keep in

3467
02:28:39,120 --> 02:28:40,080
mind close to your mouth a little bit

3468
02:28:40,080 --> 02:28:43,859
closer yeah Jeremy cool

3469
02:28:43,859 --> 02:28:45,540
um so yeah the main reason why we went

3470
02:28:45,540 --> 02:28:48,240
for a tendon-based system is that you

3471
02:28:48,240 --> 02:28:49,800
know first we actually investigated some

3472
02:28:49,800 --> 02:28:51,540
synthetic tendons but we found that

3473
02:28:51,540 --> 02:28:53,880
metallic boating cables are you know a

3474
02:28:53,880 --> 02:28:55,439
lot stronger

3475
02:28:55,439 --> 02:28:58,200
um one of the advantages of these cables

3476
02:28:58,200 --> 02:29:00,300
um is that it's very good for part

3477
02:29:00,300 --> 02:29:02,280
reduction we do want to make a lot of

3478
02:29:02,280 --> 02:29:04,380
these hands so having a bunch of parts a

3479
02:29:04,380 --> 02:29:06,600
bunch of small linkages ends up being

3480
02:29:06,600 --> 02:29:08,340
you know a problem when you're making a

3481
02:29:08,340 --> 02:29:11,100
lot of something one of the big reasons

3482
02:29:11,100 --> 02:29:13,200
that you know

3483
02:29:13,200 --> 02:29:15,420
tendons are better than linkages in a

3484
02:29:15,420 --> 02:29:17,100
sense is that you can be anti-backlash

3485
02:29:17,100 --> 02:29:20,100
so anti-backlash essentially you know

3486
02:29:20,100 --> 02:29:22,979
allows you to not have any gaps or you

3487
02:29:22,979 --> 02:29:26,000
know stuttery Motion in your fingers

3488
02:29:26,000 --> 02:29:28,620
spring-loaded mainly what spring loaded

3489
02:29:28,620 --> 02:29:31,140
allows us to do is it allows us to have

3490
02:29:31,140 --> 02:29:34,500
active opening so instead of having to

3491
02:29:34,500 --> 02:29:36,300
have two actuators to drive the fingers

3492
02:29:36,300 --> 02:29:38,939
closed and then open we have the ability

3493
02:29:38,939 --> 02:29:41,160
to you know have the tendon drive them

3494
02:29:41,160 --> 02:29:42,840
closed and then the Springs passively

3495
02:29:42,840 --> 02:29:44,939
extend and this is something that's seen

3496
02:29:44,939 --> 02:29:46,620
in our hands as well right we have the

3497
02:29:46,620 --> 02:29:48,600
ability to actively flex and then we

3498
02:29:48,600 --> 02:29:52,380
also have the ability to extend yeah

3499
02:29:52,380 --> 02:29:55,380
I mean our goal with Optimus is to have

3500
02:29:55,380 --> 02:29:57,720
a robot that is maximally useful as

3501
02:29:57,720 --> 02:29:59,760
quickly as possible so there's a lot of

3502
02:29:59,760 --> 02:30:02,220
ways to solve the various problems of a

3503
02:30:02,220 --> 02:30:03,899
humanoid robot

3504
02:30:03,899 --> 02:30:07,140
um and uh we're probably not balking up

3505
02:30:07,140 --> 02:30:09,060
the right Tree on on all the Technical

3506
02:30:09,060 --> 02:30:10,740
Solutions and I should say that we're

3507
02:30:10,740 --> 02:30:13,140
we're open to evolving the Technical

3508
02:30:13,140 --> 02:30:15,120
Solutions that you see here over time

3509
02:30:15,120 --> 02:30:17,460
we're not they're not locked in stone

3510
02:30:17,460 --> 02:30:20,160
um but we do we have to pick something

3511
02:30:20,160 --> 02:30:22,260
um in and we want to pick something

3512
02:30:22,260 --> 02:30:24,300
that's going to allow us to

3513
02:30:24,300 --> 02:30:26,280
produce the robot as quickly as possible

3514
02:30:26,280 --> 02:30:28,740
and have it like I said be useful as

3515
02:30:28,740 --> 02:30:30,479
quickly as possible we're trying to

3516
02:30:30,479 --> 02:30:33,120
follow the goal of fastest path to a

3517
02:30:33,120 --> 02:30:35,780
useful robot that can be made at volume

3518
02:30:35,780 --> 02:30:37,859
and we're going to test the robot

3519
02:30:37,859 --> 02:30:40,819
internally at Tesla uh in in our Factory

3520
02:30:40,819 --> 02:30:44,100
and uh and just see like how useful is

3521
02:30:44,100 --> 02:30:46,500
it because you have to have a you're

3522
02:30:46,500 --> 02:30:48,300
going to close the loop on reality to

3523
02:30:48,300 --> 02:30:51,899
confirm that the robot is in fact useful

3524
02:30:51,899 --> 02:30:55,979
um and uh yeah so we're just gonna use

3525
02:30:55,979 --> 02:30:58,800
it to build things and um we're

3526
02:30:58,800 --> 02:31:00,120
confident we can do that with the hand

3527
02:31:00,120 --> 02:31:02,160
that we have currently designed but this

3528
02:31:02,160 --> 02:31:04,020
I'm for sure they'll be had version two

3529
02:31:04,020 --> 02:31:05,640
version three and we may change the

3530
02:31:05,640 --> 02:31:07,319
architecture quite significantly over

3531
02:31:07,319 --> 02:31:09,560
time

3532
02:31:12,000 --> 02:31:13,979
sorry Hi

3533
02:31:13,979 --> 02:31:16,680
um you're the Optimus robot is really

3534
02:31:16,680 --> 02:31:19,140
impressive that you did a great job

3535
02:31:19,140 --> 02:31:22,020
um bipedal robots are really difficult

3536
02:31:22,020 --> 02:31:24,000
um but what I noticed might be missing

3537
02:31:24,000 --> 02:31:28,800
from your plan is uh to acknowledge the

3538
02:31:28,800 --> 02:31:30,600
utility of the human spirit and I'm

3539
02:31:30,600 --> 02:31:33,060
wondering if Optimus will ever get a

3540
02:31:33,060 --> 02:31:34,800
personality and be able to laugh at our

3541
02:31:34,800 --> 02:31:36,960
jokes while they've well it folds our

3542
02:31:36,960 --> 02:31:38,100
clothes

3543
02:31:38,100 --> 02:31:39,840
yeah absolutely

3544
02:31:39,840 --> 02:31:43,020
um I think we want to have

3545
02:31:43,020 --> 02:31:46,140
really fun versions of Optimus

3546
02:31:46,140 --> 02:31:49,819
um and so that optimists can both do be

3547
02:31:49,819 --> 02:31:52,920
utilitarian and do tasks but can also be

3548
02:31:52,920 --> 02:31:54,960
kind of like a friend

3549
02:31:54,960 --> 02:31:58,140
um and a buddy and and um hang out with

3550
02:31:58,140 --> 02:31:59,100
you

3551
02:31:59,100 --> 02:32:01,140
and I'm sure people will think of all

3552
02:32:01,140 --> 02:32:04,380
sorts of creative uses for this robot

3553
02:32:04,380 --> 02:32:05,220
um

3554
02:32:05,220 --> 02:32:08,340
and uh you know the thing once you have

3555
02:32:08,340 --> 02:32:11,399
the core intelligence and actuators

3556
02:32:11,399 --> 02:32:14,700
figured out then you can actually

3557
02:32:14,700 --> 02:32:17,280
you know put all sorts of

3558
02:32:17,280 --> 02:32:19,280
costumes I guess

3559
02:32:19,280 --> 02:32:21,840
on on the robot I mean you can make the

3560
02:32:21,840 --> 02:32:24,680
robot look uh

3561
02:32:25,500 --> 02:32:27,060
you can scan the robot in many different

3562
02:32:27,060 --> 02:32:28,439
ways

3563
02:32:28,439 --> 02:32:31,260
um and um I'm sure people will find uh

3564
02:32:31,260 --> 02:32:34,020
very interesting ways to to uh

3565
02:32:34,020 --> 02:32:38,060
yeah versions of Optimus so

3566
02:32:39,780 --> 02:32:42,840
thanks for the great presentation I

3567
02:32:42,840 --> 02:32:43,920
wanted to know if there was an

3568
02:32:43,920 --> 02:32:46,979
equivalent to interventions in Optimus

3569
02:32:46,979 --> 02:32:49,260
it seems like labeling through moments

3570
02:32:49,260 --> 02:32:50,700
where humans disagree with what's going

3571
02:32:50,700 --> 02:32:53,700
on is important and in a humanoid robot

3572
02:32:53,700 --> 02:32:56,580
that might be also a desirable source of

3573
02:32:56,580 --> 02:32:58,760
information

3574
02:33:01,500 --> 02:33:04,319
yes it was saying

3575
02:33:04,319 --> 02:33:05,640
um

3576
02:33:05,640 --> 02:33:08,399
yeah I I think we uh we'll have ways to

3577
02:33:08,399 --> 02:33:10,500
remote operate the robot and intervene

3578
02:33:10,500 --> 02:33:12,540
when it does something bad especially

3579
02:33:12,540 --> 02:33:13,680
when we are training the robot and

3580
02:33:13,680 --> 02:33:15,240
bringing it up

3581
02:33:15,240 --> 02:33:17,160
um and hopefully we you know design it

3582
02:33:17,160 --> 02:33:19,500
in a way that we can stop the robot from

3583
02:33:19,500 --> 02:33:21,540
if it's going to hit something we can

3584
02:33:21,540 --> 02:33:22,979
just like hold it and it'll stop it

3585
02:33:22,979 --> 02:33:24,300
won't like you know crush your hand or

3586
02:33:24,300 --> 02:33:25,500
something and those are all intervention

3587
02:33:25,500 --> 02:33:27,780
data uh

3588
02:33:27,780 --> 02:33:29,280
yeah and we can learn a lot from our

3589
02:33:29,280 --> 02:33:31,020
simulation systems too where we can

3590
02:33:31,020 --> 02:33:32,939
check for collisions and supervise that

3591
02:33:32,939 --> 02:33:34,979
those are bad actions

3592
02:33:34,979 --> 02:33:38,100
yeah I mean so Optimus we want over time

3593
02:33:38,100 --> 02:33:39,720
to for it to be

3594
02:33:39,720 --> 02:33:41,640
um you know an Android kind of Android

3595
02:33:41,640 --> 02:33:44,700
that you'd seen in in Sci-Fi movies like

3596
02:33:44,700 --> 02:33:46,859
Star Trek the Next Generation like data

3597
02:33:46,859 --> 02:33:49,140
but obviously we could program the robot

3598
02:33:49,140 --> 02:33:51,899
to be less robot-like and more friendly

3599
02:33:51,899 --> 02:33:53,399
and and uh

3600
02:33:53,399 --> 02:33:54,660
you know you can obviously learn to

3601
02:33:54,660 --> 02:33:57,560
emulate humans and and feel very natural

3602
02:33:57,560 --> 02:34:01,740
so as as AI in general improves uh we

3603
02:34:01,740 --> 02:34:05,819
can uh add that to the robot and

3604
02:34:05,819 --> 02:34:07,979
um you know it should be obviously able

3605
02:34:07,979 --> 02:34:10,920
to do simple instructions uh or even

3606
02:34:10,920 --> 02:34:13,680
into it what it is that you want

3607
02:34:13,680 --> 02:34:15,780
um so you could give it a high level uh

3608
02:34:15,780 --> 02:34:17,100
instruction and then it can break that

3609
02:34:17,100 --> 02:34:19,500
down into a series of actions and and

3610
02:34:19,500 --> 02:34:22,399
take those actions

3611
02:34:25,140 --> 02:34:27,960
hi uh yeah it's exciting to think that

3612
02:34:27,960 --> 02:34:30,840
with the Optimus you will uh think that

3613
02:34:30,840 --> 02:34:33,060
you can achieve orders of magnitude of

3614
02:34:33,060 --> 02:34:35,880
improvement in economic output

3615
02:34:35,880 --> 02:34:38,160
um that's really exciting

3616
02:34:38,160 --> 02:34:40,200
um and when Tesla started the mission

3617
02:34:40,200 --> 02:34:42,600
was to accelerate the Advent of

3618
02:34:42,600 --> 02:34:44,220
renewable energy or sustainable

3619
02:34:44,220 --> 02:34:47,700
transport so with the Optimus do you

3620
02:34:47,700 --> 02:34:50,220
still see that mission being this

3621
02:34:50,220 --> 02:34:52,500
mission statement of Tesla or is it

3622
02:34:52,500 --> 02:34:54,540
going to be updated with you know

3623
02:34:54,540 --> 02:34:57,840
mission to accelerate the Advent of I

3624
02:34:57,840 --> 02:35:00,120
don't know infinite abundance or

3625
02:35:00,120 --> 02:35:03,000
Limitless Limitless economy

3626
02:35:03,000 --> 02:35:05,340
yeah it I mean it is not strictly

3627
02:35:05,340 --> 02:35:06,660
speaking

3628
02:35:06,660 --> 02:35:10,760
um Optimus is not strictly speaking uh

3629
02:35:10,760 --> 02:35:13,740
directly in line with uh accelerating

3630
02:35:13,740 --> 02:35:15,180
sustainable energy

3631
02:35:15,180 --> 02:35:17,340
it you know

3632
02:35:17,340 --> 02:35:18,899
to the degree that it is more efficient

3633
02:35:18,899 --> 02:35:21,540
at getting things done than a person it

3634
02:35:21,540 --> 02:35:24,120
does I guess help with if you know

3635
02:35:24,120 --> 02:35:26,280
sustainable energy but it I think the

3636
02:35:26,280 --> 02:35:28,319
mission effectively does does somewhat

3637
02:35:28,319 --> 02:35:31,680
broaden with the Advent of Optimus uh to

3638
02:35:31,680 --> 02:35:34,439
uh you know I don't know making the

3639
02:35:34,439 --> 02:35:36,840
future awesome so you know I think you

3640
02:35:36,840 --> 02:35:39,180
look at optimists and um I know about

3641
02:35:39,180 --> 02:35:41,640
you but I I'm excited to see what

3642
02:35:41,640 --> 02:35:43,380
optimists will become

3643
02:35:43,380 --> 02:35:46,140
and you know this is like

3644
02:35:46,140 --> 02:35:48,180
you know if you could I mean you can

3645
02:35:48,180 --> 02:35:51,060
tell like any given technology

3646
02:35:51,060 --> 02:35:53,760
if are you do you want to see what it's

3647
02:35:53,760 --> 02:35:55,620
like in a year two years three years

3648
02:35:55,620 --> 02:35:57,840
four years five years ten

3649
02:35:57,840 --> 02:36:00,359
I'd say for sure you definitely want to

3650
02:36:00,359 --> 02:36:02,640
see what what's happened with Optimus

3651
02:36:02,640 --> 02:36:04,200
um whereas you know a bunch of other

3652
02:36:04,200 --> 02:36:06,359
Technologies are you know sort of

3653
02:36:06,359 --> 02:36:08,220
plateaued

3654
02:36:08,220 --> 02:36:09,060
um

3655
02:36:09,060 --> 02:36:11,770
about name names here but uh

3656
02:36:11,770 --> 02:36:15,240
[Laughter]

3657
02:36:15,240 --> 02:36:18,620
um you know so

3658
02:36:18,899 --> 02:36:20,520
I think Optimus is going to be

3659
02:36:20,520 --> 02:36:22,439
incredible in like five years ten years

3660
02:36:22,439 --> 02:36:24,780
like mind-blowing and I'm really

3661
02:36:24,780 --> 02:36:26,220
interested to see that happen I hope you

3662
02:36:26,220 --> 02:36:28,520
are too

3663
02:36:28,740 --> 02:36:30,600
oh I think

3664
02:36:30,600 --> 02:36:32,760
um I have a quick question here I'm

3665
02:36:32,760 --> 02:36:35,880
Justin and I was wondering like are you

3666
02:36:35,880 --> 02:36:38,420
planning to extend like conversational

3667
02:36:38,420 --> 02:36:41,819
capabilities for the robot and my second

3668
02:36:41,819 --> 02:36:44,460
follow-up question to that is what's

3669
02:36:44,460 --> 02:36:46,560
like the end goal what's the end goal

3670
02:36:46,560 --> 02:36:49,020
with Optimus

3671
02:36:49,020 --> 02:36:51,000
uh yeah optimists would definitely have

3672
02:36:51,000 --> 02:36:54,240
conversational capabilities so

3673
02:36:54,240 --> 02:36:55,680
um

3674
02:36:55,680 --> 02:36:57,660
I I you'd be able to talk to it and have

3675
02:36:57,660 --> 02:36:59,640
a conversation and it would feel quite

3676
02:36:59,640 --> 02:37:00,600
natural

3677
02:37:00,600 --> 02:37:04,560
so from an end call standpoint I'm I'm

3678
02:37:04,560 --> 02:37:05,640
I don't know I think it's Gonna Keep

3679
02:37:05,640 --> 02:37:09,479
keep evolving and

3680
02:37:10,020 --> 02:37:12,240
I'm not sure where where it ends up but

3681
02:37:12,240 --> 02:37:15,240
some some place interesting for sure

3682
02:37:15,240 --> 02:37:16,260
um

3683
02:37:16,260 --> 02:37:17,939
you know we always have to be careful

3684
02:37:17,939 --> 02:37:19,800
about the you know don't go down the

3685
02:37:19,800 --> 02:37:23,460
Terminator path uh that's a you know I I

3686
02:37:23,460 --> 02:37:25,020
thought we might maybe we should start

3687
02:37:25,020 --> 02:37:26,939
off with a video of like the Terminator

3688
02:37:26,939 --> 02:37:28,680
starting off with this you know skull

3689
02:37:28,680 --> 02:37:30,840
crushing but oh that might be I don't

3690
02:37:30,840 --> 02:37:31,740
know if you want to take that too

3691
02:37:31,740 --> 02:37:33,420
seriously so

3692
02:37:33,420 --> 02:37:36,120
yeah you know we we do want Optimus to

3693
02:37:36,120 --> 02:37:39,420
be safe so we are uh designing in

3694
02:37:39,420 --> 02:37:42,420
um safeguards where you can uh locally

3695
02:37:42,420 --> 02:37:44,340
stop the robot

3696
02:37:44,340 --> 02:37:44,939
um

3697
02:37:44,939 --> 02:37:46,859
and uh

3698
02:37:46,859 --> 02:37:49,680
you know with like basically a localized

3699
02:37:49,680 --> 02:37:51,720
control ROM that you can't update over

3700
02:37:51,720 --> 02:37:53,460
the Internet which I think that's quite

3701
02:37:53,460 --> 02:37:55,380
important

3702
02:37:55,380 --> 02:37:56,220
um

3703
02:37:56,220 --> 02:37:58,920
essential frankly

3704
02:37:58,920 --> 02:38:00,420
um so

3705
02:38:00,420 --> 02:38:03,120
uh like a localized stop button

3706
02:38:03,120 --> 02:38:04,140
um

3707
02:38:04,140 --> 02:38:06,060
remote remote control something like

3708
02:38:06,060 --> 02:38:06,780
that

3709
02:38:06,780 --> 02:38:10,020
that cannot be changed

3710
02:38:10,020 --> 02:38:12,020
um

3711
02:38:12,180 --> 02:38:14,100
but I mean it's definitely going to be

3712
02:38:14,100 --> 02:38:15,120
interesting

3713
02:38:15,120 --> 02:38:17,160
it won't be boring

3714
02:38:17,160 --> 02:38:19,580
so

3715
02:38:21,899 --> 02:38:24,780
okay yeah I see you today you have very

3716
02:38:24,780 --> 02:38:26,819
attractive product with dojo and its

3717
02:38:26,819 --> 02:38:29,340
applications so I'm wondering what's the

3718
02:38:29,340 --> 02:38:31,319
future for Dojo platform we would like

3719
02:38:31,319 --> 02:38:33,840
to provide like a infrastructure

3720
02:38:33,840 --> 02:38:36,600
infrastructure and service like AWS or

3721
02:38:36,600 --> 02:38:38,760
you'll be like a sales a chip like the

3722
02:38:38,760 --> 02:38:40,680
Nvidia so basically what's the future

3723
02:38:40,680 --> 02:38:42,780
because of the I say you use a seven

3724
02:38:42,780 --> 02:38:44,700
nanometer so they developer cost is like

3725
02:38:44,700 --> 02:38:47,580
easily over 10 million US Dollars how do

3726
02:38:47,580 --> 02:38:51,359
you make the penis like a business-wise

3727
02:38:51,359 --> 02:38:53,040
yeah I mean

3728
02:38:53,040 --> 02:38:56,340
um Dojo is is a is a very big computer

3729
02:38:56,340 --> 02:38:59,040
um and actually we'll be use a lot of

3730
02:38:59,040 --> 02:39:01,319
power and needs a lot of cooling so I

3731
02:39:01,319 --> 02:39:02,399
think it's probably going to make more

3732
02:39:02,399 --> 02:39:04,740
sense to have Dojo operate in like uh

3733
02:39:04,740 --> 02:39:07,500
Amazon web services manner than to try

3734
02:39:07,500 --> 02:39:10,020
to sell it to someone else

3735
02:39:10,020 --> 02:39:12,479
um so the the most that would be the

3736
02:39:12,479 --> 02:39:14,460
most efficient way to operate Dojo is

3737
02:39:14,460 --> 02:39:18,180
just have it be uh a a service that you

3738
02:39:18,180 --> 02:39:21,420
can use uh that's available online and

3739
02:39:21,420 --> 02:39:24,000
that where you can train your models way

3740
02:39:24,000 --> 02:39:27,660
faster and for less money and that as

3741
02:39:27,660 --> 02:39:29,280
the

3742
02:39:29,280 --> 02:39:33,740
um world transitions to software 2.0

3743
02:39:34,680 --> 02:39:37,380
and that's on the bingo card

3744
02:39:37,380 --> 02:39:38,880
someone I know it has to know how to

3745
02:39:38,880 --> 02:39:41,520
drink five tequilas

3746
02:39:41,520 --> 02:39:44,399
um so let's see

3747
02:39:44,399 --> 02:39:45,660
um

3748
02:39:45,660 --> 02:39:46,980
software 2.0

3749
02:39:46,980 --> 02:39:49,380
[Laughter]

3750
02:39:49,380 --> 02:39:52,800
yeah we'll use a lot of neural net

3751
02:39:52,800 --> 02:39:53,819
training

3752
02:39:53,819 --> 02:39:55,020
so

3753
02:39:55,020 --> 02:39:57,420
uh you know it kind of makes sense that

3754
02:39:57,420 --> 02:39:59,760
over time as there's more more neural

3755
02:39:59,760 --> 02:40:02,399
net stuff that people will want to use

3756
02:40:02,399 --> 02:40:06,060
and uh the fastest lowest cost neural

3757
02:40:06,060 --> 02:40:07,620
net training system

3758
02:40:07,620 --> 02:40:08,819
so I think there's a lot of opportunity

3759
02:40:08,819 --> 02:40:11,359
in that direction

3760
02:40:14,520 --> 02:40:18,180
hi my name is Ali jahanian thank you for

3761
02:40:18,180 --> 02:40:21,660
this event it is very inspirational my

3762
02:40:21,660 --> 02:40:23,040
question is

3763
02:40:23,040 --> 02:40:26,040
um I'm wondering what is your vision for

3764
02:40:26,040 --> 02:40:27,960
uh

3765
02:40:27,960 --> 02:40:31,560
humanit robots that understand our

3766
02:40:31,560 --> 02:40:35,700
emotions and art and can contribute to

3767
02:40:35,700 --> 02:40:38,660
our creativity

3768
02:40:40,140 --> 02:40:42,060
well I think there's this um you're

3769
02:40:42,060 --> 02:40:45,420
already seeing robots that at least uh

3770
02:40:45,420 --> 02:40:48,060
are able to generate very interesting

3771
02:40:48,060 --> 02:40:50,340
art with like like Dali

3772
02:40:50,340 --> 02:40:53,640
um and Dali 2. um

3773
02:40:53,640 --> 02:40:56,160
and I think we'll we'll start seeing

3774
02:40:56,160 --> 02:40:58,380
AI that can actually generate even

3775
02:40:58,380 --> 02:41:00,780
movies that have a that have coherence

3776
02:41:00,780 --> 02:41:03,380
like interesting movies and tell jokes

3777
02:41:03,380 --> 02:41:07,080
so it's quite remarkable how fast AI is

3778
02:41:07,080 --> 02:41:09,720
uh advancing

3779
02:41:09,720 --> 02:41:10,680
um

3780
02:41:10,680 --> 02:41:14,760
at many companies besides Tesla

3781
02:41:14,760 --> 02:41:16,200
we're headed for a very interesting

3782
02:41:16,200 --> 02:41:17,520
future

3783
02:41:17,520 --> 02:41:20,160
and um yeah so

3784
02:41:20,160 --> 02:41:22,260
you guys want to comment on that yeah I

3785
02:41:22,260 --> 02:41:24,540
guess uh The Optimist robot can come up

3786
02:41:24,540 --> 02:41:27,540
with physical art not just digital art

3787
02:41:27,540 --> 02:41:29,520
you can you know you can ask for some

3788
02:41:29,520 --> 02:41:31,439
dance moves in text or voice and then

3789
02:41:31,439 --> 02:41:33,720
you can produce those in the future so

3790
02:41:33,720 --> 02:41:35,460
it's a lot of like physical heart not

3791
02:41:35,460 --> 02:41:37,979
just digital art

3792
02:41:37,979 --> 02:41:39,660
oh yeah yeah computers can absolutely

3793
02:41:39,660 --> 02:41:42,300
make a physical art yeah yeah 100 yeah

3794
02:41:42,300 --> 02:41:44,220
like dance sure play soccer or whatever

3795
02:41:44,220 --> 02:41:45,240
you

3796
02:41:45,240 --> 02:41:47,280
um I mean it needs to get more agile but

3797
02:41:47,280 --> 02:41:50,660
over time for sure

3798
02:41:50,939 --> 02:41:53,760
thanks so much for the presentation for

3799
02:41:53,760 --> 02:41:56,700
the Tesla autopilot slides I noticed

3800
02:41:56,700 --> 02:41:58,620
that the models that you were using were

3801
02:41:58,620 --> 02:42:01,260
heavily motivated by language models and

3802
02:42:01,260 --> 02:42:02,880
I was wondering what the history of that

3803
02:42:02,880 --> 02:42:04,859
was and how much of an improvement it

3804
02:42:04,859 --> 02:42:06,300
gave I thought that that was a really

3805
02:42:06,300 --> 02:42:08,040
interesting curious choice to use

3806
02:42:08,040 --> 02:42:09,300
language models for the lane

3807
02:42:09,300 --> 02:42:11,040
transitioning

3808
02:42:11,040 --> 02:42:13,020
so there are sort of two aspects for why

3809
02:42:13,020 --> 02:42:15,060
we transitioned to language modeling so

3810
02:42:15,060 --> 02:42:18,439
the first talk talk loud and close Okay

3811
02:42:18,439 --> 02:42:21,000
okay got it

3812
02:42:21,000 --> 02:42:23,040
yeah so the language models help us in

3813
02:42:23,040 --> 02:42:25,260
two ways the first way is that it lets

3814
02:42:25,260 --> 02:42:26,399
us predict lanes that we couldn't have

3815
02:42:26,399 --> 02:42:28,800
otherwise as a shook mentioned earlier

3816
02:42:28,800 --> 02:42:31,080
basically when we predicted Lanes in

3817
02:42:31,080 --> 02:42:34,260
sort of a dense 3D fashion you can only

3818
02:42:34,260 --> 02:42:36,000
model certain kinds of lanes but we want

3819
02:42:36,000 --> 02:42:37,260
to get those crisscrossing connections

3820
02:42:37,260 --> 02:42:39,000
inside of intersections it's just not

3821
02:42:39,000 --> 02:42:40,859
possible to do that without making it a

3822
02:42:40,859 --> 02:42:42,540
graph prediction if you try to do this

3823
02:42:42,540 --> 02:42:43,800
with dense segmentation it just doesn't

3824
02:42:43,800 --> 02:42:45,000
work

3825
02:42:45,000 --> 02:42:45,600
um

3826
02:42:45,600 --> 02:42:48,060
also the lane prediction is a multimodal

3827
02:42:48,060 --> 02:42:49,740
problem sometimes you just don't have

3828
02:42:49,740 --> 02:42:51,660
sufficient visual information to know

3829
02:42:51,660 --> 02:42:53,220
precisely how things look on the other

3830
02:42:53,220 --> 02:42:55,319
side of the intersection so you need a

3831
02:42:55,319 --> 02:42:57,960
method that can generalize and produce

3832
02:42:57,960 --> 02:43:00,000
um you know coherent predictions you

3833
02:43:00,000 --> 02:43:01,380
don't want to be predicting two lanes in

3834
02:43:01,380 --> 02:43:02,700
three lanes at the same time you want to

3835
02:43:02,700 --> 02:43:04,560
commit to one in a generative model like

3836
02:43:04,560 --> 02:43:08,000
these language models provides that

3837
02:43:10,500 --> 02:43:15,120
hi oh hi uh my name is Giovanni

3838
02:43:15,120 --> 02:43:17,580
um yeah thanks for the presentation

3839
02:43:17,580 --> 02:43:20,100
that's really nice I have a question for

3840
02:43:20,100 --> 02:43:21,540
our FSD team

3841
02:43:21,540 --> 02:43:26,700
so for the neural networks how do you

3842
02:43:26,700 --> 02:43:29,100
test like how do you do unit test

3843
02:43:29,100 --> 02:43:31,680
software unit tests on that like do you

3844
02:43:31,680 --> 02:43:34,200
have like a a bunch or I don't know mid

3845
02:43:34,200 --> 02:43:35,760
thousands or

3846
02:43:35,760 --> 02:43:39,300
uh yes uh cases where

3847
02:43:39,300 --> 02:43:41,340
so the neural network that after you

3848
02:43:41,340 --> 02:43:43,500
train it you have to pass it before you

3849
02:43:43,500 --> 02:43:46,380
release it to as a product right uh yeah

3850
02:43:46,380 --> 02:43:48,780
what's your software unit testing

3851
02:43:48,780 --> 02:43:51,060
strategies for this basically yeah glad

3852
02:43:51,060 --> 02:43:53,280
you asked there's like a series of tests

3853
02:43:53,280 --> 02:43:55,020
that we have defined uh starting from

3854
02:43:55,020 --> 02:43:56,280
you know unit test for the software

3855
02:43:56,280 --> 02:43:57,600
itself but then for the neural network

3856
02:43:57,600 --> 02:44:00,479
models we have VIP sets defined where

3857
02:44:00,479 --> 02:44:03,000
you know you can Define uh if you just

3858
02:44:03,000 --> 02:44:04,620
have a large test set that's not enough

3859
02:44:04,620 --> 02:44:06,359
what we find uh we need like

3860
02:44:06,359 --> 02:44:09,000
sophisticated uh VIP sets for different

3861
02:44:09,000 --> 02:44:11,220
failure modes and then we curate them

3862
02:44:11,220 --> 02:44:12,660
and grow them over the time of the

3863
02:44:12,660 --> 02:44:15,000
product so over the years we have like

3864
02:44:15,000 --> 02:44:17,580
like hundreds of thousands of examples

3865
02:44:17,580 --> 02:44:19,260
where we have been failing in the past

3866
02:44:19,260 --> 02:44:21,780
that we have curated and so we for any

3867
02:44:21,780 --> 02:44:23,760
new model we test against the entire

3868
02:44:23,760 --> 02:44:26,100
history of these failures uh and then

3869
02:44:26,100 --> 02:44:28,020
keep adding to this test set

3870
02:44:28,020 --> 02:44:30,120
on top of this we have Shadow modes

3871
02:44:30,120 --> 02:44:32,340
where we ship these models in silent to

3872
02:44:32,340 --> 02:44:34,140
the car and we get data back on where

3873
02:44:34,140 --> 02:44:36,600
they are failing or succeeding uh and

3874
02:44:36,600 --> 02:44:40,260
there's extensive QA program it's very

3875
02:44:40,260 --> 02:44:42,240
hard to ship a regression there's like

3876
02:44:42,240 --> 02:44:44,040
nine levels of filters before it hits

3877
02:44:44,040 --> 02:44:45,660
customers but then we have really good

3878
02:44:45,660 --> 02:44:48,780
infra to make this all efficient

3879
02:44:48,780 --> 02:44:51,660
and I'm one of the QA testers so I QA

3880
02:44:51,660 --> 02:44:56,160
the car yeah like a Creator yeah so I'm

3881
02:44:56,160 --> 02:44:58,560
constantly in the car just being

3882
02:44:58,560 --> 02:45:01,260
queuing like whatever the latest uh

3883
02:45:01,260 --> 02:45:02,880
alpha build is that doesn't totally

3884
02:45:02,880 --> 02:45:04,260
crash

3885
02:45:04,260 --> 02:45:07,340
finds a lot of bugs

3886
02:45:07,920 --> 02:45:10,859
uh hi um great event I have a question

3887
02:45:10,859 --> 02:45:14,819
about uh foundational models for uh I

3888
02:45:14,819 --> 02:45:17,760
have all seen that uh big models that

3889
02:45:17,760 --> 02:45:20,399
really can when you scale up with data

3890
02:45:20,399 --> 02:45:23,040
and model parameter right from GT3 to

3891
02:45:23,040 --> 02:45:25,920
Palm it can actually now do reasoning do

3892
02:45:25,920 --> 02:45:29,040
you see that it's essential uh skinning

3893
02:45:29,040 --> 02:45:31,859
up foundational models with data and

3894
02:45:31,859 --> 02:45:34,800
size and then at least you can get a

3895
02:45:34,800 --> 02:45:37,680
teacher model right that potentially can

3896
02:45:37,680 --> 02:45:39,540
solve all the problems and then you

3897
02:45:39,540 --> 02:45:43,020
distill to a student model is that how

3898
02:45:43,020 --> 02:45:45,540
you see foundational models relevant for

3899
02:45:45,540 --> 02:45:47,460
at 100 I mean that's quite similar to

3900
02:45:47,460 --> 02:45:49,740
our Auto labeling model so we we don't

3901
02:45:49,740 --> 02:45:51,420
just have models that run in the car we

3902
02:45:51,420 --> 02:45:53,280
train models that are entirely Offline

3903
02:45:53,280 --> 02:45:55,319
that are like extremely large that can't

3904
02:45:55,319 --> 02:45:57,960
run in real time on the car so we just

3905
02:45:57,960 --> 02:45:59,520
run those offline on the servers

3906
02:45:59,520 --> 02:46:01,920
producing really good labels

3907
02:46:01,920 --> 02:46:04,740
that can then train the online networks

3908
02:46:04,740 --> 02:46:07,020
so that's one form of distillation of

3909
02:46:07,020 --> 02:46:09,840
these teacher student models

3910
02:46:09,840 --> 02:46:11,520
right in terms of foundation models we

3911
02:46:11,520 --> 02:46:12,840
are building some really really large

3912
02:46:12,840 --> 02:46:14,899
data sets that you know are multiple

3913
02:46:14,899 --> 02:46:17,640
petabytes and we are seeing that some of

3914
02:46:17,640 --> 02:46:19,500
these tasks work really well uh when we

3915
02:46:19,500 --> 02:46:21,000
have this large data sets like the

3916
02:46:21,000 --> 02:46:23,819
kinematics like I mentioned video in all

3917
02:46:23,819 --> 02:46:25,380
the kinematics out of all the objects

3918
02:46:25,380 --> 02:46:27,479
and up to the fourth derivative and

3919
02:46:27,479 --> 02:46:28,859
people thought we couldn't do detection

3920
02:46:28,859 --> 02:46:31,439
with cameras detection depth velocity

3921
02:46:31,439 --> 02:46:33,840
acceleration and imagine how precise

3922
02:46:33,840 --> 02:46:36,240
these have to be for these higher order

3923
02:46:36,240 --> 02:46:38,220
derivatives to be accurate and this all

3924
02:46:38,220 --> 02:46:39,960
comes from these kind of large data sets

3925
02:46:39,960 --> 02:46:41,760
and large models

3926
02:46:41,760 --> 02:46:43,140
so we are seeing the equivalent of

3927
02:46:43,140 --> 02:46:45,780
foundation models in our own way for

3928
02:46:45,780 --> 02:46:47,340
geometry and kinematics and things like

3929
02:46:47,340 --> 02:46:49,520
those

3930
02:46:49,740 --> 02:46:52,740
you want to add anything John

3931
02:46:52,740 --> 02:46:54,300
yeah I'll keep it brief basically

3932
02:46:54,300 --> 02:46:55,920
whenever we train on a larger data set

3933
02:46:55,920 --> 02:47:00,060
we see big okay basically whenever we

3934
02:47:00,060 --> 02:47:01,800
train on a larger data set we see big

3935
02:47:01,800 --> 02:47:03,120
improvements in our model performance

3936
02:47:03,120 --> 02:47:05,220
and basically whenever we initialize our

3937
02:47:05,220 --> 02:47:07,439
networks with you know some pre-training

3938
02:47:07,439 --> 02:47:09,180
step from some other auxiliary task we

3939
02:47:09,180 --> 02:47:11,100
basically see improvements the

3940
02:47:11,100 --> 02:47:12,780
self-supervised or supervised with large

3941
02:47:12,780 --> 02:47:15,920
data sets both help a lot

3942
02:47:17,520 --> 02:47:20,700
hey so at the beginning Elon said that

3943
02:47:20,700 --> 02:47:22,200
Tesla was potentially interested in

3944
02:47:22,200 --> 02:47:24,479
building artificial general intelligence

3945
02:47:24,479 --> 02:47:26,280
systems given the potentially

3946
02:47:26,280 --> 02:47:28,500
transformative impact of technology like

3947
02:47:28,500 --> 02:47:30,479
that it seems prudent to invest in

3948
02:47:30,479 --> 02:47:33,780
technical AGI safety uh expertise

3949
02:47:33,780 --> 02:47:36,060
specifically I know Tesla does a lot of

3950
02:47:36,060 --> 02:47:39,120
technical narrow AI Safety Research I

3951
02:47:39,120 --> 02:47:41,700
was curious if Tesla was intending to

3952
02:47:41,700 --> 02:47:44,220
try to build expertise in technical

3953
02:47:44,220 --> 02:47:46,500
artificial general intelligence safety

3954
02:47:46,500 --> 02:47:48,420
specifically

3955
02:47:48,420 --> 02:47:50,580
well if I mean if if it starts looking

3956
02:47:50,580 --> 02:47:53,280
like we're gonna be uh making a

3957
02:47:53,280 --> 02:47:55,380
significant contribution to artificial

3958
02:47:55,380 --> 02:47:57,600
general intelligence then then we'll for

3959
02:47:57,600 --> 02:47:59,819
sure invest in in uh safety I'm a big

3960
02:47:59,819 --> 02:48:01,800
believer in AI safety I think there

3961
02:48:01,800 --> 02:48:04,200
should be an AI uh

3962
02:48:04,200 --> 02:48:06,660
sort of regulatory Authority at the

3963
02:48:06,660 --> 02:48:08,939
government level uh just as there is a

3964
02:48:08,939 --> 02:48:11,340
regulatory Authority for uh anything

3965
02:48:11,340 --> 02:48:13,380
that affects Public Safety so we have a

3966
02:48:13,380 --> 02:48:15,240
regulatory Authority for aircraft and

3967
02:48:15,240 --> 02:48:19,140
cars and uh sort of food and drugs and

3968
02:48:19,140 --> 02:48:21,720
because they affect Public Safety and AI

3969
02:48:21,720 --> 02:48:24,840
also affects Public Safety so I think

3970
02:48:24,840 --> 02:48:26,100
um and this is not really something that

3971
02:48:26,100 --> 02:48:28,319
government I think understands yet but I

3972
02:48:28,319 --> 02:48:30,240
think I think there should be a referee

3973
02:48:30,240 --> 02:48:32,819
that is uh ensuring

3974
02:48:32,819 --> 02:48:35,399
um or doing trying to ensure uh Public

3975
02:48:35,399 --> 02:48:38,040
Safety for uh AGI

3976
02:48:38,040 --> 02:48:39,300
um

3977
02:48:39,300 --> 02:48:41,700
and you think of like well like what are

3978
02:48:41,700 --> 02:48:43,380
the elements that are necessary to to

3979
02:48:43,380 --> 02:48:45,899
create AGI like uh

3980
02:48:45,899 --> 02:48:49,280
the accessible data set is extremely

3981
02:48:49,280 --> 02:48:52,800
important and if you've got a large

3982
02:48:52,800 --> 02:48:56,700
number of of cars and humanoid robots uh

3983
02:48:56,700 --> 02:48:58,620
processing

3984
02:48:58,620 --> 02:49:02,100
you know petabytes of of video data and

3985
02:49:02,100 --> 02:49:04,680
audio data from The Real World uh just

3986
02:49:04,680 --> 02:49:07,620
like humans that that's that might be

3987
02:49:07,620 --> 02:49:09,479
the biggest data set it probably is the

3988
02:49:09,479 --> 02:49:11,220
biggest data set

3989
02:49:11,220 --> 02:49:11,819
um

3990
02:49:11,819 --> 02:49:13,439
because in addition to that you can

3991
02:49:13,439 --> 02:49:15,240
obviously incrementally scan the the

3992
02:49:15,240 --> 02:49:16,740
internet

3993
02:49:16,740 --> 02:49:17,340
um

3994
02:49:17,340 --> 02:49:19,140
but what the internet can't quite do is

3995
02:49:19,140 --> 02:49:20,399
is have

3996
02:49:20,399 --> 02:49:21,899
millions or hundreds of millions of

3997
02:49:21,899 --> 02:49:25,280
cameras in the real world

3998
02:49:25,280 --> 02:49:28,200
like I said with audio and and uh and

3999
02:49:28,200 --> 02:49:31,080
other sensors as well so so I think we

4000
02:49:31,080 --> 02:49:33,180
probably will have the most amount of

4001
02:49:33,180 --> 02:49:34,500
data

4002
02:49:34,500 --> 02:49:37,500
um and probably the most amount of TR of

4003
02:49:37,500 --> 02:49:39,300
training power

4004
02:49:39,300 --> 02:49:43,020
therefore probably uh we will make a

4005
02:49:43,020 --> 02:49:46,160
contribution to AGI

4006
02:49:48,060 --> 02:49:51,359
hey um I noticed the semi was back there

4007
02:49:51,359 --> 02:49:53,040
but we haven't talked about it too much

4008
02:49:53,040 --> 02:49:55,200
I was just wondering for the semi truck

4009
02:49:55,200 --> 02:49:57,660
what are the uh changes you're thinking

4010
02:49:57,660 --> 02:49:59,700
about from a sensing perspective I

4011
02:49:59,700 --> 02:50:00,660
imagine there's very different

4012
02:50:00,660 --> 02:50:03,300
requirements obviously than just a car

4013
02:50:03,300 --> 02:50:04,979
if and if you don't think that's true

4014
02:50:04,979 --> 02:50:06,479
why is that true

4015
02:50:06,479 --> 02:50:09,300
uh no I think uh basically uh you can

4016
02:50:09,300 --> 02:50:11,340
drive a car I mean think about what

4017
02:50:11,340 --> 02:50:14,520
drives any vehicle it's um a biological

4018
02:50:14,520 --> 02:50:17,700
neural net uh with uh with eyes with

4019
02:50:17,700 --> 02:50:21,200
cameras essentially so if um and really

4020
02:50:21,200 --> 02:50:25,800
what is your your primary sensors are uh

4021
02:50:25,800 --> 02:50:28,500
two uh cameras on a slow gimbal a very

4022
02:50:28,500 --> 02:50:29,939
slow gimbal

4023
02:50:29,939 --> 02:50:33,660
um that's uh that's your head uh so if

4024
02:50:33,660 --> 02:50:35,819
if um you know if a biological neural

4025
02:50:35,819 --> 02:50:37,740
net with with two cameras on a slow

4026
02:50:37,740 --> 02:50:40,620
gimbal can drive a semi truck then

4027
02:50:40,620 --> 02:50:42,840
um if you've got like eight cameras with

4028
02:50:42,840 --> 02:50:45,840
continuous 360 degree Vision uh

4029
02:50:45,840 --> 02:50:47,220
operating at a higher frame rate and

4030
02:50:47,220 --> 02:50:49,080
much higher reaction rate then I think

4031
02:50:49,080 --> 02:50:50,819
it is obvious that you should be able to

4032
02:50:50,819 --> 02:50:52,740
drive a semi or any any vehicle much

4033
02:50:52,740 --> 02:50:55,280
better than a human

4034
02:50:56,700 --> 02:50:59,280
hi my name is Akshay thank you for the

4035
02:50:59,280 --> 02:51:02,520
event uh assuming you know Optimus would

4036
02:51:02,520 --> 02:51:04,800
be used for different use cases and

4037
02:51:04,800 --> 02:51:06,899
would evolve at different piece for

4038
02:51:06,899 --> 02:51:09,840
these use cases uh would it be possible

4039
02:51:09,840 --> 02:51:12,420
to sort of develop and deploy different

4040
02:51:12,420 --> 02:51:14,600
software and Hardware components

4041
02:51:14,600 --> 02:51:17,939
independently and deploy them you know

4042
02:51:17,939 --> 02:51:19,680
in the

4043
02:51:19,680 --> 02:51:22,680
in Optimus so that the overall you know

4044
02:51:22,680 --> 02:51:24,660
feature development is faster for

4045
02:51:24,660 --> 02:51:27,319
Optimus

4046
02:51:28,020 --> 02:51:30,540
reference to the questions

4047
02:51:30,540 --> 02:51:33,540
okay all right we did not comprehend uh

4048
02:51:33,540 --> 02:51:35,460
unfortunately our neural net did not

4049
02:51:35,460 --> 02:51:36,660
comprehend the question

4050
02:51:36,660 --> 02:51:38,399
uh

4051
02:51:38,399 --> 02:51:42,800
yeah so well next question

4052
02:51:44,100 --> 02:51:46,380
I want to switch a gear to the autopilot

4053
02:51:46,380 --> 02:51:47,520
so

4054
02:51:47,520 --> 02:51:49,439
um when you guys plan to roll out the

4055
02:51:49,439 --> 02:51:52,500
FSD beta to countries other than us and

4056
02:51:52,500 --> 02:51:55,020
Canada and also my next question is

4057
02:51:55,020 --> 02:51:57,300
what's the biggest bottleneck or the

4058
02:51:57,300 --> 02:51:59,100
technological barrier you think in the

4059
02:51:59,100 --> 02:52:01,319
current order part of the stack and how

4060
02:52:01,319 --> 02:52:03,420
you envision to solve that to make the

4061
02:52:03,420 --> 02:52:05,760
autopilot is considerable better than

4062
02:52:05,760 --> 02:52:07,680
human in terms of like performance

4063
02:52:07,680 --> 02:52:10,140
Matrix safety assurance and the human

4064
02:52:10,140 --> 02:52:11,279
confidence

4065
02:52:11,279 --> 02:52:14,340
I think you're also matching 4V uh fstb

4066
02:52:14,340 --> 02:52:15,720
or whatever you are guys going to

4067
02:52:15,720 --> 02:52:17,819
combine the highway and the city as a

4068
02:52:17,819 --> 02:52:20,460
single stack and some architectural uh

4069
02:52:20,460 --> 02:52:22,260
big Improvement can you maybe experiment

4070
02:52:22,260 --> 02:52:24,540
a bit on that thank you

4071
02:52:24,540 --> 02:52:25,979
uh well that's a whole bunch of

4072
02:52:25,979 --> 02:52:29,040
questions well we we

4073
02:52:29,040 --> 02:52:31,319
I we're hopeful to be able to I think

4074
02:52:31,319 --> 02:52:33,240
from a technical standpoint

4075
02:52:33,240 --> 02:52:35,880
um FSD beta should be it should be

4076
02:52:35,880 --> 02:52:38,700
possible to roll that sfsd beta uh

4077
02:52:38,700 --> 02:52:41,580
worldwide by the end of this year

4078
02:52:41,580 --> 02:52:43,380
um

4079
02:52:43,380 --> 02:52:45,180
um but we you know from for a lot of

4080
02:52:45,180 --> 02:52:47,760
countries we need regulatory approval

4081
02:52:47,760 --> 02:52:49,680
um and so we are somewhat gated by the

4082
02:52:49,680 --> 02:52:52,200
regulatory approval in other countries

4083
02:52:52,200 --> 02:52:54,120
um

4084
02:52:54,120 --> 02:52:56,160
but I you know I but I think from

4085
02:52:56,160 --> 02:52:57,840
technical standpoint it will be ready to

4086
02:52:57,840 --> 02:52:58,859
go

4087
02:52:58,859 --> 02:53:01,979
uh to to a worldwide beta by the end of

4088
02:53:01,979 --> 02:53:04,200
this year and there's quite a big

4089
02:53:04,200 --> 02:53:05,760
Improvement that we're expecting to

4090
02:53:05,760 --> 02:53:08,340
release next month uh that will always

4091
02:53:08,340 --> 02:53:11,819
be especially good at uh

4092
02:53:11,819 --> 02:53:14,160
assessing the velocity of fast-moving

4093
02:53:14,160 --> 02:53:15,960
cross traffic and a bunch of other

4094
02:53:15,960 --> 02:53:20,580
things so anyone elaborate

4095
02:53:20,580 --> 02:53:22,100
for the objects

4096
02:53:22,100 --> 02:53:24,600
yeah I guess so there used to be a lot

4097
02:53:24,600 --> 02:53:25,800
of differences between production

4098
02:53:25,800 --> 02:53:27,960
autopilot and the full self-driving beta

4099
02:53:27,960 --> 02:53:29,460
but those differences have been getting

4100
02:53:29,460 --> 02:53:32,100
smaller and smaller over time I think

4101
02:53:32,100 --> 02:53:34,020
just a few months ago we now use the

4102
02:53:34,020 --> 02:53:35,700
same vision only object detection stack

4103
02:53:35,700 --> 02:53:38,100
in both FSD and in the production

4104
02:53:38,100 --> 02:53:40,800
autopilot on all vehicles

4105
02:53:40,800 --> 02:53:42,359
um there's still a few differences the

4106
02:53:42,359 --> 02:53:43,620
primary one being the way that we

4107
02:53:43,620 --> 02:53:45,960
predict Lanes right now so we upgraded

4108
02:53:45,960 --> 02:53:47,220
the modeling of Lane so that it could

4109
02:53:47,220 --> 02:53:48,600
handle these more complex geometries

4110
02:53:48,600 --> 02:53:51,060
like I mentioned in the talk in

4111
02:53:51,060 --> 02:53:53,220
production autopilot we still use a

4112
02:53:53,220 --> 02:53:55,740
simpler lane model but we're extending

4113
02:53:55,740 --> 02:53:58,439
our current FSD beta models to work in

4114
02:53:58,439 --> 02:54:00,960
all sort of Highway scenarios as well

4115
02:54:00,960 --> 02:54:03,479
uh yeah and the the version of uh FST

4116
02:54:03,479 --> 02:54:05,580
beta that I drive actually does have the

4117
02:54:05,580 --> 02:54:08,760
integrated stack so this uh it uses the

4118
02:54:08,760 --> 02:54:11,100
FSD stack uh both in city streets and

4119
02:54:11,100 --> 02:54:13,560
Highway and uh it works quite well for

4120
02:54:13,560 --> 02:54:16,140
me uh we but we need to validate it in

4121
02:54:16,140 --> 02:54:17,819
all kinds of weather like heavy rain

4122
02:54:17,819 --> 02:54:19,800
snow dust

4123
02:54:19,800 --> 02:54:22,500
um and uh and just make sure it's

4124
02:54:22,500 --> 02:54:24,740
working uh as better than the production

4125
02:54:24,740 --> 02:54:28,020
stack uh in you know across a wide range

4126
02:54:28,020 --> 02:54:30,540
of uh environments but we're pretty

4127
02:54:30,540 --> 02:54:31,920
close to that

4128
02:54:31,920 --> 02:54:32,520
um

4129
02:54:32,520 --> 02:54:36,479
I mean I think it's I don't know maybe

4130
02:54:36,479 --> 02:54:38,279
I'll definitely be before the end of the

4131
02:54:38,279 --> 02:54:41,160
year and and maybe November

4132
02:54:41,160 --> 02:54:43,680
Yeah in our personal drives uh the FSD

4133
02:54:43,680 --> 02:54:45,060
stack on Highway drives already way

4134
02:54:45,060 --> 02:54:46,460
better than the production stack we have

4135
02:54:46,460 --> 02:54:49,680
and we do expect to also include the

4136
02:54:49,680 --> 02:54:51,420
parking lot stack as a part of the FSC

4137
02:54:51,420 --> 02:54:53,700
stack before the end of this year

4138
02:54:53,700 --> 02:54:55,979
so that will basically bring us to you

4139
02:54:55,979 --> 02:54:58,260
sit in the car in the parking lot and

4140
02:54:58,260 --> 02:54:59,819
drive till the end of the parking lot at

4141
02:54:59,819 --> 02:55:01,560
a parking spot before the end of this

4142
02:55:01,560 --> 02:55:02,520
year

4143
02:55:02,520 --> 02:55:04,380
yeah and and in terms of the like the

4144
02:55:04,380 --> 02:55:06,240
the fundamental the fundamental metric

4145
02:55:06,240 --> 02:55:08,760
to optimize against is

4146
02:55:08,760 --> 02:55:11,040
um how many miles per between a

4147
02:55:11,040 --> 02:55:12,600
necessary intervention

4148
02:55:12,600 --> 02:55:14,580
so

4149
02:55:14,580 --> 02:55:17,640
um just massively improving the how many

4150
02:55:17,640 --> 02:55:19,920
miles the car can drive on in full

4151
02:55:19,920 --> 02:55:21,779
autonomy before an intervention is

4152
02:55:21,779 --> 02:55:24,720
required that is uh safety critical

4153
02:55:24,720 --> 02:55:26,640
um so

4154
02:55:26,640 --> 02:55:29,040
yeah that's uh that's the fundamental

4155
02:55:29,040 --> 02:55:31,140
metric that we're measuring uh every

4156
02:55:31,140 --> 02:55:33,420
week and we're making radical

4157
02:55:33,420 --> 02:55:36,319
improvements on that

4158
02:55:36,960 --> 02:55:40,020
hi thank you hi thank you so much for

4159
02:55:40,020 --> 02:55:42,779
the presentation very inspiring my name

4160
02:55:42,779 --> 02:55:45,180
is Daisy I actually have a non-technical

4161
02:55:45,180 --> 02:55:48,240
question for you I'm curious uh if you

4162
02:55:48,240 --> 02:55:51,000
are back to your 20s what are some of

4163
02:55:51,000 --> 02:55:52,740
the things you wish you knew back then

4164
02:55:52,740 --> 02:55:55,560
what are some advice you would give to

4165
02:55:55,560 --> 02:55:58,399
your younger self

4166
02:56:07,500 --> 02:56:08,700
well I'm trying to figure out something

4167
02:56:08,700 --> 02:56:10,200
useful

4168
02:56:10,200 --> 02:56:13,100
uh to say

4169
02:56:14,160 --> 02:56:16,560
yeah yeah I joined Tesla would be one

4170
02:56:16,560 --> 02:56:18,479
thing

4171
02:56:18,479 --> 02:56:20,460
um

4172
02:56:20,460 --> 02:56:22,439
um yeah I think just generally try to

4173
02:56:22,439 --> 02:56:23,399
um

4174
02:56:23,399 --> 02:56:25,920
expose yourself to as many smart people

4175
02:56:25,920 --> 02:56:28,520
as possible

4176
02:56:28,560 --> 02:56:31,439
and I read a lot of books

4177
02:56:31,439 --> 02:56:33,560
um

4178
02:56:34,439 --> 02:56:37,439
you know I do that did do that though uh

4179
02:56:37,439 --> 02:56:40,020
so

4180
02:56:40,020 --> 02:56:41,880
um

4181
02:56:41,880 --> 02:56:44,399
I think there's some Merit to just also

4182
02:56:44,399 --> 02:56:46,680
uh like not being like necessarily too

4183
02:56:46,680 --> 02:56:50,220
intense uh and and like enjoying the

4184
02:56:50,220 --> 02:56:53,220
moment a bit more I would say to 20 or

4185
02:56:53,220 --> 02:56:56,760
20 something me uh just to you know uh

4186
02:56:56,760 --> 02:56:58,200
stop and smell the roses occasionally

4187
02:56:58,200 --> 02:57:01,920
would probably be a good idea

4188
02:57:01,920 --> 02:57:02,580
um

4189
02:57:02,580 --> 02:57:04,620
you know it's like when we're developing

4190
02:57:04,620 --> 02:57:07,020
the the Falcon one rocket

4191
02:57:07,020 --> 02:57:10,859
and uh on on the quadriline atoll and we

4192
02:57:10,859 --> 02:57:12,600
had this beautiful little island that

4193
02:57:12,600 --> 02:57:14,760
we're developing the rocket on

4194
02:57:14,760 --> 02:57:16,680
and not once that during that entire

4195
02:57:16,680 --> 02:57:18,240
time did I even have a drink on the

4196
02:57:18,240 --> 02:57:20,220
beach I'm like well I should have had a

4197
02:57:20,220 --> 02:57:22,500
drink on the beach that would have been

4198
02:57:22,500 --> 02:57:24,740
fine

4199
02:57:26,520 --> 02:57:28,920
thank you very much uh I think you have

4200
02:57:28,920 --> 02:57:31,560
excited all of the robotics people with

4201
02:57:31,560 --> 02:57:33,779
with Optimus uh this feels very much

4202
02:57:33,779 --> 02:57:37,020
like 10 years ago in driving but as uh

4203
02:57:37,020 --> 02:57:39,420
driving has proved to be harder than it

4204
02:57:39,420 --> 02:57:41,760
actually looked 10 years ago what do we

4205
02:57:41,760 --> 02:57:43,620
know now that we didn't 10 years ago

4206
02:57:43,620 --> 02:57:45,960
that would make for example AGI on a

4207
02:57:45,960 --> 02:57:49,399
humanoid come faster

4208
02:57:49,500 --> 02:57:52,080
well I mean it it seems to me that HEI

4209
02:57:52,080 --> 02:57:54,300
is advancing very quickly

4210
02:57:54,300 --> 02:57:55,319
um

4211
02:57:55,319 --> 02:57:57,660
hardly a week goes by without some

4212
02:57:57,660 --> 02:58:00,120
significant announcement

4213
02:58:00,120 --> 02:58:04,460
and uh yeah I mean

4214
02:58:04,560 --> 02:58:06,600
at this point like AI seems to be able

4215
02:58:06,600 --> 02:58:10,859
to win at almost any rule-based game

4216
02:58:10,859 --> 02:58:13,740
uh it's it's able to create extremely

4217
02:58:13,740 --> 02:58:15,720
impressive art

4218
02:58:15,720 --> 02:58:17,840
um

4219
02:58:17,880 --> 02:58:21,540
engage in conversations that

4220
02:58:21,540 --> 02:58:24,899
are are very sophisticated you know

4221
02:58:24,899 --> 02:58:27,180
write essays

4222
02:58:27,180 --> 02:58:30,240
and these these just keep improving

4223
02:58:30,240 --> 02:58:31,140
um

4224
02:58:31,140 --> 02:58:33,359
and there's there's so much more

4225
02:58:33,359 --> 02:58:35,520
so so many more talented people working

4226
02:58:35,520 --> 02:58:37,260
on AI

4227
02:58:37,260 --> 02:58:38,939
and the hardware is getting better I

4228
02:58:38,939 --> 02:58:41,819
think it's a it's a AI is on a super

4229
02:58:41,819 --> 02:58:44,359
like a strong exponential curve of of

4230
02:58:44,359 --> 02:58:47,460
improvement independent of what we do at

4231
02:58:47,460 --> 02:58:49,439
Tesla

4232
02:58:49,439 --> 02:58:51,300
um and obviously we'll benefit somewhat

4233
02:58:51,300 --> 02:58:53,580
from that exponential curve of

4234
02:58:53,580 --> 02:58:56,700
improvement with AI

4235
02:58:56,700 --> 02:58:57,240
um

4236
02:58:57,240 --> 02:58:58,979
accessible just also happens to be very

4237
02:58:58,979 --> 02:59:01,439
good at actuators that Motors you know

4238
02:59:01,439 --> 02:59:03,180
Motors gearboxes controllers Power

4239
02:59:03,180 --> 02:59:05,520
Electronics batteries

4240
02:59:05,520 --> 02:59:07,380
um sensors

4241
02:59:07,380 --> 02:59:08,939
and um

4242
02:59:08,939 --> 02:59:11,100
you know really like I say that you know

4243
02:59:11,100 --> 02:59:13,859
the biggest difference between the robot

4244
02:59:13,859 --> 02:59:16,020
on four wheels and the robot with arms

4245
02:59:16,020 --> 02:59:18,720
and legs is is getting the actuators

4246
02:59:18,720 --> 02:59:20,580
right actually it's an actuators and

4247
02:59:20,580 --> 02:59:22,500
sensors problem

4248
02:59:22,500 --> 02:59:23,520
um

4249
02:59:23,520 --> 02:59:25,500
and obviously the you know how you

4250
02:59:25,500 --> 02:59:27,899
control those actuators and sensors but

4251
02:59:27,899 --> 02:59:29,880
it's a

4252
02:59:29,880 --> 02:59:31,800
yeah actuators and sensors and how you

4253
02:59:31,800 --> 02:59:33,720
control the actuators it's a

4254
02:59:33,720 --> 02:59:35,100
I know where you have to have like the

4255
02:59:35,100 --> 02:59:36,840
ingredients necessary to create a

4256
02:59:36,840 --> 02:59:41,120
compelling robot and we're doing it so

4257
02:59:42,600 --> 02:59:44,880
hi Elan uh

4258
02:59:44,880 --> 02:59:46,680
you are actually bringing the humanity

4259
02:59:46,680 --> 02:59:49,080
to the next level literally Tesla and

4260
02:59:49,080 --> 02:59:50,880
you are bringing the humanity to the

4261
02:59:50,880 --> 02:59:54,840
next level so you said Optimus Prime uh

4262
02:59:54,840 --> 02:59:57,000
Optimus will be used in next Tesla

4263
02:59:57,000 --> 03:00:00,240
Factory my question is will a new Tesla

4264
03:00:00,240 --> 03:00:02,700
Factory will be fully run by Optimus

4265
03:00:02,700 --> 03:00:03,960
program

4266
03:00:03,960 --> 03:00:05,819
and

4267
03:00:05,819 --> 03:00:09,000
and when can general public order a

4268
03:00:09,000 --> 03:00:10,680
humanoid

4269
03:00:10,680 --> 03:00:12,600
yeah I think it'll it'll you know we're

4270
03:00:12,600 --> 03:00:13,920
going to start optimists with very

4271
03:00:13,920 --> 03:00:16,380
simple tasks in the factory

4272
03:00:16,380 --> 03:00:16,979
um

4273
03:00:16,979 --> 03:00:18,540
you know like maybe just like loading

4274
03:00:18,540 --> 03:00:20,040
apart like you saw in the video loading

4275
03:00:20,040 --> 03:00:22,800
a part uh

4276
03:00:22,800 --> 03:00:24,660
for you know carrying apart from one

4277
03:00:24,660 --> 03:00:27,660
place to another or loading a part into

4278
03:00:27,660 --> 03:00:30,000
um a one of our more conventional robot

4279
03:00:30,000 --> 03:00:34,140
cells uh to you know uh that welds the

4280
03:00:34,140 --> 03:00:37,260
body together so we'll start you know

4281
03:00:37,260 --> 03:00:38,760
just trying to how do we make it useful

4282
03:00:38,760 --> 03:00:40,200
at all

4283
03:00:40,200 --> 03:00:42,000
um and then and then gradually expand

4284
03:00:42,000 --> 03:00:44,100
the number of situations where it's

4285
03:00:44,100 --> 03:00:45,720
useful

4286
03:00:45,720 --> 03:00:47,460
um and I think that that

4287
03:00:47,460 --> 03:00:49,260
the number of situations where Optimus

4288
03:00:49,260 --> 03:00:53,100
is useful will will grow exponentially

4289
03:00:53,100 --> 03:00:55,620
um like really really fast

4290
03:00:55,620 --> 03:00:59,220
um in terms of when people can order one

4291
03:00:59,220 --> 03:01:01,260
I don't know I think it's not that far

4292
03:01:01,260 --> 03:01:02,340
away

4293
03:01:02,340 --> 03:01:04,500
um well I think you mean when can people

4294
03:01:04,500 --> 03:01:06,720
receive one

4295
03:01:06,720 --> 03:01:08,460
um so

4296
03:01:08,460 --> 03:01:10,800
I don't know I'm like I'd say

4297
03:01:10,800 --> 03:01:13,920
probably within three years I'm not more

4298
03:01:13,920 --> 03:01:15,899
than five years within three to five

4299
03:01:15,899 --> 03:01:17,340
years you could probably receive an

4300
03:01:17,340 --> 03:01:19,819
Optimus

4301
03:01:23,580 --> 03:01:25,740
I feel the best way to make the progress

4302
03:01:25,740 --> 03:01:28,020
for agis to involve as many smart people

4303
03:01:28,020 --> 03:01:30,840
across the world as possible and given

4304
03:01:30,840 --> 03:01:32,880
the size and resource of Tesla compared

4305
03:01:32,880 --> 03:01:35,160
to robot companies and given the state

4306
03:01:35,160 --> 03:01:36,800
of humanity research at the moment

4307
03:01:36,800 --> 03:01:39,180
wouldn't make sense for the kind of

4308
03:01:39,180 --> 03:01:42,180
Tesla to sort of Open Source some of the

4309
03:01:42,180 --> 03:01:45,300
simulation hardware parts I think Tesla

4310
03:01:45,300 --> 03:01:47,220
can still be the dominant platformer

4311
03:01:47,220 --> 03:01:48,899
where it can be something like Android

4312
03:01:48,899 --> 03:01:52,140
OS or like iOS stuff for the entire

4313
03:01:52,140 --> 03:01:54,060
human or research would that be

4314
03:01:54,060 --> 03:01:55,979
something that rather than keeping the

4315
03:01:55,979 --> 03:01:59,160
Optimus to just Tesla researchers or the

4316
03:01:59,160 --> 03:02:01,560
factory itself can open it and let the

4317
03:02:01,560 --> 03:02:05,180
whole world explore human research

4318
03:02:10,200 --> 03:02:11,340
um I think we have to be careful about

4319
03:02:11,340 --> 03:02:14,520
Optimus being potentially uh used uh in

4320
03:02:14,520 --> 03:02:17,640
ways that are bad uh because that is one

4321
03:02:17,640 --> 03:02:22,020
of the possible things to do so

4322
03:02:22,560 --> 03:02:25,020
I think we would you know would

4323
03:02:25,020 --> 03:02:27,060
provide optimists

4324
03:02:27,060 --> 03:02:29,460
where you can provide instructions to

4325
03:02:29,460 --> 03:02:31,260
optimists but where those instructions

4326
03:02:31,260 --> 03:02:34,979
are uh you know governed by some laws of

4327
03:02:34,979 --> 03:02:36,240
robotics

4328
03:02:36,240 --> 03:02:40,740
um that you cannot overcome

4329
03:02:40,740 --> 03:02:42,120
so

4330
03:02:42,120 --> 03:02:44,640
you know not doing harm to others and

4331
03:02:44,640 --> 03:02:46,740
uh

4332
03:02:46,740 --> 03:02:48,660
it would have I think probably quite a

4333
03:02:48,660 --> 03:02:50,819
few safety related things with with

4334
03:02:50,819 --> 03:02:53,640
Optimus yeah so all right well we'll

4335
03:02:53,640 --> 03:02:55,380
just take maybe a few more questions and

4336
03:02:55,380 --> 03:02:57,180
then and then and then thank you all for

4337
03:02:57,180 --> 03:02:59,359
coming

4338
03:02:59,460 --> 03:03:00,960
questions

4339
03:03:00,960 --> 03:03:01,560
um

4340
03:03:01,560 --> 03:03:03,540
one deep and one Broad

4341
03:03:03,540 --> 03:03:06,120
on the Deep for Optimus what's the

4342
03:03:06,120 --> 03:03:08,340
current and what's the ideal controller

4343
03:03:08,340 --> 03:03:10,439
bandwidth and then in the broader

4344
03:03:10,439 --> 03:03:12,240
question uh there's this big

4345
03:03:12,240 --> 03:03:14,279
advertisement for the depth and breadth

4346
03:03:14,279 --> 03:03:17,279
of the company what is it uniquely about

4347
03:03:17,279 --> 03:03:21,240
Tesla that enables that

4348
03:03:21,240 --> 03:03:23,279
uh anyone want to tackle the bandwidth

4349
03:03:23,279 --> 03:03:25,439
question yeah

4350
03:03:25,439 --> 03:03:27,840
yeah so the technical bandwidth of the

4351
03:03:27,840 --> 03:03:29,160
costume

4352
03:03:29,160 --> 03:03:30,359
okay

4353
03:03:30,359 --> 03:03:32,100
for the bandwidth question you have to

4354
03:03:32,100 --> 03:03:34,439
understand or or figure out what is the

4355
03:03:34,439 --> 03:03:36,899
task that you wanted to do and what is

4356
03:03:36,899 --> 03:03:38,040
the free if you took a frequency

4357
03:03:38,040 --> 03:03:40,380
transform of that task what is it that

4358
03:03:40,380 --> 03:03:41,939
you want your limbs to do and that's

4359
03:03:41,939 --> 03:03:43,439
where you get your bandwidth from it's

4360
03:03:43,439 --> 03:03:44,880
not a number that you can specifically

4361
03:03:44,880 --> 03:03:46,380
just say you need to understand your use

4362
03:03:46,380 --> 03:03:48,359
case and that's from that's where the

4363
03:03:48,359 --> 03:03:51,180
bandwidth comes from uh okay what is the

4364
03:03:51,180 --> 03:03:52,380
broad question

4365
03:03:52,380 --> 03:03:55,140
I don't quite remember the breadth and

4366
03:03:55,140 --> 03:03:56,340
depth thing I can answer the breadth and

4367
03:03:56,340 --> 03:03:59,060
depth but yeah

4368
03:04:04,740 --> 03:04:07,200
I was interesting on the back of the

4369
03:04:07,200 --> 03:04:08,399
question I think we probably will just

4370
03:04:08,399 --> 03:04:11,220
end up increasing the bandwidth or you

4371
03:04:11,220 --> 03:04:13,920
know which translates to the effect of

4372
03:04:13,920 --> 03:04:15,660
uh dexterity

4373
03:04:15,660 --> 03:04:19,560
um and reaction time of the of the robot

4374
03:04:19,560 --> 03:04:21,720
um like you could save states it's not

4375
03:04:21,720 --> 03:04:23,040
one Hertz

4376
03:04:23,040 --> 03:04:25,319
um and it's maybe you don't need to go

4377
03:04:25,319 --> 03:04:28,620
all the way to 100 Hertz uh but I don't

4378
03:04:28,620 --> 03:04:31,319
know maybe 10 25 I don't know

4379
03:04:31,319 --> 03:04:33,540
over time I think the the bandwidth will

4380
03:04:33,540 --> 03:04:35,399
will increase quite a bit uh or or

4381
03:04:35,399 --> 03:04:39,300
translate it to uh dexterity and latency

4382
03:04:39,300 --> 03:04:41,040
um uh you'd want to minimize that over

4383
03:04:41,040 --> 03:04:44,060
time uh yeah

4384
03:04:44,060 --> 03:04:47,760
minimize latency maximize dexterity

4385
03:04:47,760 --> 03:04:48,540
um

4386
03:04:48,540 --> 03:04:50,520
I mean in terms of breadth and depth um

4387
03:04:50,520 --> 03:04:53,120
I I guess you know we've got

4388
03:04:53,120 --> 03:04:55,260
we're a pretty big company at this point

4389
03:04:55,260 --> 03:04:56,880
so we've got a lot of different areas of

4390
03:04:56,880 --> 03:04:58,560
expertise that we necessarily have to

4391
03:04:58,560 --> 03:05:00,300
develop in order to make autonomous or

4392
03:05:00,300 --> 03:05:02,220
in order to make electric cars and then

4393
03:05:02,220 --> 03:05:04,020
in order to make autonomous electric

4394
03:05:04,020 --> 03:05:05,819
cars

4395
03:05:05,819 --> 03:05:08,460
um we've we've just I mean Tesla is like

4396
03:05:08,460 --> 03:05:11,939
a whole series of startups basically and

4397
03:05:11,939 --> 03:05:13,680
um so far they've

4398
03:05:13,680 --> 03:05:16,920
um almost all been quite successful

4399
03:05:16,920 --> 03:05:19,620
um so we must be doing something right

4400
03:05:19,620 --> 03:05:21,840
um and I you know I consider one of my

4401
03:05:21,840 --> 03:05:24,600
uh core responsibilities uh Iranian

4402
03:05:24,600 --> 03:05:27,240
company is to have an environment where

4403
03:05:27,240 --> 03:05:30,479
uh great Engineers can flourish

4404
03:05:30,479 --> 03:05:33,359
and and I think in a lot of companies

4405
03:05:33,359 --> 03:05:35,819
I don't know maybe most companies uh if

4406
03:05:35,819 --> 03:05:37,740
if somebody's a really talented driven

4407
03:05:37,740 --> 03:05:40,560
engineer they they're unable to actually

4408
03:05:40,560 --> 03:05:42,300
uh

4409
03:05:42,300 --> 03:05:45,180
their their talents are are suppressed

4410
03:05:45,180 --> 03:05:47,880
at a lot of companies and it's you know

4411
03:05:47,880 --> 03:05:50,279
and and some of the companies that the

4412
03:05:50,279 --> 03:05:52,260
engineering Talent is suppressed in a

4413
03:05:52,260 --> 03:05:55,200
way that is uh maybe not obviously bad

4414
03:05:55,200 --> 03:05:57,300
but but where it's just so comfortable

4415
03:05:57,300 --> 03:05:59,819
and you paid so much money and you but

4416
03:05:59,819 --> 03:06:01,979
you your the output you actually have to

4417
03:06:01,979 --> 03:06:04,979
produce is so low that it's like a Honey

4418
03:06:04,979 --> 03:06:07,439
Trap you know so like there's a few

4419
03:06:07,439 --> 03:06:09,660
Honey Trap uh places in Silicon Valley

4420
03:06:09,660 --> 03:06:12,300
uh where they're not necessarily don't

4421
03:06:12,300 --> 03:06:14,220
seem like bad places for engineers but

4422
03:06:14,220 --> 03:06:16,380
you have say like a good engineer went

4423
03:06:16,380 --> 03:06:19,500
in and what did they get out

4424
03:06:19,500 --> 03:06:22,680
and the output of of that engineering

4425
03:06:22,680 --> 03:06:26,180
Talent it seems very low

4426
03:06:26,460 --> 03:06:28,080
even though there seem to be enjoying

4427
03:06:28,080 --> 03:06:30,120
themselves uh that's why I call it

4428
03:06:30,120 --> 03:06:31,920
there's a few Honey Trap companies in

4429
03:06:31,920 --> 03:06:33,720
Silicon Valley uh Tesla is not a Honey

4430
03:06:33,720 --> 03:06:36,180
Trap we're demanding and it's like

4431
03:06:36,180 --> 03:06:38,580
you're gonna get a lot of done

4432
03:06:38,580 --> 03:06:40,859
um and it's going to be really cool

4433
03:06:40,859 --> 03:06:42,180
um

4434
03:06:42,180 --> 03:06:44,399
and it's you know not going to be easy

4435
03:06:44,399 --> 03:06:48,120
but uh if you are a super talented

4436
03:06:48,120 --> 03:06:53,460
engineer your talents will be uh used I

4437
03:06:53,460 --> 03:06:57,180
think to a greater degree than anywhere

4438
03:06:57,180 --> 03:06:59,040
else

4439
03:06:59,040 --> 03:07:00,300
you know

4440
03:07:00,300 --> 03:07:03,920
SpaceX also that way so

4441
03:07:04,040 --> 03:07:07,260
Highline uh uh I have two questions so

4442
03:07:07,260 --> 03:07:09,840
both to the autopilot team so the thing

4443
03:07:09,840 --> 03:07:11,399
is like uh I have been following your

4444
03:07:11,399 --> 03:07:13,560
progress for the past few years so today

4445
03:07:13,560 --> 03:07:15,660
you have made changes on like the lean

4446
03:07:15,660 --> 03:07:17,220
detection like you said that like

4447
03:07:17,220 --> 03:07:18,420
previously you are doing instant

4448
03:07:18,420 --> 03:07:19,979
semantic segmentation now you guys are

4449
03:07:19,979 --> 03:07:22,260
built transfer models for like building

4450
03:07:22,260 --> 03:07:24,840
the lanes so what are another some some

4451
03:07:24,840 --> 03:07:26,340
other common challenges which you guys

4452
03:07:26,340 --> 03:07:28,080
are facing right now like which you are

4453
03:07:28,080 --> 03:07:30,479
solving in future as a curious engineer

4454
03:07:30,479 --> 03:07:32,640
so that like we as a researcher can work

4455
03:07:32,640 --> 03:07:34,920
on those start working on those and the

4456
03:07:34,920 --> 03:07:36,000
second question is like I'm really

4457
03:07:36,000 --> 03:07:38,640
curious about the data engine like you

4458
03:07:38,640 --> 03:07:41,340
guys have like told a case like where

4459
03:07:41,340 --> 03:07:43,319
the car is stopped so how are you

4460
03:07:43,319 --> 03:07:45,240
finding cases which is very much similar

4461
03:07:45,240 --> 03:07:47,160
to that from the data which you have

4462
03:07:47,160 --> 03:07:49,200
like so little bit more on the data

4463
03:07:49,200 --> 03:07:51,960
engine would be great so that's it okay

4464
03:07:51,960 --> 03:07:53,819
um I'll start answer the first question

4465
03:07:53,819 --> 03:07:56,460
uh using occupancy Network as an example

4466
03:07:56,460 --> 03:07:59,700
so uh what you saw in the presentation

4467
03:07:59,700 --> 03:08:02,399
did not exist a year ago so we only

4468
03:08:02,399 --> 03:08:04,140
spent one year about time I'm

4469
03:08:04,140 --> 03:08:05,939
relationship with more than 12 occupancy

4470
03:08:05,939 --> 03:08:08,880
Network and you have a one Foundation

4471
03:08:08,880 --> 03:08:11,399
model actually to represent the entire

4472
03:08:11,399 --> 03:08:15,120
physical world around everywhere and you

4473
03:08:15,120 --> 03:08:16,620
always the condition is actually really

4474
03:08:16,620 --> 03:08:18,720
really challenging so

4475
03:08:18,720 --> 03:08:21,240
only over a year ago we're kind of like

4476
03:08:21,240 --> 03:08:23,640
driving a 2d where if there's a war and

4477
03:08:23,640 --> 03:08:25,800
it says curve we kind of represent with

4478
03:08:25,800 --> 03:08:28,140
the same static Edge which is obviously

4479
03:08:28,140 --> 03:08:30,779
you know not not ideal right there's a

4480
03:08:30,779 --> 03:08:32,160
big difference between a curve and a

4481
03:08:32,160 --> 03:08:33,600
wall when you drive you make different

4482
03:08:33,600 --> 03:08:36,359
choices right so after we realize that

4483
03:08:36,359 --> 03:08:38,520
we have to go to 3D we have to basically

4484
03:08:38,520 --> 03:08:40,920
re-sync the entire problem and think

4485
03:08:40,920 --> 03:08:42,840
about how we address that so this will

4486
03:08:42,840 --> 03:08:45,300
be like one example of a challenges we

4487
03:08:45,300 --> 03:08:47,760
have uh uh we have a conquer in the past

4488
03:08:47,760 --> 03:08:49,939
year

4489
03:08:51,120 --> 03:08:53,279
yeah to answer the question about how we

4490
03:08:53,279 --> 03:08:55,380
actually source examples of the tricky

4491
03:08:55,380 --> 03:08:57,420
stopped cars there's a few ways to go

4492
03:08:57,420 --> 03:09:00,120
about this but two examples are one we

4493
03:09:00,120 --> 03:09:02,279
can trigger for disagreements within our

4494
03:09:02,279 --> 03:09:04,500
signals so let's say that parked bit

4495
03:09:04,500 --> 03:09:07,260
flickers between parked and driving will

4496
03:09:07,260 --> 03:09:09,359
trigger that back and the second is we

4497
03:09:09,359 --> 03:09:10,740
can leverage more of the Shadow mode

4498
03:09:10,740 --> 03:09:13,200
logic so if the customer ignores the car

4499
03:09:13,200 --> 03:09:15,240
but we think we should stop for it we'll

4500
03:09:15,240 --> 03:09:17,580
get that data back too so these are just

4501
03:09:17,580 --> 03:09:19,260
different like various trigger logic

4502
03:09:19,260 --> 03:09:21,060
that allows us to get those data

4503
03:09:21,060 --> 03:09:23,720
campaigns back

4504
03:09:25,500 --> 03:09:26,840
hi

4505
03:09:26,840 --> 03:09:28,979
uh thank you for the amazing

4506
03:09:28,979 --> 03:09:31,920
presentation thanks so much uh so there

4507
03:09:31,920 --> 03:09:33,720
are a lot of companies that are focusing

4508
03:09:33,720 --> 03:09:36,060
on the AGI problem and one of the

4509
03:09:36,060 --> 03:09:37,800
reasons why it's such a hard problem is

4510
03:09:37,800 --> 03:09:39,899
because the problem itself is so hard to

4511
03:09:39,899 --> 03:09:41,520
Define several companies have several

4512
03:09:41,520 --> 03:09:43,140
different definitions they focus on

4513
03:09:43,140 --> 03:09:45,720
different things so what is Tesla how is

4514
03:09:45,720 --> 03:09:47,939
Tesla defining the ATI problem and what

4515
03:09:47,939 --> 03:09:51,120
are you focusing on specifically

4516
03:09:51,120 --> 03:09:53,760
well well we're not actually

4517
03:09:53,760 --> 03:09:56,340
specifically focused on AGI I'm simply

4518
03:09:56,340 --> 03:09:59,160
saying that HGI is so is seems likely to

4519
03:09:59,160 --> 03:10:01,979
be an emergent property of of what we're

4520
03:10:01,979 --> 03:10:03,300
doing

4521
03:10:03,300 --> 03:10:03,899
um

4522
03:10:03,899 --> 03:10:05,580
because we're creating all these

4523
03:10:05,580 --> 03:10:09,120
autonomous cars and autonomous humanoids

4524
03:10:09,120 --> 03:10:13,380
um that are actually uh within a truly

4525
03:10:13,380 --> 03:10:16,140
gigantic data stream that's coming in

4526
03:10:16,140 --> 03:10:18,479
and and being processed

4527
03:10:18,479 --> 03:10:20,580
um it's by far the most amount of real

4528
03:10:20,580 --> 03:10:23,279
world data and and data you can't get by

4529
03:10:23,279 --> 03:10:24,660
just searching the internet because you

4530
03:10:24,660 --> 03:10:26,520
have to be out there in the world and

4531
03:10:26,520 --> 03:10:28,080
interacting with people and interacting

4532
03:10:28,080 --> 03:10:31,319
with the of the roads and and just you

4533
03:10:31,319 --> 03:10:34,080
know Earth is a big place and reality is

4534
03:10:34,080 --> 03:10:36,000
messy and complicated

4535
03:10:36,000 --> 03:10:38,880
um so so I think it's sort of like uh

4536
03:10:38,880 --> 03:10:40,859
likely to just it just seems likely to

4537
03:10:40,859 --> 03:10:43,680
be an emergent property of if you've got

4538
03:10:43,680 --> 03:10:45,479
you know tens or hundreds of millions of

4539
03:10:45,479 --> 03:10:47,760
autonomous vehicles and and maybe even a

4540
03:10:47,760 --> 03:10:49,740
comparable number of humanoids uh maybe

4541
03:10:49,740 --> 03:10:52,140
more than that on the humanoid front

4542
03:10:52,140 --> 03:10:54,000
um well that's just the most amount of

4543
03:10:54,000 --> 03:10:55,020
data

4544
03:10:55,020 --> 03:10:57,060
um and if that that video is being

4545
03:10:57,060 --> 03:10:58,380
processed

4546
03:10:58,380 --> 03:11:00,479
it just seems likely that

4547
03:11:00,479 --> 03:11:03,180
you know the the cars will will

4548
03:11:03,180 --> 03:11:05,220
definitely get way better than human

4549
03:11:05,220 --> 03:11:08,580
drivers and the the humanoid robots will

4550
03:11:08,580 --> 03:11:09,979
become

4551
03:11:09,979 --> 03:11:11,760
increasingly

4552
03:11:11,760 --> 03:11:15,859
indistinguishable from humans perhaps

4553
03:11:16,020 --> 03:11:19,939
and and so then like you said you have a

4554
03:11:20,160 --> 03:11:23,939
emergent property of of AGI

4555
03:11:23,939 --> 03:11:25,939
um

4556
03:11:26,819 --> 03:11:28,979
and arguably the you know humans

4557
03:11:28,979 --> 03:11:31,080
collectively are sort of a super

4558
03:11:31,080 --> 03:11:33,899
intelligence as well especially as we

4559
03:11:33,899 --> 03:11:36,479
improve the data rate between humans I

4560
03:11:36,479 --> 03:11:38,220
mean think like that seems to be way

4561
03:11:38,220 --> 03:11:40,020
back in the early days the internet was

4562
03:11:40,020 --> 03:11:42,240
like the internet was like

4563
03:11:42,240 --> 03:11:44,340
um Humanity acquiring a nervous system

4564
03:11:44,340 --> 03:11:46,979
where now all of a sudden any one

4565
03:11:46,979 --> 03:11:50,100
element of humanity could know uh all of

4566
03:11:50,100 --> 03:11:52,080
the knowledge of of humans by connecting

4567
03:11:52,080 --> 03:11:54,240
to the internet almost all the knowledge

4568
03:11:54,240 --> 03:11:56,340
or certainly huge part of it whereas

4569
03:11:56,340 --> 03:11:58,319
previously uh we would exchange

4570
03:11:58,319 --> 03:12:00,779
information by osmosis by you know by

4571
03:12:00,779 --> 03:12:03,120
we'd have to like in order to transfer

4572
03:12:03,120 --> 03:12:05,040
data so you would have to write a letter

4573
03:12:05,040 --> 03:12:06,540
someone would have to carry the letter

4574
03:12:06,540 --> 03:12:09,840
by person to another person and then a

4575
03:12:09,840 --> 03:12:11,640
whole bunch of things in between and

4576
03:12:11,640 --> 03:12:13,800
then it was like

4577
03:12:13,800 --> 03:12:16,560
this position yeah I mean

4578
03:12:16,560 --> 03:12:18,180
it's insanely slow when you think about

4579
03:12:18,180 --> 03:12:19,020
it

4580
03:12:19,020 --> 03:12:20,760
um and even if you were in the Library

4581
03:12:20,760 --> 03:12:22,500
of Congress you still didn't have access

4582
03:12:22,500 --> 03:12:24,420
to all the world's information and you

4583
03:12:24,420 --> 03:12:26,120
certainly couldn't search it

4584
03:12:26,120 --> 03:12:29,279
and I know obviously very few people are

4585
03:12:29,279 --> 03:12:31,920
in the Library of Congress so

4586
03:12:31,920 --> 03:12:32,819
um

4587
03:12:32,819 --> 03:12:35,100
I mean one of the great

4588
03:12:35,100 --> 03:12:36,359
um

4589
03:12:36,359 --> 03:12:38,700
a sort of equality elements

4590
03:12:38,700 --> 03:12:41,220
like the internet is has been the most

4591
03:12:41,220 --> 03:12:44,040
the biggest equalizer in history in

4592
03:12:44,040 --> 03:12:45,779
terms of access to information or

4593
03:12:45,779 --> 03:12:47,640
knowledge

4594
03:12:47,640 --> 03:12:49,680
um in any student of History I think

4595
03:12:49,680 --> 03:12:51,180
would agree with this

4596
03:12:51,180 --> 03:12:52,920
because you know you go back a thousand

4597
03:12:52,920 --> 03:12:55,439
years there were very few books like

4598
03:12:55,439 --> 03:12:57,720
like and books would be incredibly

4599
03:12:57,720 --> 03:12:59,220
expensive but only a few people knew how

4600
03:12:59,220 --> 03:13:00,899
to read and only if an even smaller

4601
03:13:00,899 --> 03:13:02,760
number of people even had a book

4602
03:13:02,760 --> 03:13:05,760
now now look at it like you you can

4603
03:13:05,760 --> 03:13:08,580
access any book instantly you can learn

4604
03:13:08,580 --> 03:13:11,279
anything for basically for free

4605
03:13:11,279 --> 03:13:13,560
it's pretty incredible

4606
03:13:13,560 --> 03:13:16,279
so

4607
03:13:16,380 --> 03:13:19,560
you know I was asked uh recently

4608
03:13:19,560 --> 03:13:21,060
what

4609
03:13:21,060 --> 03:13:23,479
period of History would I prefer to be

4610
03:13:23,479 --> 03:13:25,680
at the most

4611
03:13:25,680 --> 03:13:28,680
and my answer was right now

4612
03:13:28,680 --> 03:13:30,960
this is the most interesting time in

4613
03:13:30,960 --> 03:13:33,960
history and I read a lot of history

4614
03:13:33,960 --> 03:13:35,880
so let's oh yeah let's do our best to

4615
03:13:35,880 --> 03:13:38,040
keep that going

4616
03:13:38,040 --> 03:13:39,180
yeah

4617
03:13:39,180 --> 03:13:40,680
and to go back to one of the early

4618
03:13:40,680 --> 03:13:42,359
questions I would answer like you can

4619
03:13:42,359 --> 03:13:45,180
the the thing that's happened over time

4620
03:13:45,180 --> 03:13:48,779
with respect to Tesla autopilot is that

4621
03:13:48,779 --> 03:13:51,180
we've just the

4622
03:13:51,180 --> 03:13:53,399
the neural Nets have gotten

4623
03:13:53,399 --> 03:13:55,560
have gradually absorbed more and more

4624
03:13:55,560 --> 03:13:58,620
software and in the limit of course you

4625
03:13:58,620 --> 03:14:01,740
could say simply take the videos as seen

4626
03:14:01,740 --> 03:14:05,220
by the car uh and compare those to these

4627
03:14:05,220 --> 03:14:07,140
the steering inputs from the steering

4628
03:14:07,140 --> 03:14:08,460
wheel and pedals which are very simple

4629
03:14:08,460 --> 03:14:12,720
inputs uh and it in principle you could

4630
03:14:12,720 --> 03:14:15,540
train with nothing in between because

4631
03:14:15,540 --> 03:14:16,800
that's what humans are doing with a

4632
03:14:16,800 --> 03:14:18,720
biological neural net you could train

4633
03:14:18,720 --> 03:14:23,100
based on video and uh and and what

4634
03:14:23,100 --> 03:14:25,740
trains the video is the the moving of

4635
03:14:25,740 --> 03:14:27,240
the the steering wheel and the pedals

4636
03:14:27,240 --> 03:14:29,779
with no other software in between

4637
03:14:29,779 --> 03:14:32,279
we're not there yet but it's gradually

4638
03:14:32,279 --> 03:14:35,420
going in that direction

4639
03:14:36,180 --> 03:14:40,460
oh all right wait last question

4640
03:14:41,040 --> 03:14:43,020
are you going uh I think we've got a

4641
03:14:43,020 --> 03:14:44,880
question in the front here uh hello

4642
03:14:44,880 --> 03:14:47,160
there right there I will do two

4643
03:14:47,160 --> 03:14:50,399
questions fine over there

4644
03:14:50,399 --> 03:14:51,899
um hi uh thanks for such a great

4645
03:14:51,899 --> 03:14:55,260
presentation well the old question last

4646
03:14:55,260 --> 03:14:57,180
um with FSD being used by so many people

4647
03:14:57,180 --> 03:14:59,700
uh do you think what's the com how do

4648
03:14:59,700 --> 03:15:00,899
you evaluate the company's risk

4649
03:15:00,899 --> 03:15:02,580
tolerance in terms of performance

4650
03:15:02,580 --> 03:15:04,200
statistics and do you think there needs

4651
03:15:04,200 --> 03:15:05,880
to be more transparency or regulation

4652
03:15:05,880 --> 03:15:08,760
from third parties as to how what's good

4653
03:15:08,760 --> 03:15:10,200
enough and

4654
03:15:10,200 --> 03:15:12,120
um defining like

4655
03:15:12,120 --> 03:15:14,640
thresholds for performance uh across

4656
03:15:14,640 --> 03:15:16,620
some many miles

4657
03:15:16,620 --> 03:15:21,359
uh sure well the you know I

4658
03:15:21,359 --> 03:15:24,720
the the number one design uh requirement

4659
03:15:24,720 --> 03:15:28,380
at Tesla is safety so um like and that

4660
03:15:28,380 --> 03:15:30,660
goes across the board so in terms of the

4661
03:15:30,660 --> 03:15:33,240
mechanical safety of the car we have the

4662
03:15:33,240 --> 03:15:35,100
lowest probability of injury of any cars

4663
03:15:35,100 --> 03:15:38,460
ever tested by the government for just a

4664
03:15:38,460 --> 03:15:40,439
passive mechanical safety essentially

4665
03:15:40,439 --> 03:15:44,100
crash structure and airbags and whatnot

4666
03:15:44,100 --> 03:15:44,840
um

4667
03:15:44,840 --> 03:15:48,120
uh we have the best uh uh the highest

4668
03:15:48,120 --> 03:15:51,540
rating for active safety as well

4669
03:15:51,540 --> 03:15:53,100
and um

4670
03:15:53,100 --> 03:15:54,300
I think it's going to get to the point

4671
03:15:54,300 --> 03:15:56,220
where you the act of safety is so

4672
03:15:56,220 --> 03:15:58,140
ridiculously good it's it's it's it's

4673
03:15:58,140 --> 03:16:01,680
like just absurdly better than a human

4674
03:16:01,680 --> 03:16:05,100
um and then with respect to uh autopilot

4675
03:16:05,100 --> 03:16:07,380
um we do publish this uh broadly

4676
03:16:07,380 --> 03:16:09,899
speaking the statistics on

4677
03:16:09,899 --> 03:16:12,779
um miles driven with cars that have no

4678
03:16:12,779 --> 03:16:15,779
autonomy or Tesla cars with no autonomy

4679
03:16:15,779 --> 03:16:18,660
with kind of a hardware one Hardware two

4680
03:16:18,660 --> 03:16:20,760
Hardware three

4681
03:16:20,760 --> 03:16:22,500
um and then uh the ones that are in FSD

4682
03:16:22,500 --> 03:16:23,760
beta

4683
03:16:23,760 --> 03:16:25,620
um and we see steady improvements all

4684
03:16:25,620 --> 03:16:27,120
along the way

4685
03:16:27,120 --> 03:16:28,979
um and you know sometimes there's this

4686
03:16:28,979 --> 03:16:32,939
dichotomy of you know should you uh wait

4687
03:16:32,939 --> 03:16:36,060
until the car is like I don't know uh

4688
03:16:36,060 --> 03:16:37,439
three times safer than a person before

4689
03:16:37,439 --> 03:16:39,300
deploying any technology but I think

4690
03:16:39,300 --> 03:16:42,240
that's that's actually morally wrong

4691
03:16:42,240 --> 03:16:43,319
um at the point of which you believe

4692
03:16:43,319 --> 03:16:48,000
that that adding autonomy uh reduces uh

4693
03:16:48,000 --> 03:16:50,340
injury and death

4694
03:16:50,340 --> 03:16:51,060
um

4695
03:16:51,060 --> 03:16:52,979
I think you have a moral obligation to

4696
03:16:52,979 --> 03:16:55,979
deploy it uh even though you're going to

4697
03:16:55,979 --> 03:16:57,899
get sued and blamed by a lot of people

4698
03:16:57,899 --> 03:16:59,939
because the people whose lives you've

4699
03:16:59,939 --> 03:17:02,040
saved don't know that their lives are

4700
03:17:02,040 --> 03:17:05,040
saved and the people the people who who

4701
03:17:05,040 --> 03:17:07,020
do occasionally die or get injured they

4702
03:17:07,020 --> 03:17:09,660
definitely know or their estate does uh

4703
03:17:09,660 --> 03:17:11,939
that it was you know whatever there's a

4704
03:17:11,939 --> 03:17:13,979
problem with with autopilot

4705
03:17:13,979 --> 03:17:16,260
um that's why you have to look at the at

4706
03:17:16,260 --> 03:17:18,540
the numbers in sort of total miles

4707
03:17:18,540 --> 03:17:20,700
driven how many accidents occurred how

4708
03:17:20,700 --> 03:17:22,080
many accidents were serious how many

4709
03:17:22,080 --> 03:17:24,540
fatalities and you know we've got well

4710
03:17:24,540 --> 03:17:26,160
over three million cars on the road so

4711
03:17:26,160 --> 03:17:28,500
this it's that's a lot of miles driven

4712
03:17:28,500 --> 03:17:30,540
every day it's not going to be perfect

4713
03:17:30,540 --> 03:17:33,420
but what matters it is that is that it

4714
03:17:33,420 --> 03:17:36,060
is very clearly safer uh than not

4715
03:17:36,060 --> 03:17:37,920
deploying it

4716
03:17:37,920 --> 03:17:38,460
um

4717
03:17:38,460 --> 03:17:43,640
yeah so I think uh last question

4718
03:17:45,779 --> 03:17:48,600
I think yeah so thanks what's the last

4719
03:17:48,600 --> 03:17:51,020
question here

4720
03:17:51,300 --> 03:17:53,720
okay

4721
03:17:54,720 --> 03:17:58,800
um yeah I got it okay uh hi so

4722
03:17:58,800 --> 03:18:01,859
um I do not work on Hardware so maybe

4723
03:18:01,859 --> 03:18:03,899
the hardware team and you guys can

4724
03:18:03,899 --> 03:18:07,740
enlighten me uh why is it required that

4725
03:18:07,740 --> 03:18:09,660
there be symmetry

4726
03:18:09,660 --> 03:18:11,760
um in the design of Optimus because

4727
03:18:11,760 --> 03:18:15,479
humans uh we have handedness right we

4728
03:18:15,479 --> 03:18:18,120
are we use some set of muscles more than

4729
03:18:18,120 --> 03:18:20,819
others over time there is wear and tear

4730
03:18:20,819 --> 03:18:23,700
uh right so maybe you'll start to see

4731
03:18:23,700 --> 03:18:25,979
some joint failures or some actuator

4732
03:18:25,979 --> 03:18:29,040
failures more over time I understand

4733
03:18:29,040 --> 03:18:31,859
that this is extremely pre-stage

4734
03:18:31,859 --> 03:18:35,960
um also we as humans have based so much

4735
03:18:35,960 --> 03:18:38,880
fantasy and fiction over super human

4736
03:18:38,880 --> 03:18:40,979
capabilities like all of us don't want

4737
03:18:40,979 --> 03:18:43,560
to walk right over there we want to

4738
03:18:43,560 --> 03:18:45,660
extend our arms and like we have all

4739
03:18:45,660 --> 03:18:48,120
these you know a lot of fantasy

4740
03:18:48,120 --> 03:18:51,300
Fantastical designs so considering

4741
03:18:51,300 --> 03:18:53,580
everything else that is going on in

4742
03:18:53,580 --> 03:18:57,000
terms of batteries and intensity of

4743
03:18:57,000 --> 03:19:00,240
compute maybe you can leverage all those

4744
03:19:00,240 --> 03:19:02,520
aspects into coming up with something

4745
03:19:02,520 --> 03:19:05,939
well I don't know more interesting in

4746
03:19:05,939 --> 03:19:08,520
terms of your the robot that you're

4747
03:19:08,520 --> 03:19:11,160
building and I'm hoping uh you're able

4748
03:19:11,160 --> 03:19:13,140
to explore those directions

4749
03:19:13,140 --> 03:19:14,819
yeah I mean I think it would be cool to

4750
03:19:14,819 --> 03:19:16,560
have like you know make Inspector Gadget

4751
03:19:16,560 --> 03:19:19,140
real that would be pretty sweet

4752
03:19:19,140 --> 03:19:22,439
um so yeah I mean you know right now we

4753
03:19:22,439 --> 03:19:25,020
just want to make a basic humanoid what

4754
03:19:25,020 --> 03:19:27,600
work well and our goal is fastest path

4755
03:19:27,600 --> 03:19:30,779
to a useful uh humanoid robot I think

4756
03:19:30,779 --> 03:19:32,760
this is this will ground Us in reality

4757
03:19:32,760 --> 03:19:34,319
literally

4758
03:19:34,319 --> 03:19:38,640
um and ensure that we are uh doing

4759
03:19:38,640 --> 03:19:40,680
something useful like one of the hardest

4760
03:19:40,680 --> 03:19:44,279
things to do is to be useful uh to to

4761
03:19:44,279 --> 03:19:46,800
actually and then and then to have high

4762
03:19:46,800 --> 03:19:48,660
utility under the curve like how many

4763
03:19:48,660 --> 03:19:50,939
people did you help time you know and

4764
03:19:50,939 --> 03:19:53,819
how much help did you

4765
03:19:53,819 --> 03:19:56,580
you provide to each person on average

4766
03:19:56,580 --> 03:19:57,899
and then how many people did you help

4767
03:19:57,899 --> 03:20:00,720
the total utility uh like trying to

4768
03:20:00,720 --> 03:20:03,479
actually ship useful product

4769
03:20:03,479 --> 03:20:06,479
that people like to a large number of

4770
03:20:06,479 --> 03:20:09,420
people is so insanely hard it boggles

4771
03:20:09,420 --> 03:20:10,740
the mind

4772
03:20:10,740 --> 03:20:12,060
um you know that's why I could say like

4773
03:20:12,060 --> 03:20:12,840
man there's a hell of a difference

4774
03:20:12,840 --> 03:20:14,279
between a company that has shift product

4775
03:20:14,279 --> 03:20:16,560
and one has not sure product uh it's a

4776
03:20:16,560 --> 03:20:18,060
game this is night and day

4777
03:20:18,060 --> 03:20:19,439
um and then even once you ship product

4778
03:20:19,439 --> 03:20:21,960
can you make the cost the value of the

4779
03:20:21,960 --> 03:20:24,660
output worth more than the cost of the

4780
03:20:24,660 --> 03:20:26,640
input which is again insanely difficult

4781
03:20:26,640 --> 03:20:29,520
especially with Hardware so

4782
03:20:29,520 --> 03:20:32,880
um but I think over time I think we cool

4783
03:20:32,880 --> 03:20:34,500
to do creative things and have like

4784
03:20:34,500 --> 03:20:36,540
eight arms and whatever

4785
03:20:36,540 --> 03:20:39,660
um and have different versions uh and

4786
03:20:39,660 --> 03:20:42,960
maybe you know there'll be some Hardware

4787
03:20:42,960 --> 03:20:46,080
like companies that are able to add

4788
03:20:46,080 --> 03:20:48,420
things to an optimist like maybe we've

4789
03:20:48,420 --> 03:20:51,120
you know added at a power port or

4790
03:20:51,120 --> 03:20:52,560
something like that or attach them you

4791
03:20:52,560 --> 03:20:54,720
can add you know add attachments to your

4792
03:20:54,720 --> 03:20:56,220
Optimist like you can add them to your

4793
03:20:56,220 --> 03:20:57,540
phone

4794
03:20:57,540 --> 03:20:59,160
um it could be a lot of cool things that

4795
03:20:59,160 --> 03:21:01,020
could be done over time and there could

4796
03:21:01,020 --> 03:21:02,760
be maybe an ecosystem of small companies

4797
03:21:02,760 --> 03:21:06,779
that or companies that make add-ons for

4798
03:21:06,779 --> 03:21:07,800
Optimus

4799
03:21:07,800 --> 03:21:11,180
so with that uh uh

4800
03:21:11,180 --> 03:21:13,439
just thank the team for their hard work

4801
03:21:13,439 --> 03:21:18,080
uh you guys are awesome and uh yeah

4802
03:21:18,180 --> 03:21:20,040
and uh thank

4803
03:21:20,040 --> 03:21:21,600
you and uh

4804
03:21:21,600 --> 03:21:23,460
thank you all for coming and for

4805
03:21:23,460 --> 03:21:26,040
everyone online thanks for tuning in

4806
03:21:26,040 --> 03:21:28,140
um and I think uh this will be one of

4807
03:21:28,140 --> 03:21:30,000
those great videos where you can like if

4808
03:21:30,000 --> 03:21:31,680
you you can fast forward to the bits

4809
03:21:31,680 --> 03:21:33,840
that you find most interesting but we

4810
03:21:33,840 --> 03:21:36,420
try to give you a tremendous amount of

4811
03:21:36,420 --> 03:21:39,180
detail uh literally so you can look at

4812
03:21:39,180 --> 03:21:41,939
the video at your leisure and you can

4813
03:21:41,939 --> 03:21:43,140
focus on the parts that you find

4814
03:21:43,140 --> 03:21:45,180
interesting and skip the other parts uh

4815
03:21:45,180 --> 03:21:47,520
so thank you all it's and we'll do this

4816
03:21:47,520 --> 03:21:49,859
try to do this every year and uh we

4817
03:21:49,859 --> 03:21:52,260
might do a part a monthly podcast even

4818
03:21:52,260 --> 03:21:54,899
um uh so uh but I think it'll be you

4819
03:21:54,899 --> 03:21:57,779
know uh great to sort of

4820
03:21:57,779 --> 03:21:59,460
bring you along for the ride and and

4821
03:21:59,460 --> 03:22:01,380
like show you uh what what cool things

4822
03:22:01,380 --> 03:22:04,140
are are happening and um yeah thank you

4823
03:22:04,140 --> 03:22:05,080
all right thanks

4824
03:22:05,080 --> 03:22:11,870
[Applause]

4825
03:22:53,520 --> 03:22:56,060
thank you

